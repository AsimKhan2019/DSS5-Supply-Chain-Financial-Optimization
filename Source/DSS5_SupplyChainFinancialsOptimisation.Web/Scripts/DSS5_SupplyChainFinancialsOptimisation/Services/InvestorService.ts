// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS5_SupplyChainFinancialsOptimisation.Services {
/**
 * Client for 'Investor' Service
 */
export class InvestorServiceClient {

    /**
     * Base url for 'Investor' Service
     */
    static baseUrl = "/api/Investor/";

    /**
    * Creates a new Investor
    */
    public static Create(newInvestor?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = newInvestor;
                return axios.post(window._context.siteRoot + InvestorServiceClient.baseUrl + "Create",_data);
            }
            /**
            * Get an Investor insance based on UserName
            */
            public static Get(UserName?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = { params: { UserName: UserName } };
                return axios.get(window._context.siteRoot + InvestorServiceClient.baseUrl,_data);
            }
            /**
            * Count all Investors
            */
            public static Count(): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = { params: {  } };
                return axios.get(window._context.siteRoot + InvestorServiceClient.baseUrl + "count",_data);
            }
            /**
            * Gets all Investors. Max pageSize is 50
            */
            public static GetAll(pageSize?:any, pageIndex?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = { params: { pageSize: pageSize,pageIndex: pageIndex } };
                return axios.get(window._context.siteRoot + InvestorServiceClient.baseUrl + "all",_data);
            }
            /**
            * Saves a Investor insance
            */
            public static Save(Investor?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = Investor;
                return axios.post(window._context.siteRoot + InvestorServiceClient.baseUrl,_data);
            }
            /**
            * Deletes a Investor insance based on UserName
            */
            public static Delete(UserName?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = { params: { UserName: UserName } };
                return axios.delete(window._context.siteRoot + InvestorServiceClient.baseUrl,_data);
            }
            /**
            *
            */
            public static Find(name?:any): Axios.IPromise<Axios.AxiosXHR<any>> {
                const _data = { params: { name: name } };
                return axios.get(window._context.siteRoot + InvestorServiceClient.baseUrl + "ExposedOperation",_data);
            }

}
}

// Create service shortcut
if (window.$api == null) {
    window.$api = {};
}

window.$api.Investor = DSS5_SupplyChainFinancialsOptimisation.Services.InvestorServiceClient;
