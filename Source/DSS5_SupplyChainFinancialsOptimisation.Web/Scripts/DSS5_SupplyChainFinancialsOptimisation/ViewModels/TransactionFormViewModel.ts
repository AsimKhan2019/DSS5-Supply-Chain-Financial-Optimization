// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS5_SupplyChainFinancialsOptimisation.ViewModels.TransactionForm {
export class TransactionFormViewModel extends DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Transaction:
true,CodeText:
true,IsSupplier:
                true
            }
        } else {
            this._members["Transaction"] = true;
            this._members["CodeText"] = true;
            this._members["IsSupplier"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Transaction != null)
            instance.Transaction = Transaction_TransactionViewModel._lightCast(instance.Transaction);
        return instance;
    }

    public static _initializeFrom(original: TransactionFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): TransactionFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        TransactionFormViewModel = new TransactionFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactionFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactionFormViewModel(original: TransactionFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Transaction !== undefined) this.Transaction = Transaction_TransactionViewModel._initializeFrom(original.Transaction, ignoreReadOnlyProperties, context);
        if(original.CodeText !== undefined) this.CodeText = original.CodeText;
        if(original.IsSupplier !== undefined) this.IsSupplier = original.IsSupplier;
        this.btnSelectCommercialAgreementSelectedItemKeys = original.btnSelectCommercialAgreementSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = TransactionFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            TransactionFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): TransactionFormViewModel {
        var reduced = TransactionFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        TransactionFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: TransactionFormViewModel) {
        if (reduced == null) return;


        DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Transaction:
    any;
public CodeText:
    any;
public IsSupplier:
    any;
public btnSelectCommercialAgreementSelectedItemKeys:
    any[];
}

export class Transaction_TransactionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
FundedAmount:
true,Id:
true,PaidByBuyer:
true,PaymentStatus:
true,RestPaymentAmount:
true,ToBePaidAmount:
true,TransactionDateOccured:
true,TransactionValue:
true,CommercialAgreement:
true,Orders:
true,CreditNotes:
true,DeliveryNotes:
true,Invoices:
true,ProofOfDeliveries:
true,TransactionStatus:
true,ImportedBuyer:
true,Supplier:
true,LetterOfCredits:
true,BillOfLandings:
true,CustomsClearingDocumentations:
true,PartialProofOfDeliveries:
true,TransactionOverview:
                true
            }
        } else {
            this._members["FundedAmount"] = true;
            this._members["Id"] = true;
            this._members["PaidByBuyer"] = true;
            this._members["PaymentStatus"] = true;
            this._members["RestPaymentAmount"] = true;
            this._members["ToBePaidAmount"] = true;
            this._members["TransactionDateOccured"] = true;
            this._members["TransactionValue"] = true;
            this._members["CommercialAgreement"] = true;
            this._members["Orders"] = true;
            this._members["CreditNotes"] = true;
            this._members["DeliveryNotes"] = true;
            this._members["Invoices"] = true;
            this._members["ProofOfDeliveries"] = true;
            this._members["TransactionStatus"] = true;
            this._members["ImportedBuyer"] = true;
            this._members["Supplier"] = true;
            this._members["LetterOfCredits"] = true;
            this._members["BillOfLandings"] = true;
            this._members["CustomsClearingDocumentations"] = true;
            this._members["PartialProofOfDeliveries"] = true;
            this._members["TransactionOverview"] = true;
        }

        this.Orders = new Array<any>();
        this.CreditNotes = new Array<any>();
        this.DeliveryNotes = new Array<any>();
        this.Invoices = new Array<any>();
        this.ProofOfDeliveries = new Array<any>();
        this.LetterOfCredits = new Array<any>();
        this.BillOfLandings = new Array<any>();
        this.CustomsClearingDocumentations = new Array<any>();
        this.PartialProofOfDeliveries = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.TransactionDateOccured != null) instance.TransactionDateOccured = new Date(instance.TransactionDateOccured);
        if(instance.CommercialAgreement != null)
            instance.CommercialAgreement = Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel._lightCast(instance.CommercialAgreement);

        if(instance.Orders != null) {
            for(let i = 0; i < instance.Orders.length; i++) {
                instance.Orders[i] = Transaction_Transaction_Orders_OrderViewModel._lightCast(instance.Orders[i]);

            }
        }

        if(instance.CreditNotes != null) {
            for(let i = 0; i < instance.CreditNotes.length; i++) {
                instance.CreditNotes[i] = Transaction_Transaction_CreditNotes_CreditNoteViewModel._lightCast(instance.CreditNotes[i]);

            }
        }

        if(instance.DeliveryNotes != null) {
            for(let i = 0; i < instance.DeliveryNotes.length; i++) {
                instance.DeliveryNotes[i] = Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel._lightCast(instance.DeliveryNotes[i]);

            }
        }

        if(instance.Invoices != null) {
            for(let i = 0; i < instance.Invoices.length; i++) {
                instance.Invoices[i] = Transaction_Transaction_Invoices_InvoiceViewModel._lightCast(instance.Invoices[i]);

            }
        }

        if(instance.ProofOfDeliveries != null) {
            for(let i = 0; i < instance.ProofOfDeliveries.length; i++) {
                instance.ProofOfDeliveries[i] = Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel._lightCast(instance.ProofOfDeliveries[i]);

            }
        }
        if(instance.TransactionStatus != null)
            instance.TransactionStatus = Transaction_Transaction_TransactionStatus_TransactionStatusViewModel._lightCast(instance.TransactionStatus);
        if(instance.ImportedBuyer != null)
            instance.ImportedBuyer = Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel._lightCast(instance.ImportedBuyer);
        if(instance.Supplier != null)
            instance.Supplier = Transaction_Transaction_Supplier_SupplierViewModel._lightCast(instance.Supplier);

        if(instance.LetterOfCredits != null) {
            for(let i = 0; i < instance.LetterOfCredits.length; i++) {
                instance.LetterOfCredits[i] = Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel._lightCast(instance.LetterOfCredits[i]);

            }
        }

        if(instance.BillOfLandings != null) {
            for(let i = 0; i < instance.BillOfLandings.length; i++) {
                instance.BillOfLandings[i] = Transaction_Transaction_BillOfLandings_BillOfLandingViewModel._lightCast(instance.BillOfLandings[i]);

            }
        }

        if(instance.CustomsClearingDocumentations != null) {
            for(let i = 0; i < instance.CustomsClearingDocumentations.length; i++) {
                instance.CustomsClearingDocumentations[i] = Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel._lightCast(instance.CustomsClearingDocumentations[i]);

            }
        }

        if(instance.PartialProofOfDeliveries != null) {
            for(let i = 0; i < instance.PartialProofOfDeliveries.length; i++) {
                instance.PartialProofOfDeliveries[i] = Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel._lightCast(instance.PartialProofOfDeliveries[i]);

            }
        }
        if(instance.TransactionOverview != null)
            instance.TransactionOverview = Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel._lightCast(instance.TransactionOverview);
        return instance;
    }

    public static _initializeFrom(original: Transaction_TransactionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_TransactionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_TransactionViewModel = new Transaction_TransactionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_TransactionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_TransactionViewModel(original: Transaction_TransactionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.FundedAmount !== undefined) this.FundedAmount = original.FundedAmount;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PaidByBuyer !== undefined) this.PaidByBuyer = original.PaidByBuyer;
        if(original.PaymentStatus !== undefined) this.PaymentStatus = original.PaymentStatus;
        if(original.RestPaymentAmount !== undefined) this.RestPaymentAmount = original.RestPaymentAmount;
        if(original.ToBePaidAmount !== undefined) this.ToBePaidAmount = original.ToBePaidAmount;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.TransactionDateOccured)) this.TransactionDateOccured = new Date(original.TransactionDateOccured);
        if(original.TransactionValue !== undefined) this.TransactionValue = original.TransactionValue;

        if(original.CommercialAgreement !== undefined) this.CommercialAgreement = Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(original.CommercialAgreement, ignoreReadOnlyProperties, context);

        if(original.Orders != null) {
            for(let i = 0; i < original.Orders.length; i++) {
                this.Orders.push(Transaction_Transaction_Orders_OrderViewModel._initializeFrom(original.Orders[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.CreditNotes != null) {
            for(let i = 0; i < original.CreditNotes.length; i++) {
                this.CreditNotes.push(Transaction_Transaction_CreditNotes_CreditNoteViewModel._initializeFrom(original.CreditNotes[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.DeliveryNotes != null) {
            for(let i = 0; i < original.DeliveryNotes.length; i++) {
                this.DeliveryNotes.push(Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel._initializeFrom(original.DeliveryNotes[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.Invoices != null) {
            for(let i = 0; i < original.Invoices.length; i++) {
                this.Invoices.push(Transaction_Transaction_Invoices_InvoiceViewModel._initializeFrom(original.Invoices[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.ProofOfDeliveries != null) {
            for(let i = 0; i < original.ProofOfDeliveries.length; i++) {
                this.ProofOfDeliveries.push(Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel._initializeFrom(original.ProofOfDeliveries[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.TransactionStatus !== undefined) this.TransactionStatus = Transaction_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(original.TransactionStatus, ignoreReadOnlyProperties, context);

        if(original.ImportedBuyer !== undefined) this.ImportedBuyer = Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(original.ImportedBuyer, ignoreReadOnlyProperties, context);

        if(original.Supplier !== undefined) this.Supplier = Transaction_Transaction_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.LetterOfCredits != null) {
            for(let i = 0; i < original.LetterOfCredits.length; i++) {
                this.LetterOfCredits.push(Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel._initializeFrom(original.LetterOfCredits[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.BillOfLandings != null) {
            for(let i = 0; i < original.BillOfLandings.length; i++) {
                this.BillOfLandings.push(Transaction_Transaction_BillOfLandings_BillOfLandingViewModel._initializeFrom(original.BillOfLandings[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.CustomsClearingDocumentations != null) {
            for(let i = 0; i < original.CustomsClearingDocumentations.length; i++) {
                this.CustomsClearingDocumentations.push(Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel._initializeFrom(original.CustomsClearingDocumentations[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.PartialProofOfDeliveries != null) {
            for(let i = 0; i < original.PartialProofOfDeliveries.length; i++) {
                this.PartialProofOfDeliveries.push(Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel._initializeFrom(original.PartialProofOfDeliveries[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.TransactionOverview !== undefined) this.TransactionOverview = Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel._initializeFrom(original.TransactionOverview, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_TransactionViewModel {
        var reduced = Transaction_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public FundedAmount:
    any;
public Id:
    any;
public PaidByBuyer:
    any;
public PaymentStatus:
    any;
public RestPaymentAmount:
    any;
public ToBePaidAmount:
    any;
public TransactionDateOccured:
    any;
public TransactionValue:
    any;
public CommercialAgreement:
    any;
public Orders:
    Array<any>;
public CreditNotes:
    Array<any>;
public DeliveryNotes:
    Array<any>;
public Invoices:
    Array<any>;
public ProofOfDeliveries:
    Array<any>;
public TransactionStatus:
    any;
public ImportedBuyer:
    any;
public Supplier:
    any;
public LetterOfCredits:
    Array<any>;
public BillOfLandings:
    Array<any>;
public CustomsClearingDocumentations:
    Array<any>;
public PartialProofOfDeliveries:
    Array<any>;
public TransactionOverview:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,PaymentTerms:
true,ImportedBuyer:
true,Agreement:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["PaymentTerms"] = true;
            this._members["ImportedBuyer"] = true;
            this._members["Agreement"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.ImportedBuyer != null)
            instance.ImportedBuyer = Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel._lightCast(instance.ImportedBuyer);
        if(instance.Agreement != null)
            instance.Agreement = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel._lightCast(instance.Agreement);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel = new Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreementViewModel(original: Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PaymentTerms !== undefined) this.PaymentTerms = original.PaymentTerms;

        if(original.ImportedBuyer !== undefined) this.ImportedBuyer = Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(original.ImportedBuyer, ignoreReadOnlyProperties, context);

        if(original.Agreement !== undefined) this.Agreement = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel._initializeFrom(original.Agreement, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public PaymentTerms:
    any;
public ImportedBuyer:
    any;
public Agreement:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Code:
true,Company:
true,Id:
                true
            }
        } else {
            this._members["Code"] = true;
            this._members["Company"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel = new Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Code !== undefined) this.Code = original.Code;
        if(original.Company !== undefined) this.Company = original.Company;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel {
        var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Code:
    any;
public Company:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
FundedRate:
true,Id:
true,InterestRate:
true,Investor:
                true
            }
        } else {
            this._members["FundedRate"] = true;
            this._members["Id"] = true;
            this._members["InterestRate"] = true;
            this._members["Investor"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Investor != null)
            instance.Investor = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel._lightCast(instance.Investor);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel = new Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.FundedRate !== undefined) this.FundedRate = original.FundedRate;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InterestRate !== undefined) this.InterestRate = original.InterestRate;

        if(original.Investor !== undefined) this.Investor = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel._initializeFrom(original.Investor, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel {
        var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public FundedRate:
    any;
public Id:
    any;
public InterestRate:
    any;
public Investor:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Name:
true,UserName:
                true
            }
        } else {
            this._members["Name"] = true;
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel = new Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel(original: Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Name !== undefined) this.Name = original.Name;
        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel {
        var reduced = Transaction_Transaction_CommercialAgreement_CommercialAgreement_Agreement_Agreement_Investor_InvestorViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Name:
    any;
public UserName:
    any;
}

export class Transaction_Transaction_Orders_OrderViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
DateOfOrder:
true,DeliveryTo:
true,From:
true,Id:
true,OrderNumber:
                true
            }
        } else {
            this._members["DateOfOrder"] = true;
            this._members["DeliveryTo"] = true;
            this._members["From"] = true;
            this._members["Id"] = true;
            this._members["OrderNumber"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateOfOrder != null) instance.DateOfOrder = new Date(instance.DateOfOrder);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_Orders_OrderViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_Orders_OrderViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_Orders_OrderViewModel = new Transaction_Transaction_Orders_OrderViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_Orders_OrderViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_Orders_OrderViewModel(original: Transaction_Transaction_Orders_OrderViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateOfOrder)) this.DateOfOrder = new Date(original.DateOfOrder);
        if(original.DeliveryTo !== undefined) this.DeliveryTo = original.DeliveryTo;
        if(original.From !== undefined) this.From = original.From;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.OrderNumber !== undefined) this.OrderNumber = original.OrderNumber;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_Orders_OrderViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_Orders_OrderViewModel {
        var reduced = Transaction_Transaction_Orders_OrderViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public DateOfOrder:
    any;
public DeliveryTo:
    any;
public From:
    any;
public Id:
    any;
public OrderNumber:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CreditNotes_CreditNoteViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Amount:
true,CreditNoteNumber:
true,DateIssued:
true,Description:
true,Id:
true,TotalPrice:
                true
            }
        } else {
            this._members["Amount"] = true;
            this._members["CreditNoteNumber"] = true;
            this._members["DateIssued"] = true;
            this._members["Description"] = true;
            this._members["Id"] = true;
            this._members["TotalPrice"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CreditNotes_CreditNoteViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CreditNotes_CreditNoteViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CreditNotes_CreditNoteViewModel = new Transaction_Transaction_CreditNotes_CreditNoteViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CreditNotes_CreditNoteViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CreditNotes_CreditNoteViewModel(original: Transaction_Transaction_CreditNotes_CreditNoteViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Amount !== undefined) this.Amount = original.Amount;
        if(original.CreditNoteNumber !== undefined) this.CreditNoteNumber = original.CreditNoteNumber;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.Description !== undefined) this.Description = original.Description;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TotalPrice !== undefined) this.TotalPrice = original.TotalPrice;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CreditNotes_CreditNoteViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CreditNotes_CreditNoteViewModel {
        var reduced = Transaction_Transaction_CreditNotes_CreditNoteViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Amount:
    any;
public CreditNoteNumber:
    any;
public DateIssued:
    any;
public Description:
    any;
public Id:
    any;
public TotalPrice:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Amount:
true,DateIssued:
true,DeliveryNoteNumber:
true,Id:
true,TotalPrice:
                true
            }
        } else {
            this._members["Amount"] = true;
            this._members["DateIssued"] = true;
            this._members["DeliveryNoteNumber"] = true;
            this._members["Id"] = true;
            this._members["TotalPrice"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel = new Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_DeliveryNotes_DeliveryNoteViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_DeliveryNotes_DeliveryNoteViewModel(original: Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Amount !== undefined) this.Amount = original.Amount;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.DeliveryNoteNumber !== undefined) this.DeliveryNoteNumber = original.DeliveryNoteNumber;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TotalPrice !== undefined) this.TotalPrice = original.TotalPrice;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel {
        var reduced = Transaction_Transaction_DeliveryNotes_DeliveryNoteViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Amount:
    any;
public DateIssued:
    any;
public DeliveryNoteNumber:
    any;
public Id:
    any;
public TotalPrice:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_Invoices_InvoiceViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Amount:
true,DateIssued:
true,Id:
true,InvoiceNumber:
true,TotalPrice:
                true
            }
        } else {
            this._members["Amount"] = true;
            this._members["DateIssued"] = true;
            this._members["Id"] = true;
            this._members["InvoiceNumber"] = true;
            this._members["TotalPrice"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_Invoices_InvoiceViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_Invoices_InvoiceViewModel = new Transaction_Transaction_Invoices_InvoiceViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_Invoices_InvoiceViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_Invoices_InvoiceViewModel(original: Transaction_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Amount !== undefined) this.Amount = original.Amount;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InvoiceNumber !== undefined) this.InvoiceNumber = original.InvoiceNumber;
        if(original.TotalPrice !== undefined) this.TotalPrice = original.TotalPrice;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_Invoices_InvoiceViewModel {
        var reduced = Transaction_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Amount:
    any;
public DateIssued:
    any;
public Id:
    any;
public InvoiceNumber:
    any;
public TotalPrice:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
DateIssued:
true,DeliveryStatus:
true,Id:
true,PODNumber:
true,QualityStatus:
true,QuantityStatus:
                true
            }
        } else {
            this._members["DateIssued"] = true;
            this._members["DeliveryStatus"] = true;
            this._members["Id"] = true;
            this._members["PODNumber"] = true;
            this._members["QualityStatus"] = true;
            this._members["QuantityStatus"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel = new Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel(original: Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.DeliveryStatus !== undefined) this.DeliveryStatus = original.DeliveryStatus;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PODNumber !== undefined) this.PODNumber = original.PODNumber;
        if(original.QualityStatus !== undefined) this.QualityStatus = original.QualityStatus;
        if(original.QuantityStatus !== undefined) this.QuantityStatus = original.QuantityStatus;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel {
        var reduced = Transaction_Transaction_ProofOfDeliveries_ProofOfDeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public DateIssued:
    any;
public DeliveryStatus:
    any;
public Id:
    any;
public PODNumber:
    any;
public QualityStatus:
    any;
public QuantityStatus:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_TransactionStatus_TransactionStatusViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Cancelled:
true,Delivered:
true,Id:
true,InitialOrderDate:
true,InTransit:
true,Invoiced:
true,InvoicedDateOccured:
true,Ordered:
true,Picked:
true,Shipped:
true,ShippedDateOccured:
                true
            }
        } else {
            this._members["Cancelled"] = true;
            this._members["Delivered"] = true;
            this._members["Id"] = true;
            this._members["InitialOrderDate"] = true;
            this._members["InTransit"] = true;
            this._members["Invoiced"] = true;
            this._members["InvoicedDateOccured"] = true;
            this._members["Ordered"] = true;
            this._members["Picked"] = true;
            this._members["Shipped"] = true;
            this._members["ShippedDateOccured"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.InitialOrderDate != null) instance.InitialOrderDate = new Date(instance.InitialOrderDate);
        if(instance.InvoicedDateOccured != null) instance.InvoicedDateOccured = new Date(instance.InvoicedDateOccured);
        if(instance.ShippedDateOccured != null) instance.ShippedDateOccured = new Date(instance.ShippedDateOccured);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_TransactionStatus_TransactionStatusViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_TransactionStatus_TransactionStatusViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_TransactionStatus_TransactionStatusViewModel = new Transaction_Transaction_TransactionStatus_TransactionStatusViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_TransactionStatus_TransactionStatusViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_TransactionStatus_TransactionStatusViewModel(original: Transaction_Transaction_TransactionStatus_TransactionStatusViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Cancelled !== undefined) this.Cancelled = original.Cancelled;
        if(original.Delivered !== undefined) this.Delivered = original.Delivered;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.InitialOrderDate)) this.InitialOrderDate = new Date(original.InitialOrderDate);
        if(original.InTransit !== undefined) this.InTransit = original.InTransit;
        if(original.Invoiced !== undefined) this.Invoiced = original.Invoiced;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.InvoicedDateOccured)) this.InvoicedDateOccured = new Date(original.InvoicedDateOccured);
        if(original.Ordered !== undefined) this.Ordered = original.Ordered;
        if(original.Picked !== undefined) this.Picked = original.Picked;
        if(original.Shipped !== undefined) this.Shipped = original.Shipped;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.ShippedDateOccured)) this.ShippedDateOccured = new Date(original.ShippedDateOccured);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_TransactionStatus_TransactionStatusViewModel {
        var reduced = Transaction_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Cancelled:
    any;
public Delivered:
    any;
public Id:
    any;
public InitialOrderDate:
    any;
public InTransit:
    any;
public Invoiced:
    any;
public InvoicedDateOccured:
    any;
public Ordered:
    any;
public Picked:
    any;
public Shipped:
    any;
public ShippedDateOccured:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel = new Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_ImportedBuyer_ImportedBuyerViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_ImportedBuyer_ImportedBuyerViewModel(original: Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        var reduced = Transaction_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
UserName:
                true
            }
        } else {
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_Supplier_SupplierViewModel = new Transaction_Transaction_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_Supplier_SupplierViewModel(original: Transaction_Transaction_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_Supplier_SupplierViewModel {
        var reduced = Transaction_Transaction_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public UserName:
    any;
}

export class Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
DateOfExpiry:
true,DateOfValidity:
true,Detail:
true,Id:
true,IssuingBank:
true,ValueOfLoC:
                true
            }
        } else {
            this._members["DateOfExpiry"] = true;
            this._members["DateOfValidity"] = true;
            this._members["Detail"] = true;
            this._members["Id"] = true;
            this._members["IssuingBank"] = true;
            this._members["ValueOfLoC"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateOfExpiry != null) instance.DateOfExpiry = new Date(instance.DateOfExpiry);
        if(instance.DateOfValidity != null) instance.DateOfValidity = new Date(instance.DateOfValidity);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel = new Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_LetterOfCredits_LetterOfCreditViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_LetterOfCredits_LetterOfCreditViewModel(original: Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateOfExpiry)) this.DateOfExpiry = new Date(original.DateOfExpiry);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateOfValidity)) this.DateOfValidity = new Date(original.DateOfValidity);
        if(original.Detail !== undefined) this.Detail = original.Detail;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.IssuingBank !== undefined) this.IssuingBank = original.IssuingBank;
        if(original.ValueOfLoC !== undefined) this.ValueOfLoC = original.ValueOfLoC;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel {
        var reduced = Transaction_Transaction_LetterOfCredits_LetterOfCreditViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public DateOfExpiry:
    any;
public DateOfValidity:
    any;
public Detail:
    any;
public Id:
    any;
public IssuingBank:
    any;
public ValueOfLoC:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_BillOfLandings_BillOfLandingViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
DeliveryDate:
true,DeliveryPlace:
true,Id:
true,LandingDate:
true,LandingPlace:
                true
            }
        } else {
            this._members["DeliveryDate"] = true;
            this._members["DeliveryPlace"] = true;
            this._members["Id"] = true;
            this._members["LandingDate"] = true;
            this._members["LandingPlace"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DeliveryDate != null) instance.DeliveryDate = new Date(instance.DeliveryDate);
        if(instance.LandingDate != null) instance.LandingDate = new Date(instance.LandingDate);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_BillOfLandings_BillOfLandingViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_BillOfLandings_BillOfLandingViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_BillOfLandings_BillOfLandingViewModel = new Transaction_Transaction_BillOfLandings_BillOfLandingViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_BillOfLandings_BillOfLandingViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_BillOfLandings_BillOfLandingViewModel(original: Transaction_Transaction_BillOfLandings_BillOfLandingViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DeliveryDate)) this.DeliveryDate = new Date(original.DeliveryDate);
        if(original.DeliveryPlace !== undefined) this.DeliveryPlace = original.DeliveryPlace;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.LandingDate)) this.LandingDate = new Date(original.LandingDate);
        if(original.LandingPlace !== undefined) this.LandingPlace = original.LandingPlace;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_BillOfLandings_BillOfLandingViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_BillOfLandings_BillOfLandingViewModel {
        var reduced = Transaction_Transaction_BillOfLandings_BillOfLandingViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public DeliveryDate:
    any;
public DeliveryPlace:
    any;
public Id:
    any;
public LandingDate:
    any;
public LandingPlace:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
BuyerName:
true,CustomsClearingDate:
true,ExportingCountry:
true,Id:
true,ImportingCountry:
                true
            }
        } else {
            this._members["BuyerName"] = true;
            this._members["CustomsClearingDate"] = true;
            this._members["ExportingCountry"] = true;
            this._members["Id"] = true;
            this._members["ImportingCountry"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CustomsClearingDate != null) instance.CustomsClearingDate = new Date(instance.CustomsClearingDate);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel = new Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel(original: Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.BuyerName !== undefined) this.BuyerName = original.BuyerName;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CustomsClearingDate)) this.CustomsClearingDate = new Date(original.CustomsClearingDate);
        if(original.ExportingCountry !== undefined) this.ExportingCountry = original.ExportingCountry;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.ImportingCountry !== undefined) this.ImportingCountry = original.ImportingCountry;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel {
        var reduced = Transaction_Transaction_CustomsClearingDocumentations_CustomsClearingDocumentationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public BuyerName:
    any;
public CustomsClearingDate:
    any;
public ExportingCountry:
    any;
public Id:
    any;
public ImportingCountry:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
DateIssued:
true,DeliveryStatus:
true,Id:
true,PODNumber:
true,QualityStatus:
true,QuantityStatus:
                true
            }
        } else {
            this._members["DateIssued"] = true;
            this._members["DeliveryStatus"] = true;
            this._members["Id"] = true;
            this._members["PODNumber"] = true;
            this._members["QualityStatus"] = true;
            this._members["QuantityStatus"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DateIssued != null) instance.DateIssued = new Date(instance.DateIssued);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel = new Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel(original: Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DateIssued)) this.DateIssued = new Date(original.DateIssued);
        if(original.DeliveryStatus !== undefined) this.DeliveryStatus = original.DeliveryStatus;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PODNumber !== undefined) this.PODNumber = original.PODNumber;
        if(original.QualityStatus !== undefined) this.QualityStatus = original.QualityStatus;
        if(original.QuantityStatus !== undefined) this.QuantityStatus = original.QuantityStatus;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel {
        var reduced = Transaction_Transaction_PartialProofOfDeliveries_PartialProofOfDeliveryViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public DateIssued:
    any;
public DeliveryStatus:
    any;
public Id:
    any;
public PODNumber:
    any;
public QualityStatus:
    any;
public QuantityStatus:
    any;
    public _versionTimestamp?: string;
}

export class Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CreditNoteNumber:
true,DeliveryDate:
true,FundedRate:
true,Id:
true,InterestRate:
true,InvoiceDate:
true,InvoiceId:
true,OrderDate:
true,OrderQuantity:
true,PayementDate:
true,PaymentId:
                true
            }
        } else {
            this._members["CreditNoteNumber"] = true;
            this._members["DeliveryDate"] = true;
            this._members["FundedRate"] = true;
            this._members["Id"] = true;
            this._members["InterestRate"] = true;
            this._members["InvoiceDate"] = true;
            this._members["InvoiceId"] = true;
            this._members["OrderDate"] = true;
            this._members["OrderQuantity"] = true;
            this._members["PayementDate"] = true;
            this._members["PaymentId"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.DeliveryDate != null) instance.DeliveryDate = new Date(instance.DeliveryDate);
        if(instance.InvoiceDate != null) instance.InvoiceDate = new Date(instance.InvoiceDate);
        if(instance.OrderDate != null) instance.OrderDate = new Date(instance.OrderDate);
        if(instance.PayementDate != null) instance.PayementDate = new Date(instance.PayementDate);
        return instance;
    }

    public static _initializeFrom(original: Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel = new Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransaction_Transaction_TransactionOverview_TransactionOverviewViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransaction_Transaction_TransactionOverview_TransactionOverviewViewModel(original: Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.CreditNoteNumber !== undefined) this.CreditNoteNumber = original.CreditNoteNumber;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.DeliveryDate)) this.DeliveryDate = new Date(original.DeliveryDate);
        if(original.FundedRate !== undefined) this.FundedRate = original.FundedRate;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InterestRate !== undefined) this.InterestRate = original.InterestRate;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.InvoiceDate)) this.InvoiceDate = new Date(original.InvoiceDate);
        if(original.InvoiceId !== undefined) this.InvoiceId = original.InvoiceId;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.OrderDate)) this.OrderDate = new Date(original.OrderDate);
        if(original.OrderQuantity !== undefined) this.OrderQuantity = original.OrderQuantity;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.PayementDate)) this.PayementDate = new Date(original.PayementDate);
        if(original.PaymentId !== undefined) this.PaymentId = original.PaymentId;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel {
        var reduced = Transaction_Transaction_TransactionOverview_TransactionOverviewViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CreditNoteNumber:
    any;
public DeliveryDate:
    any;
public FundedRate:
    any;
public Id:
    any;
public InterestRate:
    any;
public InvoiceDate:
    any;
public InvoiceId:
    any;
public OrderDate:
    any;
public OrderQuantity:
    any;
public PayementDate:
    any;
public PaymentId:
    any;
    public _versionTimestamp?: string;
}

}
