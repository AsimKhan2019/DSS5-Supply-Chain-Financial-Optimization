// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS5_SupplyChainFinancialsOptimisation.ViewModels.CCDForm {
export class CCDFormViewModel extends DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
CustomsClearingDocumentation:
                true
            }
        } else {
            this._members["CustomsClearingDocumentation"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CustomsClearingDocumentation != null)
            instance.CustomsClearingDocumentation = CustomsClearingDocumentation_CustomsClearingDocumentationViewModel._lightCast(instance.CustomsClearingDocumentation);
        return instance;
    }

    public static _initializeFrom(original: CCDFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): CCDFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        CCDFormViewModel = new CCDFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateCCDFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateCCDFormViewModel(original: CCDFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.CustomsClearingDocumentation !== undefined) this.CustomsClearingDocumentation = CustomsClearingDocumentation_CustomsClearingDocumentationViewModel._initializeFrom(original.CustomsClearingDocumentation, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = CCDFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            CCDFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): CCDFormViewModel {
        var reduced = CCDFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        CCDFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: CCDFormViewModel) {
        if (reduced == null) return;


        DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public CustomsClearingDocumentation:
    any;
}

export class CustomsClearingDocumentation_CustomsClearingDocumentationViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
BuyerName:
true,CustomsClearingDate:
true,ExportingCountry:
true,Id:
true,ImportingCountry:
true,Transaction:
                true
            }
        } else {
            this._members["BuyerName"] = true;
            this._members["CustomsClearingDate"] = true;
            this._members["ExportingCountry"] = true;
            this._members["Id"] = true;
            this._members["ImportingCountry"] = true;
            this._members["Transaction"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.CustomsClearingDate != null) instance.CustomsClearingDate = new Date(instance.CustomsClearingDate);
        if(instance.Transaction != null)
            instance.Transaction = CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel._lightCast(instance.Transaction);
        return instance;
    }

    public static _initializeFrom(original: CustomsClearingDocumentation_CustomsClearingDocumentationViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): CustomsClearingDocumentation_CustomsClearingDocumentationViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        CustomsClearingDocumentation_CustomsClearingDocumentationViewModel = new CustomsClearingDocumentation_CustomsClearingDocumentationViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateCustomsClearingDocumentation_CustomsClearingDocumentationViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateCustomsClearingDocumentation_CustomsClearingDocumentationViewModel(original: CustomsClearingDocumentation_CustomsClearingDocumentationViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.BuyerName !== undefined) this.BuyerName = original.BuyerName;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.CustomsClearingDate)) this.CustomsClearingDate = new Date(original.CustomsClearingDate);
        if(original.ExportingCountry !== undefined) this.ExportingCountry = original.ExportingCountry;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.ImportingCountry !== undefined) this.ImportingCountry = original.ImportingCountry;

        if(original.Transaction !== undefined) this.Transaction = CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel._initializeFrom(original.Transaction, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = CustomsClearingDocumentation_CustomsClearingDocumentationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): CustomsClearingDocumentation_CustomsClearingDocumentationViewModel {
        var reduced = CustomsClearingDocumentation_CustomsClearingDocumentationViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public BuyerName:
    any;
public CustomsClearingDate:
    any;
public ExportingCountry:
    any;
public Id:
    any;
public ImportingCountry:
    any;
public Transaction:
    any;
    public _versionTimestamp?: string;
}

export class CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
FundedAmount:
true,Id:
true,TransactionDateOccured:
true,TransactionValue:
                true
            }
        } else {
            this._members["FundedAmount"] = true;
            this._members["Id"] = true;
            this._members["TransactionDateOccured"] = true;
            this._members["TransactionValue"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.TransactionDateOccured != null) instance.TransactionDateOccured = new Date(instance.TransactionDateOccured);
        return instance;
    }

    public static _initializeFrom(original: CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel = new CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateCustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateCustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel(original: CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.FundedAmount !== undefined) this.FundedAmount = original.FundedAmount;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.TransactionDateOccured)) this.TransactionDateOccured = new Date(original.TransactionDateOccured);
        if(original.TransactionValue !== undefined) this.TransactionValue = original.TransactionValue;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel {
        var reduced = CustomsClearingDocumentation_CustomsClearingDocumentation_Transaction_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public FundedAmount:
    any;
public Id:
    any;
public TransactionDateOccured:
    any;
public TransactionValue:
    any;
    public _versionTimestamp?: string;
}

}
