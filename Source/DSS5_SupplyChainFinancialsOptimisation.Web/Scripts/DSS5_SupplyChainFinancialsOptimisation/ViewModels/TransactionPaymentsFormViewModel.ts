// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS5_SupplyChainFinancialsOptimisation.ViewModels.TransactionPaymentsForm {
export class TransactionPaymentsFormViewModel extends DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Agreement:
true,Transactions:
true,PaymentAmount:
true,PaymentDate:
true,FundedPaidTransactions:
true,Searched:
                true
            }
        } else {
            this._members["Agreement"] = true;
            this._members["Transactions"] = true;
            this._members["PaymentAmount"] = true;
            this._members["PaymentDate"] = true;
            this._members["FundedPaidTransactions"] = true;
            this._members["Searched"] = true;
        }

        this.Transactions = new Array<any>();
        this.FundedPaidTransactions = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.Agreement != null)
            instance.Agreement = Agreement_AgreementViewModel._lightCast(instance.Agreement);

        if(instance.Transactions != null) {
            for(let i = 0; i < instance.Transactions.length; i++) {
                instance.Transactions[i] = Transactions_TransactionViewModel._lightCast(instance.Transactions[i]);

            }
        }
        if(instance.PaymentDate != null) instance.PaymentDate = new Date(instance.PaymentDate);

        if(instance.FundedPaidTransactions != null) {
            for(let i = 0; i < instance.FundedPaidTransactions.length; i++) {
                instance.FundedPaidTransactions[i] = FundedPaidTransactions_TransactionViewModel._lightCast(instance.FundedPaidTransactions[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: TransactionPaymentsFormViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): TransactionPaymentsFormViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        TransactionPaymentsFormViewModel = new TransactionPaymentsFormViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactionPaymentsFormViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactionPaymentsFormViewModel(original: TransactionPaymentsFormViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;

        this._hydrateMasterPageViewModel(original, ignoreReadOnlyProperties, context);

        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;


        if(original.Agreement !== undefined) this.Agreement = Agreement_AgreementViewModel._initializeFrom(original.Agreement, ignoreReadOnlyProperties, context);

        if(original.Transactions != null) {
            for(let i = 0; i < original.Transactions.length; i++) {
                this.Transactions.push(Transactions_TransactionViewModel._initializeFrom(original.Transactions[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.PaymentAmount !== undefined) this.PaymentAmount = original.PaymentAmount;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.PaymentDate)) this.PaymentDate = new Date(original.PaymentDate);

        if(original.FundedPaidTransactions != null) {
            for(let i = 0; i < original.FundedPaidTransactions.length; i++) {
                this.FundedPaidTransactions.push(FundedPaidTransactions_TransactionViewModel._initializeFrom(original.FundedPaidTransactions[i], ignoreReadOnlyProperties, context));
            }
        }
        if(original.Searched !== undefined) this.Searched = original.Searched;
        this.PickListSelectedItemKeys = original.PickListSelectedItemKeys;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = TransactionPaymentsFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
            TransactionPaymentsFormViewModel._deleteDropDownInitialValues(reduced);
            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): TransactionPaymentsFormViewModel {
        var reduced = TransactionPaymentsFormViewModel._initializeFrom(this, ignoreReadOnlyProperties);
        TransactionPaymentsFormViewModel._deleteDropDownInitialValues(reduced);
        return reduced;
    }

    public static _deleteDropDownInitialValues(reduced: TransactionPaymentsFormViewModel) {
        if (reduced == null) return;


        DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel._deleteDropDownInitialValues(reduced);
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Agreement:
    any;
public Transactions:
    Array<any>;
public PaymentAmount:
    any;
public PaymentDate:
    any;
public FundedPaidTransactions:
    Array<any>;
public Searched:
    any;
public PickListSelectedItemKeys:
    any[];
}

export class Agreement_AgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
EndDate:
true,FundedRate:
true,Id:
true,InterestRate:
true,StartDate:
true,Supplier:
true,CommercialAgreements:
                true
            }
        } else {
            this._members["EndDate"] = true;
            this._members["FundedRate"] = true;
            this._members["Id"] = true;
            this._members["InterestRate"] = true;
            this._members["StartDate"] = true;
            this._members["Supplier"] = true;
            this._members["CommercialAgreements"] = true;
        }

        this.CommercialAgreements = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.EndDate != null) instance.EndDate = new Date(instance.EndDate);
        if(instance.StartDate != null) instance.StartDate = new Date(instance.StartDate);
        if(instance.Supplier != null)
            instance.Supplier = Agreement_Agreement_Supplier_SupplierViewModel._lightCast(instance.Supplier);

        if(instance.CommercialAgreements != null) {
            for(let i = 0; i < instance.CommercialAgreements.length; i++) {
                instance.CommercialAgreements[i] = Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel._lightCast(instance.CommercialAgreements[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_AgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_AgreementViewModel = new Agreement_AgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_AgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_AgreementViewModel(original: Agreement_AgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.EndDate)) this.EndDate = new Date(original.EndDate);
        if(original.FundedRate !== undefined) this.FundedRate = original.FundedRate;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.InterestRate !== undefined) this.InterestRate = original.InterestRate;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.StartDate)) this.StartDate = new Date(original.StartDate);

        if(original.Supplier !== undefined) this.Supplier = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(original.Supplier, ignoreReadOnlyProperties, context);

        if(original.CommercialAgreements != null) {
            for(let i = 0; i < original.CommercialAgreements.length; i++) {
                this.CommercialAgreements.push(Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel._initializeFrom(original.CommercialAgreements[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_AgreementViewModel {
        var reduced = Agreement_AgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public EndDate:
    any;
public FundedRate:
    any;
public Id:
    any;
public InterestRate:
    any;
public StartDate:
    any;
public Supplier:
    any;
public CommercialAgreements:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Agreement_Agreement_Supplier_SupplierViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Company:
true,UserName:
                true
            }
        } else {
            this._members["Company"] = true;
            this._members["UserName"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_Supplier_SupplierViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_Supplier_SupplierViewModel = new Agreement_Agreement_Supplier_SupplierViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_Supplier_SupplierViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_Supplier_SupplierViewModel(original: Agreement_Agreement_Supplier_SupplierViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if(original.Company !== undefined) this.Company = original.Company;
        if(original.UserName !== undefined) this.UserName = original.UserName;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_Supplier_SupplierViewModel {
        var reduced = Agreement_Agreement_Supplier_SupplierViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Company:
    any;
public UserName:
    any;
}

export class Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,Transactions:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["Transactions"] = true;
        }

        this.Transactions = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;


        if(instance.Transactions != null) {
            for(let i = 0; i < instance.Transactions.length; i++) {
                instance.Transactions[i] = Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel._lightCast(instance.Transactions[i]);

            }
        }
        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel = new Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_CommercialAgreements_CommercialAgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_CommercialAgreements_CommercialAgreementViewModel(original: Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        if(original.Transactions != null) {
            for(let i = 0; i < original.Transactions.length; i++) {
                this.Transactions.push(Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel._initializeFrom(original.Transactions[i], ignoreReadOnlyProperties, context));
            }
        }

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel {
        var reduced = Agreement_Agreement_CommercialAgreements_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public Transactions:
    Array<any>;
    public _versionTimestamp?: string;
}

export class Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,PaymentStatus:
true,TransactionValue:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["PaymentStatus"] = true;
            this._members["TransactionValue"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel = new Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateAgreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateAgreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel(original: Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PaymentStatus !== undefined) this.PaymentStatus = original.PaymentStatus;
        if(original.TransactionValue !== undefined) this.TransactionValue = original.TransactionValue;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel {
        var reduced = Agreement_Agreement_CommercialAgreements_CommercialAgreement_Transactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public PaymentStatus:
    any;
public TransactionValue:
    any;
    public _versionTimestamp?: string;
}

export class Transactions_TransactionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
FundedAmount:
true,Id:
true,InvoicedDate:
true,PaymentDate:
true,PaymentStatus:
true,RestPaymentAmount:
true,ToBePaidAmount:
true,TransactionValue:
true,CommercialAgreement:
true,Invoices:
true,TransactionStatus:
true,ImportedBuyer:
                true
            }
        } else {
            this._members["FundedAmount"] = true;
            this._members["Id"] = true;
            this._members["InvoicedDate"] = true;
            this._members["PaymentDate"] = true;
            this._members["PaymentStatus"] = true;
            this._members["RestPaymentAmount"] = true;
            this._members["ToBePaidAmount"] = true;
            this._members["TransactionValue"] = true;
            this._members["CommercialAgreement"] = true;
            this._members["Invoices"] = true;
            this._members["TransactionStatus"] = true;
            this._members["ImportedBuyer"] = true;
        }

        this.Invoices = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.InvoicedDate != null) instance.InvoicedDate = new Date(instance.InvoicedDate);
        if(instance.PaymentDate != null) instance.PaymentDate = new Date(instance.PaymentDate);
        if(instance.CommercialAgreement != null)
            instance.CommercialAgreement = Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._lightCast(instance.CommercialAgreement);

        if(instance.Invoices != null) {
            for(let i = 0; i < instance.Invoices.length; i++) {
                instance.Invoices[i] = Transactions_Transaction_Invoices_InvoiceViewModel._lightCast(instance.Invoices[i]);

            }
        }
        if(instance.TransactionStatus != null)
            instance.TransactionStatus = Transactions_Transaction_TransactionStatus_TransactionStatusViewModel._lightCast(instance.TransactionStatus);
        if(instance.ImportedBuyer != null)
            instance.ImportedBuyer = Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._lightCast(instance.ImportedBuyer);
        return instance;
    }

    public static _initializeFrom(original: Transactions_TransactionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transactions_TransactionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transactions_TransactionViewModel = new Transactions_TransactionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactions_TransactionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactions_TransactionViewModel(original: Transactions_TransactionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.FundedAmount !== undefined) this.FundedAmount = original.FundedAmount;
        if(original.Id !== undefined) this.Id = original.Id;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.InvoicedDate)) this.InvoicedDate = new Date(original.InvoicedDate);
        if(!CLMS.Framework.String.IsNullOrEmpty(original.PaymentDate)) this.PaymentDate = new Date(original.PaymentDate);
        if(original.PaymentStatus !== undefined) this.PaymentStatus = original.PaymentStatus;
        if(original.RestPaymentAmount !== undefined) this.RestPaymentAmount = original.RestPaymentAmount;
        if(original.ToBePaidAmount !== undefined) this.ToBePaidAmount = original.ToBePaidAmount;
        if(original.TransactionValue !== undefined) this.TransactionValue = original.TransactionValue;

        if(original.CommercialAgreement !== undefined) this.CommercialAgreement = Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(original.CommercialAgreement, ignoreReadOnlyProperties, context);

        if(original.Invoices != null) {
            for(let i = 0; i < original.Invoices.length; i++) {
                this.Invoices.push(Transactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(original.Invoices[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.TransactionStatus !== undefined) this.TransactionStatus = Transactions_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(original.TransactionStatus, ignoreReadOnlyProperties, context);

        if(original.ImportedBuyer !== undefined) this.ImportedBuyer = Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(original.ImportedBuyer, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transactions_TransactionViewModel {
        var reduced = Transactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public FundedAmount:
    any;
public Id:
    any;
public InvoicedDate:
    any;
public PaymentDate:
    any;
public PaymentStatus:
    any;
public RestPaymentAmount:
    any;
public ToBePaidAmount:
    any;
public TransactionValue:
    any;
public CommercialAgreement:
    any;
public Invoices:
    Array<any>;
public TransactionStatus:
    any;
public ImportedBuyer:
    any;
    public _versionTimestamp?: string;
}

export class Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel = new Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel(original: Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        var reduced = Transactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class Transactions_Transaction_Invoices_InvoiceViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,TotalPrice:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["TotalPrice"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transactions_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transactions_Transaction_Invoices_InvoiceViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transactions_Transaction_Invoices_InvoiceViewModel = new Transactions_Transaction_Invoices_InvoiceViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactions_Transaction_Invoices_InvoiceViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactions_Transaction_Invoices_InvoiceViewModel(original: Transactions_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TotalPrice !== undefined) this.TotalPrice = original.TotalPrice;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transactions_Transaction_Invoices_InvoiceViewModel {
        var reduced = Transactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public TotalPrice:
    any;
    public _versionTimestamp?: string;
}

export class Transactions_Transaction_TransactionStatus_TransactionStatusViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,PaymentStatus:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["PaymentStatus"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transactions_Transaction_TransactionStatus_TransactionStatusViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transactions_Transaction_TransactionStatus_TransactionStatusViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transactions_Transaction_TransactionStatus_TransactionStatusViewModel = new Transactions_Transaction_TransactionStatus_TransactionStatusViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactions_Transaction_TransactionStatus_TransactionStatusViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactions_Transaction_TransactionStatus_TransactionStatusViewModel(original: Transactions_Transaction_TransactionStatus_TransactionStatusViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PaymentStatus !== undefined) this.PaymentStatus = original.PaymentStatus;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transactions_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transactions_Transaction_TransactionStatus_TransactionStatusViewModel {
        var reduced = Transactions_Transaction_TransactionStatus_TransactionStatusViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public PaymentStatus:
    any;
    public _versionTimestamp?: string;
}

export class Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Company:
true,Id:
                true
            }
        } else {
            this._members["Company"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel = new Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel(original: Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Company !== undefined) this.Company = original.Company;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        var reduced = Transactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Company:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

export class FundedPaidTransactions_TransactionViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
FundedAmount:
true,Id:
true,PaidByBuyer:
true,PaymentDate:
true,PaymentStatus:
true,RestPaymentAmount:
true,TransactionValue:
true,CommercialAgreement:
true,Invoices:
true,ImportedBuyer:
                true
            }
        } else {
            this._members["FundedAmount"] = true;
            this._members["Id"] = true;
            this._members["PaidByBuyer"] = true;
            this._members["PaymentDate"] = true;
            this._members["PaymentStatus"] = true;
            this._members["RestPaymentAmount"] = true;
            this._members["TransactionValue"] = true;
            this._members["CommercialAgreement"] = true;
            this._members["Invoices"] = true;
            this._members["ImportedBuyer"] = true;
        }

        this.Invoices = new Array<any>();
    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        if(instance.PaymentDate != null) instance.PaymentDate = new Date(instance.PaymentDate);
        if(instance.CommercialAgreement != null)
            instance.CommercialAgreement = FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._lightCast(instance.CommercialAgreement);

        if(instance.Invoices != null) {
            for(let i = 0; i < instance.Invoices.length; i++) {
                instance.Invoices[i] = FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel._lightCast(instance.Invoices[i]);

            }
        }
        if(instance.ImportedBuyer != null)
            instance.ImportedBuyer = FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._lightCast(instance.ImportedBuyer);
        return instance;
    }

    public static _initializeFrom(original: FundedPaidTransactions_TransactionViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): FundedPaidTransactions_TransactionViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        FundedPaidTransactions_TransactionViewModel = new FundedPaidTransactions_TransactionViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateFundedPaidTransactions_TransactionViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateFundedPaidTransactions_TransactionViewModel(original: FundedPaidTransactions_TransactionViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.FundedAmount !== undefined) this.FundedAmount = original.FundedAmount;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.PaidByBuyer !== undefined) this.PaidByBuyer = original.PaidByBuyer;
        if(!CLMS.Framework.String.IsNullOrEmpty(original.PaymentDate)) this.PaymentDate = new Date(original.PaymentDate);
        if(original.PaymentStatus !== undefined) this.PaymentStatus = original.PaymentStatus;
        if(original.RestPaymentAmount !== undefined) this.RestPaymentAmount = original.RestPaymentAmount;
        if(original.TransactionValue !== undefined) this.TransactionValue = original.TransactionValue;

        if(original.CommercialAgreement !== undefined) this.CommercialAgreement = FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(original.CommercialAgreement, ignoreReadOnlyProperties, context);

        if(original.Invoices != null) {
            for(let i = 0; i < original.Invoices.length; i++) {
                this.Invoices.push(FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(original.Invoices[i], ignoreReadOnlyProperties, context));
            }
        }

        if(original.ImportedBuyer !== undefined) this.ImportedBuyer = FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(original.ImportedBuyer, ignoreReadOnlyProperties, context);

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = FundedPaidTransactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): FundedPaidTransactions_TransactionViewModel {
        var reduced = FundedPaidTransactions_TransactionViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public FundedAmount:
    any;
public Id:
    any;
public PaidByBuyer:
    any;
public PaymentDate:
    any;
public PaymentStatus:
    any;
public RestPaymentAmount:
    any;
public TransactionValue:
    any;
public CommercialAgreement:
    any;
public Invoices:
    Array<any>;
public ImportedBuyer:
    any;
    public _versionTimestamp?: string;
}

export class FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
                true
            }
        } else {
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel = new FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateFundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateFundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel(original: FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel {
        var reduced = FundedPaidTransactions_Transaction_CommercialAgreement_CommercialAgreementViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
    public _versionTimestamp?: string;
}

export class FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Id:
true,TotalPrice:
                true
            }
        } else {
            this._members["Id"] = true;
            this._members["TotalPrice"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel = new FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateFundedPaidTransactions_Transaction_Invoices_InvoiceViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateFundedPaidTransactions_Transaction_Invoices_InvoiceViewModel(original: FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Id !== undefined) this.Id = original.Id;
        if(original.TotalPrice !== undefined) this.TotalPrice = original.TotalPrice;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel {
        var reduced = FundedPaidTransactions_Transaction_Invoices_InvoiceViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Id:
    any;
public TotalPrice:
    any;
    public _versionTimestamp?: string;
}

export class FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel extends BaseClass.ViewModel  {
    public constructor() {
        super();
        this._clientPostedProps = null;
        if (this._members == null) {
            this._members = {
Company:
true,Id:
                true
            }
        } else {
            this._members["Company"] = true;
            this._members["Id"] = true;
        }

    }


    public static _lightCast(instance: any): any {
        if (instance == null) return;

        return instance;
    }

    public static _initializeFrom(original: FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean = false, context = new Joove.DTOHelper()): FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        if(original == null) return null;
        // if (context.Has(original)) {
        //    return context.Get(original);
        // }
var result:
        FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel = new FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel();
        if (context != null && context.fillDb == true) {
            context.addToDb(original);
        }
        result._hydrateFundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel(original, ignoreReadOnlyProperties, context);
        // context.Add(original, result);
        return result;
    }


    public _hydrateFundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel(original: FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel, ignoreReadOnlyProperties: boolean, context = new Joove.DTOHelper()): void {
        if(original == null) return;


        if(original._key !== undefined) this._key = original._key;
        if(original._clientKey !== undefined) this._clientKey = original._clientKey;
        if(original._originalTypeClassName !== undefined) this._originalTypeClassName = original._originalTypeClassName;
        if(original._typeHash !== undefined) this._typeHash = original._typeHash;

        if (original._versionTimestamp !== undefined) this._versionTimestamp = original._versionTimestamp;
        if(original.Company !== undefined) this.Company = original.Company;
        if(original.Id !== undefined) this.Id = original.Id;

        this._reduceData = function(ignoreReadOnlyProperties: boolean) {
            var reduced = FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

            return reduced;
        };
    } /* end _initializeFrom() */


    public _reduceData(ignoreReadOnlyProperties: boolean): FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel {
        var reduced = FundedPaidTransactions_Transaction_ImportedBuyer_ImportedBuyerViewModel._initializeFrom(this, ignoreReadOnlyProperties);

        return reduced;
    }

protected _members:
    any;
protected _clientPostedProps:
    any;

    public hasMember(propertyName: string): boolean {
        const result = this._members[propertyName];
        if (result == null) {
            return false;
        }
        return this._members[propertyName];
    }

public Company:
    any;
public Id:
    any;
    public _versionTimestamp?: string;
}

}
