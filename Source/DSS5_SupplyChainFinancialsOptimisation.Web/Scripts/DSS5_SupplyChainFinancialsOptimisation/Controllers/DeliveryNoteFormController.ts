// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdDeliveryNoteSaveClicked(e);
    }
    if (e.which === 27 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdExitClicked(e);
    }
});
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_DeliveryNoteForm: DSS5_SupplyChainFinancialsOptimisation.Controllers.IDeliveryNoteFormScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const DeliveryNoteFormConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "AddDeliveryNote", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableIfNotSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.IsSupplier, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowHideInsertProductsConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_DeliveryNoteForm"].model.SupplierProducts.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfNotNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "NewDeliveryNote", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideStandardsConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUsername, "") == "Supplier25" || Joove.Common.nullSafe<any>(() => window._context.currentUsername, "") == "Supplier15";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "UploadConfirmedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.UploadConfirmed, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableConfirmUploadConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.CSVPath, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const DeliveryNoteFormDataValidations = [
                                        ];
const DeliveryNoteFormCalculatedExpressions = [
new Joove.JbRule({
name: "DeliveryNoteTotalLinePrice",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        _parents[0].LineTotalPrice = Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => _parents[0].Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => _parents[0].Price, 0));

        return Joove.Common.nullSafe<any>(() => _parents[0].LineTotalPrice, 0);


    },
getContext: (indexes) => { var model = window.scope_DeliveryNoteForm.model; var parents = []; try { parents.push(model.DeliveryNote.DeliveryNoteProducts); } catch(e) {
            parents.push({});
        } return parents;
    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "DeliveryNoteTotalAmount",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null) == null)) {
            return 0;
        } else {
            let total = 0;
            for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null).length); _iproduct++) {
                var product = Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null)[_iproduct];
                if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                    continue;
                }
                total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Price, 0))));
            }
            return total;
        }


    },

evaluationTimes: [],
}),
new Joove.JbRule({
name: "DeliveryNoteTotalProducts",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null) == null)) {
            return 0;
        } else {
            let totalProducts = 0;
            for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null).length); _iproduct++) {
                var product = Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null)[_iproduct];
                if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                    continue;
                }
                totalProducts = Joove.Common.safeNumber(totalProducts) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0));
            }
            return totalProducts;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "GridOrdersTotalPrice",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null) == null)) {
            return 0;
        } else {
            let total = 0;
            for (let _iorder = 0; _iorder < (Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null).length); _iorder++) {
                var order = Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null)[_iorder];
                if ((CLMS.Framework.Number.Equal(() => order.TotalPrice, () => 0))) {
                    continue;
                }
                total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => order.TotalPrice, 0));
            }
            return total;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "GridOrdersTotalQuantity",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null) == null)) {
            return 0;
        } else {
            let total = 0;
            for (let _iorder = 0; _iorder < (Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null).length); _iorder++) {
                var order = Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Orders, null)[_iorder];
                if ((CLMS.Framework.Number.Equal(() => order.OrderAmount, () => 0))) {
                    continue;
                }
                total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => order.OrderAmount, 0));
            }
            return total;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "TotalPriceIfProductsNull",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            if ((CLMS.Framework.Number.GreaterThan(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts.length, () => 0))) {
                let total = 0;
                for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null).length); _iproduct++) {
                    var product = Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.DeliveryNoteProducts, null)[_iproduct];
                    if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                        continue;
                    }
                    total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Price, 0))));
                }
                window["scope_DeliveryNoteForm"].model.DeliveryNote.TotalPrice = total;
            }
            return "";
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
        ];

// Datasets Column Info
var SelectOrder_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "OrderNumber",
caption: window._resourcesManager.getDataListColumnCaption("SelectOrder", "OrderNumber", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["SelectOrder_ColumnInfo"] = SelectOrder_ColumnInfo;
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Code",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Code", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Description", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "UnitValue",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "UnitValue", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "MeasurementUnit",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "MeasurementUnit", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "decimal",
dataTypeIsEnum: false,
name: "Price",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Price", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;

// Datasets Projection Shemas
window["SelectOrder_ProjectionScema"] = {DeliveryNote:
                                         {Id: ''
                                                 , Transaction:
                                                 {Id:
                                                         {}
                                                 }
                                         }
                                        };
window["PickList_ProjectionScema"] = {};
window["ImageBox_ProjectionScema"] = {DeliveryNoteStandardPhoto:
                                      {}
                                     };
window["FileAttachmentDNote_ProjectionScema"] = {DeliveryNote:
                                                 {Id: ''
                                                         , DNoteAttachment:
                                                         {}
                                                 }
                                                };
window["FileAttachment_ProjectionScema"] = {CSVPath:
                                            {}
                                           };
window["FileAttachment1_ProjectionScema"] = {DeliveryNoteStandardPath:
                                             {}
                                            };


export interface IDeliveryNoteFormScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.DeliveryNoteFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class DeliveryNoteFormController {
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockSelectOrderOnChange:
    any;
private timeoutDelayLockButton5Clicked:
    any;
private timeoutDelayLockcmdDeliveryNoteSaveClicked:
    any;
private timeoutDelayLockcmdDeleteDeliveryNoteClicked:
    any;
private timeoutDelayLockcmdExitClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_DeliveryNoteForm.model = window.scope_DeliveryNoteForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_DeliveryNoteForm.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.DeliveryNoteFormViewModel._lightCast(window.scope_DeliveryNoteForm.model);
        // Joove.Common.applyScope(window.scope_DeliveryNoteForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IDeliveryNoteFormScope, $timeout: ng.ITimeoutService) {
        window.scope_DeliveryNoteForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.DeliveryNoteFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IDeliveryNoteFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.DeliveryNoteFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
AddDeliveryNote:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("DeliveryNoteForm", "AddDeliveryNote", "GET", [], {}, _modalOptions);
            },
EditDeliveryNote:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("DeliveryNoteForm", "EditDeliveryNote", "GET", [id], {}, _modalOptions);
            },
SaveDeliveryNote:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'SaveDeliveryNote',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteDeliveryNote:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'DeleteDeliveryNote',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
NewDeliveryNote:
            async (transactionId, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("DeliveryNoteForm", "NewDeliveryNote", "GET", [transactionId], {}, _modalOptions);
            },
OnOrderSelected:
            async (orders, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'OnOrderSelected',
queryData: [], postData: {'model': $scope.model, 'orders': orders},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
InsertProducts:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'InsertProducts',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ImportFromCSV:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'ImportFromCSV',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SubmitChanges:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'SubmitChanges',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Exit:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'DeliveryNoteForm', action: 'Exit',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TransactionForm", "EditTransaction", "GET", [Joove.Common.nullSafe<any>(() => window["scope_DeliveryNoteForm"].model.DeliveryNote.Transaction.Id, 0)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SubmitChanges(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ImportFromCSV(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

SelectOrderOnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockSelectOrderOnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockSelectOrderOnChange);
                }

                this.timeoutDelayLockSelectOrderOnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {

                        var p_FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel = Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItems($("[jb-id='SelectOrder']"), e), null);
                        if( eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel`) != null && eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel._initializeFrom`) != null ) {
                            var _initial = p_FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel;
                            p_FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel = [];
                            for(var _i = 0; _i < _initial.length; _i++) {
                                var _temp = eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.DeliveryNoteForm.FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel._initializeFrom(_initial[_i])`);
                                p_FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel.push(_temp);

                            }
                        }
                        $scope.actions.OnOrderSelected(p_FormControls_DeliveryNoteForm_FormControlsDefinition_SelectOrder_PickListControl_SelectedItems_OrderViewModel, null, null, e);
                    }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

Button5Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton5Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton5Clicked);
                }

                this.timeoutDelayLockButton5Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.InsertProducts(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeliveryNoteSaveClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeliveryNoteSaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeliveryNoteSaveClicked);
                }

                this.timeoutDelayLockcmdDeliveryNoteSaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveDeliveryNote(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeleteDeliveryNoteClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteDeliveryNoteClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteDeliveryNoteClicked);
                }

                this.timeoutDelayLockcmdDeleteDeliveryNoteClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteDeliveryNote", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.DeleteDeliveryNote(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

cmdExitClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdExitClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdExitClicked);
                }

                this.timeoutDelayLockcmdExitClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Exit(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(DeliveryNoteFormDataValidations);
        window._ruleEngine.addConditionalFormattings(DeliveryNoteFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(DeliveryNoteFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("DeliveryNoteFormController", ["$scope", "$timeout", DeliveryNoteFormController] as Array<string>);
}
