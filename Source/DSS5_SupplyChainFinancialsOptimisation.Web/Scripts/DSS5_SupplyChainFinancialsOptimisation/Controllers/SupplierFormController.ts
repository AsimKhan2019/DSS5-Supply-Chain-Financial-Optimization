// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_SupplierForm: DSS5_SupplyChainFinancialsOptimisation.Controllers.ISupplierFormScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const SupplierFormConditionalFormattings = [
new Joove.JbRule({
name: "IfGuestConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("GuestSupplier") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("PendingRegistered") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AcceptedPolicyTermsConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.AcceptedPolicyTerms, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfAdminConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Developer") > -1, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowEvaluationConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return true;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfReRunConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Rerun, false) && Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("TobeReceivableSeller") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmGreenConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 6);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmBlueConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 5);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmYellowConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 4);

    },
evaluationTimes: [],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmOrangeConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 3);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmBrownConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 2);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "AlgorithmRedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.LessThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 1);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "EvaluationConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Evaluation, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "RequestValidationConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return (Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("RegisteredSupplier") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("PendingValidated") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("ValidatedSupplier") > -1, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.FinishButton, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowIfInvestorConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "MakeReadOnlyifInvestorFleAttachmentConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return (Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("ActiveSupplier") > -1, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "MakeReadOnlyifInvestorConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("ActiveSupplier") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfInvestorHasAgreementWithSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.Agreements.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Investor.UserName, "") == Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep2To1Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep1To2RequiredForSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return false;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep1To2Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1To2, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step1RequiredForSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1, false) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.IsSupplier, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step1Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep2To3RequiredForSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return false;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep2To3Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep3To4Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step3To4, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "CFStep4To5Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step4To5, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "FinishedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.FinishButton, false) && !((Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false) || Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("ActiveSupplier") > -1, false)));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step5onlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step4To5, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step4onlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step3To4, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step3onlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step2onlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1To2, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Step1onlyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Previous5To4Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step4To5, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step3To4, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Previous4To3Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step3To4, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Previous3To2Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1To2, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "Previous2To1Conditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1To2, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableIfNotAcceptedPolicyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.AcceptedPolicyTerms, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.IsSupplier, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfGuestSavedThenPayConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.GuestFinish, false) && (Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("GuestSupplier") > -1, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowOnlyIfActiveSupConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("ActiveSupplier") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const SupplierFormDataValidations = [
new Joove.JbRule({
name: "DVFinancialStatementsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVFinancialStatements',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVEconomicEvaluationsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVEconomicEvaluations',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVBusinessPlansValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVBusinessPlans',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVPriorOutstandingBalancesValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.PriorOutstandingBalances.length, () => 0) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.IsSupplier, false) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step4To5, false);


    },
expression: async function(_parents) {
        return "Please upload Outstanding balance analysis in Step 3";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVPriorOutstandingBalances',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVOutstandingBalancesValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVOutstandingBalances',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVCurrentSituationsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVCurrentSituations',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVCurrentStatementsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVCurrentStatements',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVCurrentCreditsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVCurrentCredits',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVFactoringAgreementsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVFactoringAgreements',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVAgreementsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVAgreements',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVGeneralConstractualsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVGeneralConstractuals',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVOrganizationalChartsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVOrganizationalCharts',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVDeclarationsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVDeclarations',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVInvoicesFormsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return false;


    },
expression: async function(_parents) {
        return "Please upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVInvoicesForms',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVPriorOutstandingPolicyTermsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return CLMS.Framework.Number.NotEqual(() => window["scope_SupplierForm"].model.Supplier.PriorOutstandingBalances.length, () => 0) && !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.AcceptedPolicyTerms, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.IsSupplier, false);


    },
expression: async function(_parents) {
        return "You have to accept the Policy Terms first in order to upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVPriorOutstandingPolicyTerms',
fromMasterPage: false
}),
new Joove.JbRule({
name: "DVOutstandingPolicyTermsValidation",
type: Joove.RuleTypes.DataValidation,
evaluatedAtServer: false,
isDataSetRule: false,
group: "",



condition: async (_parents) => {
        return CLMS.Framework.Number.NotEqual(() => window["scope_SupplierForm"].model.Supplier.OutstandingBalances.length, () => 0) && !(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.AcceptedPolicyTerms, false)) && Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Step2To3, false);


    },
expression: async function(_parents) {
        return "You have to accept the Policy Terms first in order to upload a file";
    },
dataValidationMessageType:  Joove.DataValidationMessageType.ERROR,
evaluationTimes: [Joove.EvaluationTimes.OnSubmit],
originalName: 'DVOutstandingPolicyTerms',
fromMasterPage: false
}),
                                    ];
const SupplierFormCalculatedExpressions = [
new Joove.JbRule({
name: "SumReceivablesPresent",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let receivablesPresent = 0;
            receivablesPresent = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.DomesticCustomersPresent, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.EUCustomersPresent, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.ThirdCountryCustomersPresent, 0)));
            return receivablesPresent;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumReceivablesPrior",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let receivablesPrior = 0;
            receivablesPrior = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.DomesticCustomersPrior, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.EUCustomersPrior, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierReceivables.ThirdCountryCustomersPrior, 0)));
            return receivablesPrior;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumNumOfInvoices",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfInvoicesD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfInvoicesAbroad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfInvoicesEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumOpenBalance",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOpenBalanceD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOpenBalanceAboad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOpenBalanceEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumNumTransactions",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumTransCustD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumTransCustAbroad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumTransCustEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumOccasionalCustomers",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfOccasionalCustD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfOccasionalCustAbroad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfOccasionalCustEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumActiveCustomers",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.ThereofActiveD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.ThereofActiveAbroad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.ThereofActiveEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumNumOfCustomers",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let numberOfCustomers = 0;
            numberOfCustomers = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfCustomersD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfCustomersAbroad, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierBusinessStructureData.NumOfCustomersEU, 0)));
            return numberOfCustomers;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumActualTurnoverPreviousYear1",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let ActualTurnoverPrevious = 0;
            ActualTurnoverPrevious = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearEU, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearAbroad, 0)));
            return ActualTurnoverPrevious;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "PercentageTSPreviousPeriodDomestic1",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        let TotalSalesPerD = 0;

        TotalSalesPerD = (Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearD, 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYear, 0)))) * Joove.Common.safeNumber(100));

        return TotalSalesPerD;


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "PercentageTSPreviousPeriodEU",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        let TotalSalesPerEU = 0;

        TotalSalesPerEU = (Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearEU, 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYear, 0)))) * Joove.Common.safeNumber(100));

        return TotalSalesPerEU;


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "PercentageTSPreviousPeriodAbroad",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        let TotalSalesPerAbroad = 0;

        TotalSalesPerAbroad = (Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYearAbroad, 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYear, 0)))) * Joove.Common.safeNumber(100));

        return TotalSalesPerAbroad;


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "TotalSalesPercentage",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        let TotalSalesPer = 0;

        TotalSalesPer = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PercentageD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PercentageEU, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PercentageAbroad, 0)));

        TotalSalesPer = Joove.Common.nullSafe<any>(() => Math.round10(TotalSalesPer, 2), 0);

        return TotalSalesPer;


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumPlannedTurnoverNextYear",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let PlannedTurnNext = 0;
            PlannedTurnNext = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedNextYearD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedNextYearEU, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedNextYearAbroad, 0)));
            return PlannedTurnNext;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "SumPlannedTurnoverCurrentYear1",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            let PlannedTurnCurrent = 0;
            PlannedTurnCurrent = (Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedCurrentYearD, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedCurrentYearEU, 0)) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.PlannedCurrentYearAbroad, 0)));
            return PlannedTurnCurrent;
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
}),
        ];
// Manual Data for txtBusiness7
window["dataFortxtBusiness7"] = [ {
_key: "Trading",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessSegment', '0', false , null),
_default: false
}, {
_key: "Services",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessSegment', '1', false , null),
_default: false
}, {
_key: "Other",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessSegment', '2', false , null),
_default: false
} ]
// Manual Data for OptionButton
window["dataForOptionButton"] = [ {
_key: "Recurring",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessDataSet', '0', false , null),
_default: false
}, {
_key: "Project-based",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessDataSet', '1', false , null),
_default: false
}, {
_key: "Mixed",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('BusinessDataSet', '2', false , null),
_default: false
} ]
// Manual Data for OptionButton1
window["dataForOptionButton1"] = [ {
_key: "B2B",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('DataSetEnvironment', '0', false , null),
_default: false
}, {
_key: "B2C",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('DataSetEnvironment', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton2
window["dataForOptionButton2"] = [ {
_key: "Yes",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '0', false , null),
_default: false
}, {
_key: "No",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton3
window["dataForOptionButton3"] = [ {
_key: "Yes",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '0', false , null),
_default: false
}, {
_key: "No",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton4
window["dataForOptionButton4"] = [ {
_key: "Yes",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '0', false , null),
_default: false
}, {
_key: "No",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '1', false , null),
_default: false
} ]
// Manual Data for OptionButton5
window["dataForOptionButton5"] = [ {
_key: "Yes",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '0', false , null),
_default: false
}, {
_key: "No",
_text: window._resourcesManager.getRadioButtonManualValueDisplay('YesNoDataSet', '1', false , null),
_default: false
} ]
// Manual Data for txtApplicableCommercialLaw
window["dataFortxtApplicableCommercialLaw"] = [ {
_key: "German",
_text: window._resourcesManager.getComboBoxManualValueDisplay('ApplicableComLaw', '0', false , null),
_default: false
}, {
_key: "Greek",
_text: window._resourcesManager.getComboBoxManualValueDisplay('ApplicableComLaw', '1', false , null),
_default: false
}, {
_key: "French",
_text: window._resourcesManager.getComboBoxManualValueDisplay('ApplicableComLaw', '2', false , null),
_default: false
} ]

// Datasets Column Info
export var BusinessSegment_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["BusinessSegment_ColumnInfo"] = BusinessSegment_ColumnInfo;
export var BusinessDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["BusinessDataSet_ColumnInfo"] = BusinessDataSet_ColumnInfo;
export var DataSetEnvironment_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["DataSetEnvironment_ColumnInfo"] = DataSetEnvironment_ColumnInfo;
export var YesNoDataSet_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["YesNoDataSet_ColumnInfo"] = YesNoDataSet_ColumnInfo;
export var ApplicableComLaw_ColumnInfo = [new Joove.ColumnInfo("Value", "string", null,  true)];
window["ApplicableComLaw_ColumnInfo"] = ApplicableComLaw_ColumnInfo;

// Datasets Projection Shemas










export interface ISupplierFormScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.SupplierForm.SupplierFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,
DVFinancialStatements: Joove.Validation.BindingEntry,DVEconomicEvaluations: Joove.Validation.BindingEntry,DVBusinessPlans: Joove.Validation.BindingEntry,DVPriorOutstandingBalances: Joove.Validation.BindingEntry,DVOutstandingBalances: Joove.Validation.BindingEntry,DVCurrentSituations: Joove.Validation.BindingEntry,DVCurrentStatements: Joove.Validation.BindingEntry,DVCurrentCredits: Joove.Validation.BindingEntry,DVFactoringAgreements: Joove.Validation.BindingEntry,DVAgreements: Joove.Validation.BindingEntry,DVGeneralConstractuals: Joove.Validation.BindingEntry,DVOrganizationalCharts: Joove.Validation.BindingEntry,DVDeclarations: Joove.Validation.BindingEntry,DVInvoicesForms: Joove.Validation.BindingEntry,DVPriorOutstandingPolicyTerms: Joove.Validation.BindingEntry,DVOutstandingPolicyTerms: Joove.Validation.BindingEntry,
    },
    _masterValidations?: any;
}

class SupplierFormController {
private timeoutDelayLockButton1to2Clicked:
    any;
private timeoutDelayLockButton2to31Clicked:
    any;
private timeoutDelayLockButton2to3Clicked:
    any;
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockButton2to311Clicked:
    any;
private timeoutDelayLockButton3to4Clicked:
    any;
private timeoutDelayLockButtonEvaluationClicked:
    any;
private timeoutDelayLockButton2to3111Clicked:
    any;
private timeoutDelayLockButton4to5Clicked:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockButton2to31111Clicked:
    any;
private timeoutDelayLockButtonFinishClicked:
    any;
private timeoutDelayLockButtonSaveGuestClicked:
    any;
private timeoutDelayLockButtonRegistrationClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButtonRequestValidationClicked:
    any;
private timeoutDelayLockcmdDeleteReceivableSellerClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_SupplierForm.model = window.scope_SupplierForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_SupplierForm.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.SupplierForm.SupplierFormViewModel._lightCast(window.scope_SupplierForm.model);
        // Joove.Common.applyScope(window.scope_SupplierForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: ISupplierFormScope, $timeout: ng.ITimeoutService) {
        window.scope_SupplierForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.SupplierForm.SupplierFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                                DVFinancialStatements:
                                { rule: SupplierFormDataValidations[0], group: SupplierFormDataValidations[0].group },
                                DVEconomicEvaluations:
                                { rule: SupplierFormDataValidations[1], group: SupplierFormDataValidations[1].group },
                                DVBusinessPlans:
                                { rule: SupplierFormDataValidations[2], group: SupplierFormDataValidations[2].group },
                                DVPriorOutstandingBalances:
                                { rule: SupplierFormDataValidations[3], group: SupplierFormDataValidations[3].group },
                                DVOutstandingBalances:
                                { rule: SupplierFormDataValidations[4], group: SupplierFormDataValidations[4].group },
                                DVCurrentSituations:
                                { rule: SupplierFormDataValidations[5], group: SupplierFormDataValidations[5].group },
                                DVCurrentStatements:
                                { rule: SupplierFormDataValidations[6], group: SupplierFormDataValidations[6].group },
                                DVCurrentCredits:
                                { rule: SupplierFormDataValidations[7], group: SupplierFormDataValidations[7].group },
                                DVFactoringAgreements:
                                { rule: SupplierFormDataValidations[8], group: SupplierFormDataValidations[8].group },
                                DVAgreements:
                                { rule: SupplierFormDataValidations[9], group: SupplierFormDataValidations[9].group },
                                DVGeneralConstractuals:
                                { rule: SupplierFormDataValidations[10], group: SupplierFormDataValidations[10].group },
                                DVOrganizationalCharts:
                                { rule: SupplierFormDataValidations[11], group: SupplierFormDataValidations[11].group },
                                DVDeclarations:
                                { rule: SupplierFormDataValidations[12], group: SupplierFormDataValidations[12].group },
                                DVInvoicesForms:
                                { rule: SupplierFormDataValidations[13], group: SupplierFormDataValidations[13].group },
                                DVPriorOutstandingPolicyTerms:
                                { rule: SupplierFormDataValidations[14], group: SupplierFormDataValidations[14].group },
                                DVOutstandingPolicyTerms:
                                { rule: SupplierFormDataValidations[15], group: SupplierFormDataValidations[15].group },
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: ISupplierFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.SupplierForm.SupplierFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
AddSupplier:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("SupplierForm", "AddSupplier", "GET", [], {}, _modalOptions);
            },
EditSupplier:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("SupplierForm", "EditSupplier", "GET", [], {}, _modalOptions);
            },
DeleteSupplier:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'DeleteSupplier',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Save:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'Save',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
PassedEvaluation:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SupplierForm"].model.Passed = "Passed Evaluation Test";

                    window["scope_SupplierForm"].model.Evaluation = true;

                    window["scope_SupplierForm"].model.TestRunned = true;

                    let count = 0;

                    if (CLMS.Framework.Number.GreaterThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierTurnover.ActualPreviousYear, () => 500000)) {
                        window["scope_SupplierForm"].model.Evaluation1 = true;
                        window["scope_SupplierForm"].model.Supplier.AnnualTurnover = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation1 = false;
                        window["scope_SupplierForm"].model.Supplier.AnnualTurnover = false;
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.Environment, "") == "B2B") {
                        window["scope_SupplierForm"].model.Evaluation2 = true;
                        window["scope_SupplierForm"].model.Supplier.BEnvironment = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation2 = false;
                        window["scope_SupplierForm"].model.Supplier.BEnvironment = false;
                    }

                    if (CLMS.Framework.Number.LessThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.ContractualPaymentTerms, () => 160)) {
                        window["scope_SupplierForm"].model.Evaluation3 = true;
                        window["scope_SupplierForm"].model.Supplier.PTerms = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation3 = false;
                        window["scope_SupplierForm"].model.Supplier.PTerms = false;
                    }

                    if (CLMS.Framework.Number.GreaterThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.Average, () => 30) && CLMS.Framework.Number.LessThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.Average, () => 120)) {
                        window["scope_SupplierForm"].model.Evaluation4 = true;
                        window["scope_SupplierForm"].model.Supplier.Average = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation4 = false;
                        window["scope_SupplierForm"].model.Supplier.Average = false;
                    }

                    if (CLMS.Framework.Number.GreaterThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.AverageInvoiceValue, () => 300)) {
                        window["scope_SupplierForm"].model.Evaluation5 = true;
                        window["scope_SupplierForm"].model.Supplier.InvoiceValue = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation5 = false;
                        window["scope_SupplierForm"].model.Supplier.InvoiceValue = false;
                    }

                    if (CLMS.Framework.Number.GreaterThanOrEqual(() => window["scope_SupplierForm"].model.Supplier.SupplierEvaluation.EquityRatio, () => 10)) {
                        window["scope_SupplierForm"].model.Evaluation6 = true;
                        window["scope_SupplierForm"].model.Supplier.EqRatio = true;
                    } else {
                        window["scope_SupplierForm"].model.Evaluation6 = false;
                        window["scope_SupplierForm"].model.Supplier.EqRatio = false;
                    }

                    window["scope_SupplierForm"].model.EvaluationCount = count;

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.AnnualTurnover, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.BEnvironment, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.PTerms, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.Average, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.InvoiceValue, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    if (Joove.Common.nullSafe<any>(() => window["scope_SupplierForm"].model.Supplier.EqRatio, false)) {
                        count = Joove.Common.safeNumber(count) + Joove.Common.safeNumber(1);
                    }

                    window["scope_SupplierForm"].model.Supplier.EvaluationCountResult = count;

                    if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 6)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "Very High Performance";
                    } else if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 5)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "High Performance";
                    } else if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 4)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "Medium Performance";
                    } else if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 3)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "Borderline Performance";
                    } else if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 2)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "Low Performance";
                    } else if (CLMS.Framework.Number.Equal(() => window["scope_SupplierForm"].model.Supplier.EvaluationCountResult, () => 1)) {
                        window["scope_SupplierForm"].model.Supplier.EvaluationResult = "Very Low Performance";
                    }


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
SaveGuestProfile:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'SaveGuestProfile',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
BuyRegistration:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    Joove.Common.nullSafe<any>(() => Joove.Core.executeRedirectControllerAction("PaymentForm", "AddPayment", "GET", [], {}, _modalOptions), null);


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
PassedRerun:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'PassedRerun',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
EditSupplier_:
            async (username, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("SupplierForm", "EditSupplier_", "GET", [username], {}, _modalOptions);
            },
RequestValidation:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'RequestValidation',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
InterestedToAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'InterestedToAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ModalClose:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
Step1To2:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'Step1To2',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Step2To3:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'Step2To3',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Step3To4:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'Step3To4',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Step4To5:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'SupplierForm', action: 'Step4To5',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Step3To2:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SupplierForm"].model.Step1To2 = true;

                    window["scope_SupplierForm"].model.Step2To3 = false;


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
Step2To1:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SupplierForm"].model.Step1To2 = false;

                    window["scope_SupplierForm"].model.Step1 = true;


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
Step4To3:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SupplierForm"].model.Step2To3 = true;

                    window["scope_SupplierForm"].model.Step3To4 = false;


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
Step5To4:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {
                    window["scope_SupplierForm"].model.Step3To4 = true;

                    window["scope_SupplierForm"].model.Step4To5 = false;


                    // Joove.Common.applyScope(window.scope_SupplierForm);
                }


                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
        };
// Events
        $scope.eventCallbacks = {
Button1to2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1to2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1to2Clicked);
                }

                this.timeoutDelayLockButton1to2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step1To2(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button2to31Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2to31Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2to31Clicked);
                }

                this.timeoutDelayLockButton2to31Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step2To1(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2to3Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2to3Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2to3Clicked);
                }

                this.timeoutDelayLockButton2to3Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step2To3(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierPolicyTerms", "Render", "GET", [], {}, { mode: 'PopUp', width: '80%', height: '80%', onClose: () => { $scope.actions.ModalClose(); }});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2to311Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2to311Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2to311Clicked);
                }

                this.timeoutDelayLockButton2to311Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step3To2(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button3to4Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton3to4Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton3to4Clicked);
                }

                this.timeoutDelayLockButton3to4Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step3To4(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

ButtonEvaluationClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonEvaluationClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonEvaluationClicked);
                }

                this.timeoutDelayLockButtonEvaluationClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.PassedEvaluation(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2to3111Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2to3111Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2to3111Clicked);
                }

                this.timeoutDelayLockButton2to3111Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step4To3(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button4to5Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton4to5Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton4to5Clicked);
                }

                this.timeoutDelayLockButton4to5Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step4To5(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.PassedRerun(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button2to31111Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2to31111Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2to31111Clicked);
                }

                this.timeoutDelayLockButton2to31111Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Step5To4(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ButtonFinishClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonFinishClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonFinishClicked);
                }

                this.timeoutDelayLockButtonFinishClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Save(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

ButtonSaveGuestClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonSaveGuestClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonSaveGuestClicked);
                }

                this.timeoutDelayLockButtonSaveGuestClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveGuestProfile(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

ButtonRegistrationClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonRegistrationClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonRegistrationClicked);
                }

                this.timeoutDelayLockButtonRegistrationClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PaymentForm", "AddPayment", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("Button1", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.InterestedToAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

ButtonRequestValidationClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonRequestValidationClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonRequestValidationClicked);
                }

                this.timeoutDelayLockButtonRequestValidationClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.RequestValidation(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeleteReceivableSellerClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteReceivableSellerClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteReceivableSellerClicked);
                }

                this.timeoutDelayLockcmdDeleteReceivableSellerClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteReceivableSeller", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.DeleteSupplier(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(SupplierFormDataValidations);
        window._ruleEngine.addConditionalFormattings(SupplierFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(SupplierFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("SupplierFormController", ["$scope", "$timeout", SupplierFormController] as Array<string>);
}
