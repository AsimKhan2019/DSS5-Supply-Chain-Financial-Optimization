// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_DashboardNew: DSS5_SupplyChainFinancialsOptimisation.Controllers.IDashboardNewScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const DashboardNewConditionalFormattings = [
        ];
const DashboardNewDataValidations = [
                                    ];
const DashboardNewCalculatedExpressions = [
        ];

// Datasets Column Info
export var OnTimeDataSet_ColumnInfo = [new Joove.ColumnInfo("Supplier.Company", "string", null, false),
                                       new Joove.ColumnInfo("OnTimeDeliveries", "int", null, false),
                                       new Joove.ColumnInfo("AsOrderedDeliveries", "int", null, false),
                                       new Joove.ColumnInfo("InFullDeliveries", "int", null, false),
                                       new Joove.ColumnInfo("TotalImpeachments", "int", null, false),
                                       new Joove.ColumnInfo("TotalTransactions", "int", null, false)];
window["OnTimeDataSet_ColumnInfo"] = OnTimeDataSet_ColumnInfo;
export var SupplierTurnoverDataSet_ColumnInfo = [new Joove.ColumnInfo("Supplier.Company", "string", null, false),
           new Joove.ColumnInfo("CurrentTurnover", "decimal", null, false)];
window["SupplierTurnoverDataSet_ColumnInfo"] = SupplierTurnoverDataSet_ColumnInfo;

// Datasets Projection Shemas
window["Chart1_ProjectionScema"] = {};
window["Chart11_ProjectionScema"] = {};
window["Chart1112_ProjectionScema"] = {};
window["Chart1111_ProjectionScema"] = {};
window["Chart2_ProjectionScema"] = {};
window["Chart3_ProjectionScema"] = {};
window["Chart_ProjectionScema"] = {};


export interface IDashboardNewScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardNew.DashboardNewViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class DashboardNewController {
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockViewAllSellers1Clicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButton22Clicked:
    any;
private timeoutDelayLockButton21Clicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_DashboardNew.model = window.scope_DashboardNew.dehydrate();
        //window.scope_MasterPage.model = window.scope_DashboardNew.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardNew.DashboardNewViewModel._lightCast(window.scope_DashboardNew.model);
        // Joove.Common.applyScope(window.scope_DashboardNew);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IDashboardNewScope, $timeout: ng.ITimeoutService) {
        window.scope_DashboardNew = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardNew.DashboardNewViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IDashboardNewScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardNew.DashboardNewViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
Chart1YScaleMin:
            () => -1,
            Chart11YScaleMin: () => -1,
                Chart1112YScaleMin: () => -1,
                Chart1111YScaleMin: () => -1,
                Chart1111YScaleMax: () => 5,
                Chart2YScaleMin: () => 0,
                Chart2YScaleMax: () => 10,
                Chart3XScaleMin: () => 0,
            }
// Dataset Handler
            $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("DashboardNew", "Render", "GET", [], {}, _modalOptions);
            },
        };
// Events
        $scope.eventCallbacks = {
Button2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("AdminTransactionsList", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ViewAllSellers1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockViewAllSellers1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockViewAllSellers1Clicked);
                }

                this.timeoutDelayLockViewAllSellers1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ActiveSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ActiveSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button22Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton22Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton22Clicked);
                }

                this.timeoutDelayLockButton22Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ValidatedSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button21Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton21Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton21Clicked);
                }

                this.timeoutDelayLockButton21Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PendingValidatedSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(DashboardNewDataValidations);
        window._ruleEngine.addConditionalFormattings(DashboardNewConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(DashboardNewCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("DashboardNewController", ["$scope", "$timeout", DashboardNewController] as Array<string>);
}
