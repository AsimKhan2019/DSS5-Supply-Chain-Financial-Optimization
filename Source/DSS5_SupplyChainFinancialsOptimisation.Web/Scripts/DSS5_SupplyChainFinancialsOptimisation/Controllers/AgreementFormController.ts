// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdSupplierAgreementSaveClicked(e);
    }
});
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_AgreementForm: DSS5_SupplyChainFinancialsOptimisation.Controllers.IAgreementFormScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const AgreementFormConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "AddAgreement", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ApprovedFromEverybodyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.ApprovedByEverybody, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableApproveButtonConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.AgreementStatus.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Status, "") == "Approved" && Joove.Common.nullSafe<any>(() => a.ProvidedBy, "") == Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfSupplierConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.IsSupplier, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfInvestorConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfAdminConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfAdminRequiredConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Administrator") > -1, false);

    },
evaluationTimes: [],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfNotApprovedYetConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.CurrentAgreementStatus, "") == "Interested" || Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.CurrentAgreementStatus, "") == "Under Signing";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HandleDeleteButtonConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.CurrentAgreementStatus, "") == "Interested";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfSupplierApprovedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.AgreementStatus.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Status, "") == "Approved by Supplier" && Joove.Common.nullSafe<any>(() => a.ProvidedBy, "") == Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfInvestorApprovedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.AgreementStatus.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Status, "") == "Approved by Investor" && Joove.Common.nullSafe<any>(() => a.ProvidedBy, "") == Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfAdminApprovedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.AgreementStatus.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Status, "") == "Approved by Administrator" && Joove.Common.nullSafe<any>(() => a.ProvidedBy, "") == Joove.Common.nullSafe<any>(() => window._context.currentUsername, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfSupplierAttachmentNullorEmptyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.DocumentAgreement.SupplierDocument, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfInvestorAttachmentNullorEmptyConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.DocumentAgreement.InvestorDocument, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.CurrentAgreementStatus, "") == "Under Signing" || Joove.Common.nullSafe<any>(() => window["scope_AgreementForm"].model.Agreement.CurrentAgreementStatus, "") == "Active";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const AgreementFormDataValidations = [
                                     ];
const AgreementFormCalculatedExpressions = [
        ];

// Datasets Column Info
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "PaymentTerms",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "PaymentTerms", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ProductCategory",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "ProductCategory", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Supplier.Company",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Supplier.Company", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ImportedBuyer.Company",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "ImportedBuyer.Company", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;

// Datasets Projection Shemas
window["PickList_ProjectionScema"] = {Agreement:
                                      {Id: ''
                                       , Supplier:
                                       {UserName: ''
                                       }
                                      }
                                     };
window["FileAttachmentSupplier_ProjectionScema"] = {Agreement:
                                                    {Id: ''
                                                            , DocumentAgreement:
                                                            {Id: ''
                                                                    , SupplierDocument:
                                                                    {}
                                                            }
                                                    }
                                                   };
window["FileAttachmentInvestor_ProjectionScema"] = {Agreement:
                                                    {Id: ''
                                                            , DocumentAgreement:
                                                            {Id: ''
                                                                    , InvestorDocument:
                                                                    {}
                                                            }
                                                    }
                                                   };
window["FileAttachmentAdmin_ProjectionScema"] = {Agreement:
                                                 {Id: ''
                                                         , DocumentAgreement:
                                                         {Id: ''
                                                                 , AdminDocument:
                                                                 {}
                                                         }
                                                 }
                                                };


export interface IAgreementFormScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.AgreementForm.AgreementFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,
dtStartDate0: Joove.Validation.BindingEntry,txtFundedRate2: Joove.Validation.BindingEntry,txtInterestRate: Joove.Validation.BindingEntry,
    },
    _masterValidations?: any;
}

class AgreementFormController {
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockAdminApproveClicked:
    any;
private timeoutDelayLockcmdInvestorAgreementSaveClicked:
    any;
private timeoutDelayLockcmdSupplierAgreementSaveClicked:
    any;
private timeoutDelayLockcmdSupplierAgreementSaveAdminClicked:
    any;
private timeoutDelayLockcmdDeleteAgreementClicked:
    any;
private timeoutDelayLockcmdExitClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_AgreementForm.model = window.scope_AgreementForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_AgreementForm.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.AgreementForm.AgreementFormViewModel._lightCast(window.scope_AgreementForm.model);
        // Joove.Common.applyScope(window.scope_AgreementForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IAgreementFormScope, $timeout: ng.ITimeoutService) {
        window.scope_AgreementForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.AgreementForm.AgreementFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                                dtStartDate0:
                                { requiredControlId: 'dtStartDate0', group: null },
                                txtFundedRate2:
                                { requiredControlId: 'txtFundedRate2', group: null },
                                txtInterestRate:
                                { requiredControlId: 'txtInterestRate', group: null },
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IAgreementFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.AgreementForm.AgreementFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
AddAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("AgreementForm", "AddAgreement", "GET", [], {}, _modalOptions);
            },
EditAgreement:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("AgreementForm", "EditAgreement", "GET", [id], {}, _modalOptions);
            },
InvestorSaveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'InvestorSaveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'DeleteAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
AdminApproveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'AdminApproveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ApproveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'ApproveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SupplierSaveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'SupplierSaveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
AdminSaveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'AdminSaveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteListAgreement:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("AgreementForm", "DeleteListAgreement", "GET", [id], {}, _modalOptions);
            },
SupplierApproveAgreement:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'AgreementForm', action: 'SupplierApproveAgreement',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ApproveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SupplierApproveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

AdminApproveClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockAdminApproveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockAdminApproveClicked);
                }

                this.timeoutDelayLockAdminApproveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AdminApproveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdInvestorAgreementSaveClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdInvestorAgreementSaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdInvestorAgreementSaveClicked);
                }

                this.timeoutDelayLockcmdInvestorAgreementSaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.InvestorSaveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdSupplierAgreementSaveClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdSupplierAgreementSaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdSupplierAgreementSaveClicked);
                }

                this.timeoutDelayLockcmdSupplierAgreementSaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SupplierSaveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdSupplierAgreementSaveAdminClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdSupplierAgreementSaveAdminClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdSupplierAgreementSaveAdminClicked);
                }

                this.timeoutDelayLockcmdSupplierAgreementSaveAdminClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.AdminSaveAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeleteAgreementClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteAgreementClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteAgreementClicked);
                }

                this.timeoutDelayLockcmdDeleteAgreementClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteAgreement", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.DeleteAgreement(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

cmdExitClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.Common.setControlKeyPressed(e, 0);
                window._commander.closeForm();
            },

        };

// Rules
        window._ruleEngine.addDataValidations(AgreementFormDataValidations);
        window._ruleEngine.addConditionalFormattings(AgreementFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(AgreementFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("AgreementFormController", ["$scope", "$timeout", AgreementFormController] as Array<string>);
}
