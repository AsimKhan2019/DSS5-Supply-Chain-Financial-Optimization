// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;

$(document).keyup((event) => {
    if (event.which === 123 && event.ctrlKey && event.shiftKey) {
        var debugConsole = new Joove.Widgets.DebugConsole("#debugConsole", "/MasterPage/DebugPage", true);
        debugConsole.minmaxModal(false, null);
    }
});
interface Window { scope_MasterPage: DSS5_SupplyChainFinancialsOptimisation.Controllers.IMasterPageScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
var _treeNodesConfiguration = { };
const MasterPageConditionalFormattings = [
new Joove.JbRule({
name: "PendingChangesMasterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return window._context.isDirty;

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideEmptyTitleMasterConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () {
            return Joove.Common.nullSafe<any>(() => window["scope_MasterPage"].model.Title, "").trim();
        }, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const MasterPageDataValidations = [
                                  ];
const MasterPageCalculatedExpressions = [
new Joove.JbRule({
name: "CalculatedExpressionMaster",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        return null;


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad],
}),
                                        ];

// Datasets Column Info

// Datasets Projection Shemas


export interface IMasterPageScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class MasterPageController {
private timeoutDelayLockMainMenuHeaderMenuItemPressed:
    any;
private timeoutDelayLockMasterHomePageMenuItemPressed:
    any;
private timeoutDelayLockManageUsersMenuItemPressed:
    any;
private timeoutDelayLockManagePermissionsMenuItemPressed:
    any;
private timeoutDelayLockManageRolesMenuItemPressed:
    any;
private timeoutDelayLockManageOperationsMenuItemPressed:
    any;
private timeoutDelayLockManageSettingsMenuItemPressed:
    any;
private timeoutDelayLockMasterChangePasswordMenuItemPressed:
    any;
private timeoutDelayLockMasterPreferencesMenuItemPressed:
    any;
private timeoutDelayLockMasterSignOutMenuItemPressed:
    any;
private timeoutDelayLockMasterSignInMenuItemPressed:
    any;
private timeoutDelayLockMPSignUpMenuItemPressed:
    any;
private timeoutDelayLockMPStatisticsMenuItemPressed:
    any;
private timeoutDelayLockMPInvestorProfileMenuItemPressed:
    any;
private timeoutDelayLockMPPendingRegisteredMenuItemPressed:
    any;
private timeoutDelayLockMIValidateSupMenuItemPressed:
    any;
private timeoutDelayLockMPPendingInvMenuItemPressed:
    any;
private timeoutDelayLockMPEditProfileMenuItemPressed:
    any;
private timeoutDelayLockMPValidatedSuppliersMenuItemPressed:
    any;
private timeoutDelayLockMPActiveSupMenuItemPressed:
    any;
private timeoutDelayLockInvComAgreementsMenuItemPressed:
    any;
private timeoutDelayLockMPInvestorsMenuItemPressed:
    any;
private timeoutDelayLockMPPaymentMenuItemPressed:
    any;
private timeoutDelayLockMPAgreementsMenuItemPressed:
    any;
private timeoutDelayLockMenuItemLekosMenuItemPressed:
    any;
private timeoutDelayLockMenuItemRaymetricsMenuItemPressed:
    any;
private timeoutDelayLockMPTransactionsMenuItemPressed:
    any;
private timeoutDelayLockHelpSectionMenuItemPressed:
    any;
private timeoutDelayLockMPBuyerProfileMenuItemPressed:
    any;
private timeoutDelayLockAdminTransactionDocumentsMenuItemPressed:
    any;
private timeoutDelayLockInvestorTransDocumentsMenuItemPressed:
    any;
private timeoutDelayLockMPCommercialAgListMenuItemPressed:
    any;
private timeoutDelayLockIntermediaryTransactionListMenuItemPressed:
    any;
private timeoutDelayLockMPSupPaymentsMenuItemPressed:
    any;
private timeoutDelayLockMPBuyerPaymentsMenuItemPressed:
    any;
private timeoutDelayLockMPClosedTransactionsMenuItemPressed:
    any;
private timeoutDelayLockMPSupplierPaymentsMenuItemPressed:
    any;
private timeoutDelayLockMPAdminPaymetnsMenuItemPressed:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_MasterPage.model = window.scope_MasterPage.dehydrate();
        //
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel._lightCast(window.scope_MasterPage.model);
        // Joove.Common.applyScope(window.scope_MasterPage);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IMasterPageScope, $timeout: ng.ITimeoutService) {
        window.scope_MasterPage = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope._ready = false;
        window._context.currentMasterPageObject = this;
        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.MasterPage.MasterPageViewModel._initializeFrom($scope.model, context);
        $scope._validations = { summary:
                                [],
                              };

        let onSuccess = (data: any, textStatus: string, jqXhr: JQueryXHR)  => {
            Joove.Core.checkAppVersion();
            Joove.Core.handleServerResponse("MasterPage", data);
            this.init($scope, $timeout);
            //Joove.Common.applyScope($scope);
            //window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {
            $scope._ready = true;
            CLMS.Framework.Utilities.FocusOnFirstInputElementOfModal();
            //});
        }; //end onSuccess()

        window._backEndInfoAggregator.get(false, { success: onSuccess });

    }

    init($scope: IMasterPageScope, $timeout: ng.ITimeoutService) {


        $scope.trackObject = obj => Joove.Common.trackObject(obj);
        $scope.getRules = () => {
            {
                return window.$form._validations;
            }
        }
        $scope.getModelForDebugConsole = () => {
            {
                return Joove.Common.getModel();
            }
        }
        //}

        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("MasterPage", "Render", "GET", [], {}, _modalOptions);
            },
SignOut:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'MasterPage', action: 'SignOut',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
MainMenuHeaderMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMainMenuHeaderMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMainMenuHeaderMenuItemPressed);
                }

                this.timeoutDelayLockMainMenuHeaderMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("HomePage", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterHomePageMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterHomePageMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterHomePageMenuItemPressed);
                }

                this.timeoutDelayLockMasterHomePageMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("DashboardStatistics", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageUsersMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageUsersMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageUsersMenuItemPressed);
                }

                this.timeoutDelayLockManageUsersMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UsersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManagePermissionsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManagePermissionsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManagePermissionsMenuItemPressed);
                }

                this.timeoutDelayLockManagePermissionsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PermissionsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageRolesMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageRolesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageRolesMenuItemPressed);
                }

                this.timeoutDelayLockManageRolesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("RolesList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageOperationsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageOperationsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageOperationsMenuItemPressed);
                }

                this.timeoutDelayLockManageOperationsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("OperationsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ManageSettingsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockManageSettingsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockManageSettingsMenuItemPressed);
                }

                this.timeoutDelayLockManageSettingsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ApplicationSettingsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterChangePasswordMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterChangePasswordMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterChangePasswordMenuItemPressed);
                }

                this.timeoutDelayLockMasterChangePasswordMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ChangePassword", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterPreferencesMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterPreferencesMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterPreferencesMenuItemPressed);
                }

                this.timeoutDelayLockMasterPreferencesMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("UserPreferences", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignOutMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignOutMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignOutMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignOutMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignOutPage", "SignOut", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MasterSignInMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMasterSignInMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMasterSignInMenuItemPressed);
                }

                this.timeoutDelayLockMasterSignInMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignInPage", "Load", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPSignUpMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPSignUpMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPSignUpMenuItemPressed);
                }

                this.timeoutDelayLockMPSignUpMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SignUp", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPStatisticsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPStatisticsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPStatisticsMenuItemPressed);
                }

                this.timeoutDelayLockMPStatisticsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("DashboardNew", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPInvestorProfileMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPInvestorProfileMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPInvestorProfileMenuItemPressed);
                }

                this.timeoutDelayLockMPInvestorProfileMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("InvestorForm", "EditInvestor", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPPendingRegisteredMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPPendingRegisteredMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPPendingRegisteredMenuItemPressed);
                }

                this.timeoutDelayLockMPPendingRegisteredMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PendingRegisteredSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MIValidateSupMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMIValidateSupMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMIValidateSupMenuItemPressed);
                }

                this.timeoutDelayLockMIValidateSupMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PendingValidatedSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPPendingInvMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPPendingInvMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPPendingInvMenuItemPressed);
                }

                this.timeoutDelayLockMPPendingInvMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PendingInvestorsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPEditProfileMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPEditProfileMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPEditProfileMenuItemPressed);
                }

                this.timeoutDelayLockMPEditProfileMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierForm", "EditSupplier", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPValidatedSuppliersMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPValidatedSuppliersMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPValidatedSuppliersMenuItemPressed);
                }

                this.timeoutDelayLockMPValidatedSuppliersMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ValidatedSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPActiveSupMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPActiveSupMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPActiveSupMenuItemPressed);
                }

                this.timeoutDelayLockMPActiveSupMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("ActiveSuppliersList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

InvComAgreementsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockInvComAgreementsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockInvComAgreementsMenuItemPressed);
                }

                this.timeoutDelayLockInvComAgreementsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("InvestorCommercialAgreementsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPInvestorsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPInvestorsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPInvestorsMenuItemPressed);
                }

                this.timeoutDelayLockMPInvestorsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("InvestorsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPPaymentMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPPaymentMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPPaymentMenuItemPressed);
                }

                this.timeoutDelayLockMPPaymentMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PaymentForm", "AddPayment", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPAgreementsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPAgreementsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPAgreementsMenuItemPressed);
                }

                this.timeoutDelayLockMPAgreementsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("AgreementList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItemLekosMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItemLekosMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItemLekosMenuItemPressed);
                }

                this.timeoutDelayLockMenuItemLekosMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("DeveloperTools", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MenuItemRaymetricsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMenuItemRaymetricsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMenuItemRaymetricsMenuItemPressed);
                }

                this.timeoutDelayLockMenuItemRaymetricsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("DevTool", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPTransactionsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPTransactionsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPTransactionsMenuItemPressed);
                }

                this.timeoutDelayLockMPTransactionsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TransactionsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

HelpSectionMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockHelpSectionMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockHelpSectionMenuItemPressed);
                }

                this.timeoutDelayLockHelpSectionMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("HelpSectionForm", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPBuyerProfileMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPBuyerProfileMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPBuyerProfileMenuItemPressed);
                }

                this.timeoutDelayLockMPBuyerProfileMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("BuyerForm", "EditBuyer", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

AdminTransactionDocumentsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockAdminTransactionDocumentsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockAdminTransactionDocumentsMenuItemPressed);
                }

                this.timeoutDelayLockAdminTransactionDocumentsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("AdminTransactionsList", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

InvestorTransDocumentsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockInvestorTransDocumentsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockInvestorTransDocumentsMenuItemPressed);
                }

                this.timeoutDelayLockInvestorTransDocumentsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("InvestorTransactionsList", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPCommercialAgListMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPCommercialAgListMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPCommercialAgListMenuItemPressed);
                }

                this.timeoutDelayLockMPCommercialAgListMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("CommercialAgreementsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

IntermediaryTransactionListMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockIntermediaryTransactionListMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockIntermediaryTransactionListMenuItemPressed);
                }

                this.timeoutDelayLockIntermediaryTransactionListMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("IntermediaryTransactionList", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPSupPaymentsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPSupPaymentsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPSupPaymentsMenuItemPressed);
                }

                this.timeoutDelayLockMPSupPaymentsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TransactionPaymentsForm", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPBuyerPaymentsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPBuyerPaymentsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPBuyerPaymentsMenuItemPressed);
                }

                this.timeoutDelayLockMPBuyerPaymentsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("BuyerPaymentForm", "Render", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPClosedTransactionsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPClosedTransactionsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPClosedTransactionsMenuItemPressed);
                }

                this.timeoutDelayLockMPClosedTransactionsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("FinishedTransactionsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPSupplierPaymentsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPSupplierPaymentsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPSupplierPaymentsMenuItemPressed);
                }

                this.timeoutDelayLockMPSupplierPaymentsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierPaymentsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

MPAdminPaymetnsMenuItemPressed:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockMPAdminPaymetnsMenuItemPressed != null) {
                    $timeout.cancel(this.timeoutDelayLockMPAdminPaymetnsMenuItemPressed);
                }

                this.timeoutDelayLockMPAdminPaymetnsMenuItemPressed = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("AdminPaymentsList", "Retrieve", "GET", [], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(MasterPageDataValidations);
        window._ruleEngine.addConditionalFormattings(MasterPageConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(MasterPageCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];
    }
}
angular.module("Application").controller("MasterPageController", ["$scope", "$timeout", MasterPageController] as Array<string>);
}
