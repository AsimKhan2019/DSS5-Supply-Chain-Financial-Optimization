// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_DashboardStatistics: DSS5_SupplyChainFinancialsOptimisation.Controllers.IDashboardStatisticsScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const DashboardStatisticsConditionalFormattings = [
        ];
const DashboardStatisticsDataValidations = [
        ];
const DashboardStatisticsCalculatedExpressions = [
        ];

// Datasets Column Info
export var SupplierStatisticDataSet_ColumnInfo = [new Joove.ColumnInfo("Supplier.Company", "string", null, false),
           new Joove.ColumnInfo("DataAvailability", "int", null, false),
           new Joove.ColumnInfo("Supplier.UserName", "string", null, false)];
window["SupplierStatisticDataSet_ColumnInfo"] = SupplierStatisticDataSet_ColumnInfo;
export var SupplierStatisticDataSetOnTime_ColumnInfo = [new Joove.ColumnInfo("Supplier.Company", "string", null, false),
           new Joove.ColumnInfo("OnTimeDeliveries", "int", null, false),
           new Joove.ColumnInfo("AsOrderedDeliveries", "int", null, false),
           new Joove.ColumnInfo("InFullDeliveries", "int", null, false),
           new Joove.ColumnInfo("TotalImpeachments", "int", null, false)];
window["SupplierStatisticDataSetOnTime_ColumnInfo"] = SupplierStatisticDataSetOnTime_ColumnInfo;
export var SupplierTurnoverDataSet_ColumnInfo = [new Joove.ColumnInfo("Supplier.Company", "string", null, false),
           new Joove.ColumnInfo("CurrentTurnover", "decimal", null, false),
           new Joove.ColumnInfo("NextTurnover", "decimal", null, false),
           new Joove.ColumnInfo("PreviousTurnover", "decimal", null, false),
           new Joove.ColumnInfo("Supplier.UserName", "string", null, false)];
window["SupplierTurnoverDataSet_ColumnInfo"] = SupplierTurnoverDataSet_ColumnInfo;

// Datasets Projection Shemas
window["ChartDataAvailability1_ProjectionScema"] = {};
window["ChartDataAvailability_ProjectionScema"] = {};
window["Chart_ProjectionScema"] = {};
window["ChartTurnover_ProjectionScema"] = {};


export interface IDashboardStatisticsScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardStatistics.DashboardStatisticsViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class DashboardStatisticsController {
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockChartDataAvailability1Clicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockChartDataAvailabilityClicked:
    any;
private timeoutDelayLockChartTurnoverClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_DashboardStatistics.model = window.scope_DashboardStatistics.dehydrate();
        //window.scope_MasterPage.model = window.scope_DashboardStatistics.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardStatistics.DashboardStatisticsViewModel._lightCast(window.scope_DashboardStatistics.model);
        // Joove.Common.applyScope(window.scope_DashboardStatistics);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IDashboardStatisticsScope, $timeout: ng.ITimeoutService) {
        window.scope_DashboardStatistics = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardStatistics.DashboardStatisticsViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IDashboardStatisticsScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.DashboardStatistics.DashboardStatisticsViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
ChartDataAvailability1XScaleMin:
            () => 0,
            ChartDataAvailability1XScaleMax: () => 7,
                ChartDataAvailability1YScaleMin: () => 0,
                ChartDataAvailability1YScaleMax: () => 7,
                ChartDataAvailabilityXScaleMin: () => 0,
                ChartDataAvailabilityXScaleMax: () => 7,
                ChartDataAvailabilityYScaleMin: () => 0,
                ChartDataAvailabilityYScaleMax: () => 7,
                ChartYScaleMin: () => 0,
                ChartYScaleMax: () => 10,
                ChartYScaleStepSize: () => 1,
            }
// Dataset Handler
            $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
Render:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("DashboardStatistics", "Render", "GET", [], {}, _modalOptions);
            },
CloseModal:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                const implementation = async (): Promise<any> => {

                    // Joove.Common.applyScope(window.scope_DashboardStatistics);
                }

                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                let spamHelper = new Joove.SpamControlHelper(_e);
                spamHelper.Disable();
                await implementation();
                spamHelper.Enable();
                this.controllerActionFinished(true);
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PopUpChart", "Render", "GET", [], {}, { mode: 'PopUp', width: '50%', height: '50%', onClose: () => { $scope.actions.CloseModal(); }});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ChartDataAvailability1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockChartDataAvailability1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockChartDataAvailability1Clicked);
                }

                this.timeoutDelayLockChartDataAvailability1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierForm", "EditSupplier_", "GET", [Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItem($("[jb-id='ChartDataAvailability']"), e).Supplier.UserName, "")], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PopUpDataAvailability", "Render", "GET", [], {}, { mode: 'PopUp', width: '50%', height: '50%', onClose: () => { $scope.actions.CloseModal(); }});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ChartDataAvailabilityClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockChartDataAvailabilityClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockChartDataAvailabilityClicked);
                }

                this.timeoutDelayLockChartDataAvailabilityClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SupplierForm", "EditSupplier_", "GET", [Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItem($("[jb-id='ChartDataAvailability']"), e).Supplier.UserName, "")], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

ChartTurnoverClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockChartTurnoverClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockChartTurnoverClicked);
                }

                this.timeoutDelayLockChartTurnoverClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TurnoverForm", "RenderSupplier", "GET", [Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItem($("[jb-id='ChartTurnover']"), e).Supplier.UserName, "")], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(DashboardStatisticsDataValidations);
        window._ruleEngine.addConditionalFormattings(DashboardStatisticsConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(DashboardStatisticsCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("DashboardStatisticsController", ["$scope", "$timeout", DashboardStatisticsController] as Array<string>);
}
