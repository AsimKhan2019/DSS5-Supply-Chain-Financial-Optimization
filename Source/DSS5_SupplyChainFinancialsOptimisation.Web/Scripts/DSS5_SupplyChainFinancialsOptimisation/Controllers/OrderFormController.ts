// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 27 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdExitClicked(e);
    }
});
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_OrderForm: DSS5_SupplyChainFinancialsOptimisation.Controllers.IOrderFormScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const OrderFormConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "AddOrder", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ConditionalFormattingConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.CommercialAgreement, null) == null;

    },
evaluationTimes: [],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideCertificateIfRecurringConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.CommercialAgreement.Supplier.Business, "") == "Reccuring";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "ShowProductButtonConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return CLMS.Framework.Number.GreaterThan(() => window["scope_OrderForm"].model.SupplierProducts.length, () => 0);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfEditConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "EditOrder", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "IfFinalOrderedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderStatus.FinalOrdered, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIntermidiaryConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.IntermediateParty, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfNotNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "NewOrder", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideStandardsConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentUsername, "") == "Supplier25" || Joove.Common.nullSafe<any>(() => window._context.currentUsername, "") == "Supplier15";

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "UploadConfirmedConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.UploadConfirmed, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableConfirmUploadConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.CSVPath, "")), false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableGridConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: 'OrderProductGrid',

getContext: (indexes) => { var model = window["scope_OrderForm"].model; var parents = []; try { parents.push(model.Order.OrderProducts); } catch(e) {
            parents.push({});
        } return parents;
    },
condition: async (_parents) => { return Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.IsSupplier, false);

    },
evaluationTimes: [],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "DisableFormConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return !(Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.IsSupplier, false));

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
                                        ];
const OrderFormDataValidations = [
                                 ];
const OrderFormCalculatedExpressions = [
new Joove.JbRule({
name: "LineAmount",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((CLMS.Framework.Number.Equal(() => _parents[0].Quantity, () => 0))) {
            return 0;
        } else {
            return Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => _parents[0].Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => _parents[0].Price, 0));
        }


    },
getContext: (indexes) => { var model = window.scope_OrderForm.model; var parents = []; try { parents.push(model.Order.OrderProducts); } catch(e) {
            parents.push({});
        } return parents;
    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "OrderTotalPrice",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null) == null)) {
            return 0;
        } else {
            let total = 0;
            for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null).length); _iproduct++) {
                var product = Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null)[_iproduct];
                if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                    continue;
                }
                total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Price, 0))));
            }
            return total;
        }


    },

evaluationTimes: [],
}),
new Joove.JbRule({
name: "OrderProductsAmount",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null) == null)) {
            return 0;
        } else {
            let totalProducts = 0;
            for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null).length); _iproduct++) {
                var product = Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null)[_iproduct];
                if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                    continue;
                }
                totalProducts = Joove.Common.safeNumber(totalProducts) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0));
            }
            return totalProducts;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
new Joove.JbRule({
name: "TotalPriceIfProductsNull",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((true)) {
            if ((CLMS.Framework.Number.GreaterThan(() => window["scope_OrderForm"].model.Order.OrderProducts.length, () => 0))) {
                let total = 0;
                for (let _iproduct = 0; _iproduct < (Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null) == null ? 0 : Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null).length); _iproduct++) {
                    var product = Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.OrderProducts, null)[_iproduct];
                    if ((CLMS.Framework.Number.Equal(() => product.Quantity, () => 0))) {
                        continue;
                    }
                    total = Joove.Common.safeNumber(total) + Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Quantity, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => product.Price, 0))));
                }
                window["scope_OrderForm"].model.Order.TotalPrice = total;
            }
            return "";
        } else {
            return null;
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
                                       ];

// Datasets Column Info
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Company",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Company", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;
var PickList1_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Description",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "Description", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "decimal",
dataTypeIsEnum: false,
name: "Price",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "Price", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList1_ColumnInfo"] = PickList1_ColumnInfo;

// Datasets Projection Shemas
window["PickList_ProjectionScema"] = {};
window["PickList1_ProjectionScema"] = {};
window["ImageBox_ProjectionScema"] = {OrderStandardPhoto:
                                      {}
                                     };
window["FileAttachmentOrder_ProjectionScema"] = {Order:
                                                 {Id: ''
                                                         , OrderAttachment:
                                                         {}
                                                 }
                                                };
window["FileAttachment_ProjectionScema"] = {CSVPath:
                                            {}
                                           };
window["FileAttachment2_ProjectionScema"] = {OrderStandardPath:
                                             {}
                                            };
window["FileAttachment1_ProjectionScema"] = {Order:
                                             {Id: ''
                                                     , FinalAcceptanceCertificate:
                                                     {Id: ''
                                                             , Certificate:
                                                             {}
                                                     }
                                             }
                                            };


export interface IOrderFormScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.OrderForm.OrderFormViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class OrderFormController {
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockButton3Clicked:
    any;
private timeoutDelayLockbtnMapClicked:
    any;
private timeoutDelayLockButton6Clicked:
    any;
private timeoutDelayLockButton4Clicked:
    any;
private timeoutDelayLockButton5Clicked:
    any;
private timeoutDelayLockButton1Clicked:
    any;
private timeoutDelayLockButton2Clicked:
    any;
private timeoutDelayLockcmdDeleteOrderClicked:
    any;
private timeoutDelayLockcmdExitClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_OrderForm.model = window.scope_OrderForm.dehydrate();
        //window.scope_MasterPage.model = window.scope_OrderForm.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.OrderForm.OrderFormViewModel._lightCast(window.scope_OrderForm.model);
        // Joove.Common.applyScope(window.scope_OrderForm);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IOrderFormScope, $timeout: ng.ITimeoutService) {
        window.scope_OrderForm = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.OrderForm.OrderFormViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IOrderFormScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.OrderForm.OrderFormViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
AddOrder:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("OrderForm", "AddOrder", "GET", [], {}, _modalOptions);
            },
EditOrder:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("OrderForm", "EditOrder", "GET", [id], {}, _modalOptions);
            },
SaveOrder:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'SaveOrder',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteOrder:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'DeleteOrder',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
CloseMod:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'CloseMod',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
newOrderProduct:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'newOrderProduct',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
insertProducts:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'insertProducts',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
NewOrder:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("OrderForm", "NewOrder", "GET", [id], {}, _modalOptions);
            },
SaveAsDraft:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'SaveAsDraft',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
FinalSave:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'FinalSave',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
ImportFromCSV:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'ImportFromCSV',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
SubmitChanges:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'SubmitChanges',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Exit:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'Exit',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
Test:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'OrderForm', action: 'Test',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
                        if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TransactionForm", "EditTransaction", "GET", [Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.Transaction.Id, 0)], null, null, openInNewWindow);
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button3Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton3Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton3Clicked);
                }

                this.timeoutDelayLockButton3Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("SlideIntermidiary", "Render", "GET", [], {}, { mode: 'Slide', width: '80%', height: '80%'});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

btnMapClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockbtnMapClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockbtnMapClicked);
                }

                this.timeoutDelayLockbtnMapClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("TrackingMapForm", "Render", "GET", [Joove.Common.nullSafe<any>(() => window["scope_OrderForm"].model.Order.Id, 0)], {}, { mode: 'Slide', width: '80%', height: '80%', onClose: () => { $scope.actions.CloseMod(); }});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

Button6Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton6Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton6Clicked);
                }

                this.timeoutDelayLockButton6Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SubmitChanges(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button4Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton4Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton4Clicked);
                }

                this.timeoutDelayLockButton4Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.ImportFromCSV(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button5Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton5Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton5Clicked);
                }

                this.timeoutDelayLockButton5Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.insertProducts(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button1Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton1Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton1Clicked);
                }

                this.timeoutDelayLockButton1Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveAsDraft(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

Button2Clicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButton2Clicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButton2Clicked);
                }

                this.timeoutDelayLockButton2Clicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.FinalSave(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeleteOrderClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteOrderClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteOrderClicked);
                }

                this.timeoutDelayLockcmdDeleteOrderClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);
                    window._popUpManager.question(window._resourcesManager.getGlobalResource("RES_WEBFORM_GenericConfirmationQuestion"),
                    window._resourcesManager.getEventConfirmation("cmdDeleteOrder", false), (isConfirm) => {
                        if (!isConfirm) return;

                        setTimeout(() => {

                            Joove.Validation.Manager.validateFormAndExecute(() => {
                                $scope.actions.DeleteOrder(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                        }, 1000);
                    });
                }, 0);
            },

cmdExitClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdExitClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdExitClicked);
                }

                this.timeoutDelayLockcmdExitClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.Exit(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

        };

// Rules
        window._ruleEngine.addDataValidations(OrderFormDataValidations);
        window._ruleEngine.addConditionalFormattings(OrderFormConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(OrderFormCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("OrderFormController", ["$scope", "$timeout", OrderFormController] as Array<string>);
}
