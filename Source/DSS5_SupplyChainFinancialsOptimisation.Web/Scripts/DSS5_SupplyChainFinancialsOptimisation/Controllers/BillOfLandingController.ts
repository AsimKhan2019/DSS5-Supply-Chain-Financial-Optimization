// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var directiveScopeReadyLimit = 10;
var directiveScopeReadyTimeout = 200;
$(document).keyup((e) => {
    if (e.which === 13 && Joove.Common.eventPreventsDefaultFormAction(e as JQueryEventObject) === false && !$(e.target).parent().hasClass("search-element")) {
        window._popUpManager.previouslyFocusedElement = document.activeElement;
        $(":focus").blur();
        Joove.Core.getScope().eventCallbacks.cmdBillOfLandingSaveClicked(e);
    }
});
window.onbeforeunload = (e) => {
    if (window._context.isDirty) {
        var msg = window._resourcesManager.getGlobalResource("RES_WEBFORM_DirtyMessage");
        e.returnValue = msg;     // Gecko, Trident, Chrome 34+
        return msg;
    }
};
interface Window { scope_BillOfLanding: DSS5_SupplyChainFinancialsOptimisation.Controllers.IBillOfLandingScope; }
namespace DSS5_SupplyChainFinancialsOptimisation.Controllers {
const BillOfLandingConditionalFormattings = [
new Joove.JbRule({
name: "HideIfNewConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window._context.currentAction == "AddBillOfLanding", false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad],
isRelatedToDataValidation: false
}),
new Joove.JbRule({
name: "HideIfBuyerReceivingConditional",
type: Joove.RuleTypes.ConditionalFormatting,
isDataSetRule: false,
evaluatedAtServer: false,
contextControlName: null,


condition: async (_parents) => {
        return Joove.Common.nullSafe<any>(() => window["scope_BillOfLanding"].model.BillOfLanding.IsBuyerReceiving, false);

    },
evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnChange],
isRelatedToDataValidation: false
}),
        ];
const BillOfLandingDataValidations = [
                                     ];
const BillOfLandingCalculatedExpressions = [
new Joove.JbRule({
name: "CalculateReceiverId",
type: Joove.RuleTypes.CalculatedExpression,
evaluatedAtServer: false,
isDataSetRule: false,

condition: async function(_control) {
        return true;
    },
expression: async function(_parents) {
        if ((Joove.Common.nullSafe<any>(() => window["scope_BillOfLanding"].model.BillOfLanding.IsBuyerReceiving, false))) {
            return Joove.Common.nullSafe<any>(() => window["scope_BillOfLanding"].model.BillOfLanding.Transaction.ImportedBuyer.Id, 0);
        } else {
            return Joove.Common.nullSafe<any>(() => window["scope_BillOfLanding"].model.ChoosenIntermediary.Id, 0);
        }


    },

evaluationTimes: [Joove.EvaluationTimes.OnLoad,Joove.EvaluationTimes.OnSubmit,Joove.EvaluationTimes.OnChange],
}),
        ];

// Datasets Column Info
var PickList1_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "OrderNumber",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "OrderNumber", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "DateTime",
dataTypeIsEnum: false,
name: "DateOfOrder",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "DateOfOrder", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: { 'dateFormat': 'DD/MM/YYYY', 'backEndFormatting': 'dd/MM/yyyy' , 'excelFormat': 'dd/MM/yyyy' },
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "decimal",
dataTypeIsEnum: false,
name: "OrderAmount",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "OrderAmount", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "decimal",
dataTypeIsEnum: false,
name: "TotalPrice",
caption: window._resourcesManager.getDataListColumnCaption("PickList1", "TotalPrice", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
length: null,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList1_ColumnInfo"] = PickList1_ColumnInfo;
var PickList_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "Company",
caption: window._resourcesManager.getDataListColumnCaption("PickList", "Company", true),
groupable: true,
searchable: true,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["PickList_ColumnInfo"] = PickList_ColumnInfo;
var btnSelectMeanOfTransport_ColumnInfo = [
new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "LicensePlate",
caption: window._resourcesManager.getDataListColumnCaption("btnSelectMeanOfTransport", "LicensePlate", true),
groupable: true,
searchable: false,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ContainerId",
caption: window._resourcesManager.getDataListColumnCaption("btnSelectMeanOfTransport", "ContainerId", true),
groupable: true,
searchable: false,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "ShipId",
caption: window._resourcesManager.getDataListColumnCaption("btnSelectMeanOfTransport", "ShipId", true),
groupable: true,
searchable: false,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
}),

new Joove.Widgets.DataListColumnInfo({
dataType: "string",
dataTypeIsEnum: false,
name: "TrainId",
caption: window._resourcesManager.getDataListColumnCaption("btnSelectMeanOfTransport", "TrainId", true),
groupable: true,
searchable: false,
visible: true,
orderable: true,
editable: false,
style: "",
classes: "",
itemType: Joove.Widgets.DataListColumnItemType.TEXTBOX,
importable: false,
supportsAggregators: true,
    length: 100,
formatting: null,
width: null,
css: "",
isEncrypted: false,
showFullImage: false
})] as any;
window["btnSelectMeanOfTransport_ColumnInfo"] = btnSelectMeanOfTransport_ColumnInfo;

// Datasets Projection Shemas
window["PickList1_ProjectionScema"] = {TransactionId:
                                       {}
                                      };
window["PickList_ProjectionScema"] = {TransactionId:
                                      {}
                                     };
window["btnSelectMeanOfTransport_ProjectionScema"] = {};


export interface IBillOfLandingScope extends Joove.IWebPageScope {
model:
    DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.BillOfLandingViewModel;
_partialModelStructure:
    any;
    _validations?: {
summary: Array<Joove.Validation.BindingEntry>,

    },
    _masterValidations?: any;
}

class BillOfLandingController {
private timeoutDelayLockPickList1OnChange:
    any;
private timeoutDelayLockButtonClicked:
    any;
private timeoutDelayLockcmdBillOfLandingSaveClicked:
    any;
private timeoutDelayLockcmdDeleteBillOfLandingClicked:
    any;
private timeoutDelayLockcmdExitClicked:
    any;


    private controllerActionFinished = (resetDirty: boolean) => {
        //window.scope_BillOfLanding.model = window.scope_BillOfLanding.dehydrate();
        //window.scope_MasterPage.model = window.scope_BillOfLanding.model;
        DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.BillOfLandingViewModel._lightCast(window.scope_BillOfLanding.model);
        // Joove.Common.applyScope(window.scope_BillOfLanding);
        if (resetDirty) {
            window._context.isDirty = false;
        }
        window._ruleEngine.update(Joove.EvaluationTimes.OnChange);
    }

    constructor(private $scope: IBillOfLandingScope, $timeout: ng.ITimeoutService) {
        window.scope_BillOfLanding = $scope;
        $scope.$onControlChanged = function (event, newValue, dontMakeDirty) {
            Joove.Core.onChange(event.target, newValue, dontMakeDirty)
        }

        $scope.dehydrate = (context = null) => DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.BillOfLandingViewModel._initializeFrom($scope.model, context);
        $scope._validationsMaster =  window.scope_MasterPage._validations;
        $scope._validations = { summary:
                                [],
                              };

        this.init($scope, $timeout);
        $timeout(() => {

            window._ruleEngine.update(Joove.EvaluationTimes.OnLoad, null, () => {

                $("body").fadeIn(200);

            });
        });

    }

    init($scope: IBillOfLandingScope, $timeout: ng.ITimeoutService) {


        $scope.model = DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.BillOfLandingViewModel._initializeFrom(window.viewDTO.Model);

        window.scope_MasterPage.model = $scope.model;

        new Joove.ReferencesReconstructor().reconstructReferences($scope.model);
        $scope.trackObject = obj => Joove.Common.trackObject(obj);


        //}

        $.connection['eventsHub'].on('__connectedEvent');

        $.connection['eventsHub'].on('forcePageReload', () => {
            window.onbeforeunload = null;
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        });
        $.connection.hub.start(() => {
            Joove.Common.getScope().connectedToSignals();
            Joove.Common.getMasterScope().connectedToSignals();

        });
        $scope.connectedToSignals = () => {
        }
// Event Listeners
        $scope.events = {
        };
        $scope.expressions = {
        }
// Dataset Handler
        $scope.datasets = {
        };
// Controller actions
        $scope.actions = {
AddBillOfLanding:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("BillOfLanding", "AddBillOfLanding", "GET", [], {}, _modalOptions);
            },
EditBillOfLanding:
            async (id, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("BillOfLanding", "EditBillOfLanding", "GET", [id], {}, _modalOptions);
            },
SaveBillOfLanding:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'BillOfLanding', action: 'SaveBillOfLanding',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
DeleteBillOfLanding:
            async (_cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'BillOfLanding', action: 'DeleteBillOfLanding',
queryData: [], postData: {'model': $scope.model},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
NewBillOfLanding:
            async (transactionId, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();


                Joove.Core.executeRedirectControllerAction("BillOfLanding", "NewBillOfLanding", "GET", [transactionId], {}, _modalOptions);
            },
OnOrderSelected:
            async (orders, _cb, _modalOptions, _e) => {
                Joove.Common.autocompleteFix();
                await window._ruleEngine.update(Joove.EvaluationTimes.OnSubmit);

                window._context.isDirty = false;
                Joove.Core.executeControllerActionNew({
verb: 'POST', controller: 'BillOfLanding', action: 'OnOrderSelected',
queryData: [], postData: {'model': $scope.model, 'orders': orders},
cb: _cb, modalOptions: _modalOptions, event: _e
                });
            },
        };
// Events
        $scope.eventCallbacks = {
PickList1OnChange:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);


                if (this.timeoutDelayLockPickList1OnChange != null) {
                    $timeout.cancel(this.timeoutDelayLockPickList1OnChange);
                }

                this.timeoutDelayLockPickList1OnChange = $timeout(() => {

                    if (e.target) {
                        Joove.Core.onChange(e.target, null, false);
                    } else {
                        Joove.Core.onChange($(`[jb-id='${e}']`).get(0), null, false);
                    }


                    Joove.Validation.Manager.validateFormAndExecute(() => {

                        var p_FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel = Joove.Common.nullSafe<any>(() => Joove.DatasourceManager.getSelectedItems($("[jb-id='PickList1']"), e), null);
                        if( eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel`) != null && eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel._initializeFrom`) != null ) {
                            var _initial = p_FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel;
                            p_FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel = [];
                            for(var _i = 0; _i < _initial.length; _i++) {
                                var _temp = eval(`DSS5_SupplyChainFinancialsOptimisation.ViewModels.BillOfLanding.FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel._initializeFrom(_initial[_i])`);
                                p_FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel.push(_temp);

                            }
                        }
                        $scope.actions.OnOrderSelected(p_FormControls_BillOfLanding_FormControlsDefinition_PickList1_PickListControl_SelectedItems_OrderViewModel, null, null, e);
                    }, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: false });
                }, 0);
            },

ButtonClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockButtonClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockButtonClicked);
                }

                this.timeoutDelayLockButtonClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        //This is true only when the menu item is clicked programmatically
                        //and occurs when the middle mouse button click is triggered
                        var openInNewWindow = $(e.target).data("openInNewWindow") === true || undefined;
if (openInNewWindow) $(e.target).data("openInNewWindow", undefined); Joove.Core.executeRedirectControllerAction("PartialProofOfDeliveryForm", "NewPPOD", "GET", [Joove.Common.nullSafe<any>(() => window["scope_BillOfLanding"].model.TransactionId, 0)], {}, { mode: 'Slide', width: '80%', height: '80%'});
}, { groups: [], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

cmdBillOfLandingSaveClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdBillOfLandingSaveClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdBillOfLandingSaveClicked);
                }

                this.timeoutDelayLockcmdBillOfLandingSaveClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.SaveBillOfLanding(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: true, withRequiredFieldsCheck: true });
                }, 0);
            },

cmdDeleteBillOfLandingClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                if (this.timeoutDelayLockcmdDeleteBillOfLandingClicked != null) {
                    $timeout.cancel(this.timeoutDelayLockcmdDeleteBillOfLandingClicked);
                }

                this.timeoutDelayLockcmdDeleteBillOfLandingClicked = $timeout(() => {
                    Joove.Common.setControlKeyPressed(e, 0); Joove.Common.setLastClickedElement(e);

                    Joove.Validation.Manager.validateFormAndExecute(() => {
                        $scope.actions.DeleteBillOfLanding(null, null, e);
}, { groups: [Joove.Validation.Constants.ALL_GROUPS], withDataValidationsCheck: false, withRequiredFieldsCheck: false });
                }, 0);
            },

cmdExitClicked:
            (e, DataItem, _parents) => {
                window._recorder.addState(e);

                if (e != null) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                Joove.Common.setControlKeyPressed(e, 0);
                window._commander.closeForm();
            },

        };

// Rules
        window._ruleEngine.addDataValidations(BillOfLandingDataValidations);
        window._ruleEngine.addConditionalFormattings(BillOfLandingConditionalFormattings);
        window._ruleEngine.addCalculatedExpressions(BillOfLandingCalculatedExpressions);

        window._commander.executeCommands(window.viewDTO.ClientCommands);
        window.viewDTO.ClientCommands = [];

        Joove.Common.setNumberLocalizationSettings();
        Joove.DeveloperApi.init($scope as any, window.scope_MasterPage as any);
        window.$formExtend && window.$formExtend();
        window.$onFormLoaded && window.$onFormLoaded();
    }
}
angular.module("Application").controller("BillOfLandingController", ["$scope", "$timeout", BillOfLandingController] as Array<string>);
}
