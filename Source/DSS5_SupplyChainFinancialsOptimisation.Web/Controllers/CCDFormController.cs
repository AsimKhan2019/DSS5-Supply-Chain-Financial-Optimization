// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CCDForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.CCDForm
{

    [RoutePrefix("CCDForm")]
    public class CCDFormController : ControllerBase<CCDFormViewModel, CCDFormViewModelDTO>
    {

        /*<Form:CCDForm:0/>*/
        public CCDFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(CCDFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(CCDFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(CCDFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddCustomsClearingDocumentation")]
        public ActionResult AddCustomsClearingDocumentation()

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "AddCustomsClearingDocumentation";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddCustomsClearingDocumentation")]
        public ActionResult _API_AddCustomsClearingDocumentation()

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "AddCustomsClearingDocumentation";
            PushToHistory();
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddCustomsClearingDocumentation();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditCustomsClearingDocumentation/{*id:int?}")]
        public ActionResult EditCustomsClearingDocumentation(int? id)

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "EditCustomsClearingDocumentation";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditCustomsClearingDocumentation/{*id:int?}")]
        public ActionResult _API_EditCustomsClearingDocumentation(int? id)

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "EditCustomsClearingDocumentation";
            PushToHistory();
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditCustomsClearingDocumentation(id);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveCustomsClearingDocumentation")]
        public ActionResult SaveCustomsClearingDocumentation()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteSaveCustomsClearingDocumentation();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="DeleteCustomsClearingDocumentation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteCustomsClearingDocumentation")]
        public ActionResult DeleteCustomsClearingDocumentation()

        {
            var _data = _LoadViewModel();
            var redirectInfo = ExecuteDeleteCustomsClearingDocumentation();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="NewCCD", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("NewCCD/{*transactionId:int?}")]
        public ActionResult NewCCD(int? transactionId)

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "NewCCD";
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="NewCCD", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_NewCCD/{*transactionId:int?}")]
        public ActionResult _API_NewCCD(int? transactionId)

        {
            @model = new CCDFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_CCDForm"] = "NewCCD";
            PushToHistory();
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteNewCCD(transactionId);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddCustomsClearingDocumentation:1/>*/
        public ActionResult ExecuteAddCustomsClearingDocumentation()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:EditCustomsClearingDocumentation:1/>*/
        public ActionResult ExecuteEditCustomsClearingDocumentation(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.CustomsClearingDocumentation =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CustomsClearingDocumentation>(id);
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:SaveCustomsClearingDocumentation:1/>*/
        public ActionResult ExecuteSaveCustomsClearingDocumentation()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.CustomsClearingDocumentation>(@model.CustomsClearingDocumentation);
            @model.Title = "";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:DeleteCustomsClearingDocumentation:1/>*/
        public ActionResult ExecuteDeleteCustomsClearingDocumentation()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteCustomsClearingDocumentation(@model.CustomsClearingDocumentation);
            @model.Title = "";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:NewCCD:1/>*/
        public ActionResult ExecuteNewCCD(int? transactionId)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.CustomsClearingDocumentation.Transaction =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(transactionId);
            @model.CustomsClearingDocumentation.BuyerName = (@model.CustomsClearingDocumentation?.Transaction?.ImportedBuyer?.Company ?? "");
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:CCDForm_TransactionDataSource:1/>*/
        /*<DataSourceFilter:CCDForm_TransactionDataSource:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction> Get_CCDForm_TransactionDataSource_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_CCDForm_TransactionDataSource_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction> Get_CCDForm_TransactionDataSource_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:CCDForm_TransactionDataSource:1/>*/

        [HttpPost]
        [Route("CCDForm_TransactionDataSource_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "TransactionDataSource", ClaimType = ClaimTypes.Dataset)]
        public JsonResult CCDForm_TransactionDataSource_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_CCDForm_TransactionDataSource_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new TransactionDataSource_TransactionDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(CCDFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "CCDForm_TransactionDataSource");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:CCDForm_TransactionDataSource:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "TransactionDataSource", ClaimType = ClaimTypes.Dataset)]
        [Route("CCDForm_TransactionDataSource_Datasource")]
        public JsonResult CCDForm_TransactionDataSource_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_CCDForm_TransactionDataSource_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_CCDForm_TransactionDataSource_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_CCDForm_TransactionDataSource_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_CCDForm_TransactionDataSource_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new CCDFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("CCDForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: CCDForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
