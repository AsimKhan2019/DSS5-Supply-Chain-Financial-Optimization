// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.InvestorForm
{

    [RoutePrefix("InvestorForm")]
    public class InvestorFormController : ControllerBase<InvestorFormViewModel, InvestorFormViewModelDTO>
    {

        /*<Form:InvestorForm:0/>*/
        public InvestorFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(InvestorFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(InvestorFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("InvestorForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("InvestorForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(InvestorFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("InvestorForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddInvestor")]
        public ActionResult AddInvestor()

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "AddInvestor";
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddInvestor")]
        public ActionResult _API_AddInvestor()

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "AddInvestor";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddInvestor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditInvestor")]
        public ActionResult EditInvestor()

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "EditInvestor";
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditInvestor")]
        public ActionResult _API_EditInvestor()

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "EditInvestor";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditInvestor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveInvestor")]
        public ActionResult SaveInvestor()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("InvestorForm", @model);
            var redirectInfo = ExecuteSaveInvestor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="DeleteInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteInvestor")]
        public ActionResult DeleteInvestor()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("InvestorForm", @model);
            var redirectInfo = ExecuteDeleteInvestor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="InterestedInInvestor", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("InterestedInInvestor")]
        public ActionResult InterestedInInvestor()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("InvestorForm", @model);
            var redirectInfo = ExecuteInterestedInInvestor();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="EditInvestor_", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditInvestor_/{*username?}")]
        public ActionResult EditInvestor_(string username)

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "EditInvestor_";
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="EditInvestor_", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditInvestor_/{*username?}")]
        public ActionResult _API_EditInvestor_(string username)

        {
            @model = new InvestorFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_InvestorForm"] = "EditInvestor_";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("InvestorForm");
            FileHelper.PendingDownloadInstance.Clear("InvestorForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditInvestor_(username);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="RequestValidation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RequestValidation")]
        public ActionResult RequestValidation()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("InvestorForm", @model);
            var redirectInfo = ExecuteRequestValidation();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddInvestor:1/>*/
        public ActionResult ExecuteAddInvestor()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:EditInvestor:1/>*/
        public ActionResult ExecuteEditInvestor()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Investor = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            @model.Title = "Please fill your profile details";
            return _result;
        }
        /*<ControllerActionImplementation:SaveInvestor:1/>*/
        public ActionResult ExecuteSaveInvestor()
        {
            ActionResult _result = null;
            if (@model.Investor?.DomainFocus == "Mixed")
            {
                @model.Investor.DomainFocus = @model.DomainFocus;
            }
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(@model.Investor);
            @model.Title = "";
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Profile saved successfully!");
            return _result;
        }
        /*<ControllerActionImplementation:DeleteInvestor:1/>*/
        public ActionResult ExecuteDeleteInvestor()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteInvestor(@model.Investor);
            @model.Title = "";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:InterestedInInvestor:1/>*/
        public ActionResult ExecuteInterestedInInvestor()
        {
            ActionResult _result = null;
            DSS5_SupplyChainFinancialsOptimisation.BO.Agreement newAgreement = new DSS5_SupplyChainFinancialsOptimisation.BO.Agreement();
            DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus newStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus();
            newStatus.Status = "Interested";
            newStatus.ProvidedBy = "Supplier";
            newStatus.DateOccured = DateTime.UtcNow;
            newAgreement?.AddAgreementStatus(newStatus);
            if ((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("ValidatedSupplier") ?? false) || (zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("ActiveSupplier") ?? false))
            {
                DSS5_SupplyChainFinancialsOptimisation.BO.Supplier newSup =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
                newAgreement.Supplier = newSup;
            }
            newAgreement.Investor = new DSS5_SupplyChainFinancialsOptimisation.BO.Investor();
            newAgreement.Investor = @model.Investor;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(newAgreement);
            System.Collections.Generic.List<string> recipients = new System.Collections.Generic.List<string>();
            recipients.Add((@model.Investor?.Email ?? ""));
            zAppDev.DotNet.Framework.Utilities.EMailMessage em = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            em.Subject = "New Agreement";
            em.Body = "A new Agreement is created" + "Please edit the Agreement.";
            em.To = recipients.Distinct().ToList().ToList();
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(em, true);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "New Agreement created.");
            return _result;
        }
        /*<ControllerActionImplementation:EditInvestor_:1/>*/
        public ActionResult ExecuteEditInvestor_(string username)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Investor = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>((a) => a.UserName == username)?.FirstOrDefault();
            @model.Title = "Investor's profile";
            return _result;
        }
        /*<ControllerActionImplementation:RequestValidation:1/>*/
        public ActionResult ExecuteRequestValidation()
        {
            ActionResult _result = null;
            @model.Investor = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            @model.Investor.Roles = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Get<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>((b) => b.Name == "PendingInvestor").ToList();
            @model.Investor.InvestorStatus = "PendingInvestor";
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(@model.Investor);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Wait for Validation from the Administrator");
            zAppDev.DotNet.Framework.Identity.Model.ApplicationUser administrator = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>((a) => a.UserName == "Administrator")?.FirstOrDefault();
            zAppDev.DotNet.Framework.Utilities.EMailMessage email = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            email.To = new List<string> { (administrator?.Email ?? "") } .ToList();
            email.Subject = "Account Validation";
            email.Body = "An Investor has requested Validation";
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(email, true);
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:txtDomainFocus:1/>*/

        /*<Datasource:InvestorForm_ProfileDataSource:1/>*/
        /*<DataSourceFilter:InvestorForm_ProfileDataSource:2/>*/
        public IQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile> Get_InvestorForm_ProfileDataSource_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_InvestorForm_ProfileDataSource_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile> Get_InvestorForm_ProfileDataSource_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:InvestorForm_ProfileDataSource:1/>*/

        [HttpPost]
        [Route("InvestorForm_ProfileDataSource_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProfileDataSource", ClaimType = ClaimTypes.Dataset)]
        public JsonResult InvestorForm_ProfileDataSource_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_InvestorForm_ProfileDataSource_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ProfileDataSource_ProfileDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(InvestorFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "InvestorForm_ProfileDataSource");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:InvestorForm_ProfileDataSource:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProfileDataSource", ClaimType = ClaimTypes.Dataset)]
        [Route("InvestorForm_ProfileDataSource_Datasource")]
        public JsonResult InvestorForm_ProfileDataSource_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_InvestorForm_ProfileDataSource_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_ProfileDataSource_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_ProfileDataSource_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_ProfileDataSource_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<zAppDev.DotNet.Framework.Identity.Model.Profile>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:InvestorForm_DomainFocusChoices:1/>*/
        /*<DataSourceFilter:InvestorForm_DomainFocusChoices:2/>*/
        public IQueryable<string> Get_InvestorForm_DomainFocusChoices_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_InvestorForm_DomainFocusChoices_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<string> Get_InvestorForm_DomainFocusChoices_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS5_SupplyChainFinancialsOptimisation.BO.InvestorExtensions.GetDomainFocusOptions(@model.Investor).AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:InvestorForm_DomainFocusChoices:1/>*/

        [HttpPost]
        [Route("InvestorForm_DomainFocusChoices_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DomainFocusChoices", ClaimType = ClaimTypes.Dataset)]
        public JsonResult InvestorForm_DomainFocusChoices_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_InvestorForm_DomainFocusChoices_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(items)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:InvestorForm_DomainFocusChoices:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "DomainFocusChoices", ClaimType = ClaimTypes.Dataset)]
        [Route("InvestorForm_DomainFocusChoices_Datasource")]
        public JsonResult InvestorForm_DomainFocusChoices_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_InvestorForm_DomainFocusChoices_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_DomainFocusChoices_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_DomainFocusChoices_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_InvestorForm_DomainFocusChoices_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new
                {
                    _key = i
                }).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new
                {
                    _key = i
                }).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileAttachment_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as InvestorFormViewModel;
                    return  Path.GetFileName(@model.Investor.UploadCompliance);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("InvestorForm", "FileAttachment", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("InvestorForm", Get_FileAttachment_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("InvestorForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.Investor.UploadCompliance
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "InvestorForm", "FileAttachment", indexes);
            pendingFile.GetRelativePath = Get_FileAttachment_RelativePath;
            @model.Investor.UploadCompliance = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachment_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("InvestorForm", "FileAttachment", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("InvestorForm", "FileAttachment", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.Investor.UploadCompliance = null;
            IsDirty = true;
            viewDTO.Model = new InvestorFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new InvestorFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("InvestorForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: InvestorForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
