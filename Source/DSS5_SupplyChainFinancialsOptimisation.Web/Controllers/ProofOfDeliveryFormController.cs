// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.ProofOfDeliveryForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.ProofOfDeliveryForm
{

    [RoutePrefix("ProofOfDeliveryForm")]
    public class ProofOfDeliveryFormController : ControllerBase<ProofOfDeliveryFormViewModel, ProofOfDeliveryFormViewModelDTO>
    {

        /*<Form:ProofOfDeliveryForm:0/>*/
        public ProofOfDeliveryFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(ProofOfDeliveryFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(ProofOfDeliveryFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("ProofOfDeliveryForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("ProofOfDeliveryForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(ProofOfDeliveryFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("ProofOfDeliveryForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "ProofOfDeliveryForm");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "ProofOfDeliveryForm");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "ProofOfDeliveryForm");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddProofOfDelivery")]
        public ActionResult AddProofOfDelivery()

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "AddProofOfDelivery";
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddProofOfDelivery")]
        public ActionResult _API_AddProofOfDelivery()

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "AddProofOfDelivery";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddProofOfDelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditProofOfDelivery/{*id:int?}")]
        public ActionResult EditProofOfDelivery(int? id)

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "EditProofOfDelivery";
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditProofOfDelivery/{*id:int?}")]
        public ActionResult _API_EditProofOfDelivery(int? id)

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "EditProofOfDelivery";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditProofOfDelivery(id);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveProofOfDelivery")]
        public ActionResult SaveProofOfDelivery()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("ProofOfDeliveryForm", @model);
            var redirectInfo = ExecuteSaveProofOfDelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="DeleteProofOfDelivery", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteProofOfDelivery")]
        public ActionResult DeleteProofOfDelivery()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("ProofOfDeliveryForm", @model);
            var redirectInfo = ExecuteDeleteProofOfDelivery();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="NewPOD", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("NewPOD/{*id:int?}")]
        public ActionResult NewPOD(int? id)

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "NewPOD";
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="NewPOD", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_NewPOD/{*id:int?}")]
        public ActionResult _API_NewPOD(int? id)

        {
            @model = new ProofOfDeliveryFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_ProofOfDeliveryForm"] = "NewPOD";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("ProofOfDeliveryForm");
            FileHelper.PendingDownloadInstance.Clear("ProofOfDeliveryForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteNewPOD(id);
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddProofOfDelivery:1/>*/
        public ActionResult ExecuteAddProofOfDelivery()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:EditProofOfDelivery:1/>*/
        public ActionResult ExecuteEditProofOfDelivery(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.ProofOfDelivery =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery>(id);
            @model.Title = "";
            DSS5_SupplyChainFinancialsOptimisation.BO.Supplier sup = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((s) => s.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            if ((sup?.IsSupplier() ?? false))
            {
                @model.IsSupplier = true;
            }
            return _result;
        }
        /*<ControllerActionImplementation:SaveProofOfDelivery:1/>*/
        public ActionResult ExecuteSaveProofOfDelivery()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery>(@model.ProofOfDelivery);
            @model.Title = "";
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Proof of Delivery saved successfully!");
            return _result;
        }
        /*<ControllerActionImplementation:DeleteProofOfDelivery:1/>*/
        public ActionResult ExecuteDeleteProofOfDelivery()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteProofOfDelivery(@model.ProofOfDelivery);
            @model.Title = "";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:NewPOD:1/>*/
        public ActionResult ExecuteNewPOD(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.ProofOfDelivery.Transaction =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(id);
            DSS5_SupplyChainFinancialsOptimisation.BO.Supplier sup = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((s) => s.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            if ((sup?.IsSupplier() ?? false))
            {
                @model.IsSupplier = true;
            }
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:SelectOrder:1/>*/
        /*<DataSourceFilter:SelectOrder:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order> Get_SelectOrder_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_SelectOrder_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order> Get_SelectOrder_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order>().AsQueryable();
            var _var0 = @model.ProofOfDelivery?.Transaction?.Id;
            return __items.Where(@this => @this.Transaction.Id == _var0);
        }


        /*<DataSourceGetFullRecordset:SelectOrder:1/>*/

        [HttpPost]
        [Route("SelectOrder_PickList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectOrder", ClaimType = ClaimTypes.Dataset)]
        public JsonResult SelectOrder_PickList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_SelectOrder_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectOrder_OrderDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ProofOfDeliveryFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "SelectOrder");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:SelectOrder:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectOrder", ClaimType = ClaimTypes.Dataset)]
        [Route("SelectOrder_PickList_Datasource")]
        public JsonResult SelectOrder_PickList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SelectOrder_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_SelectOrder_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_SelectOrder_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_SelectOrder_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SelectOrder_OrderDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SelectOrder_OrderDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:SelectOrder:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectOrder", ClaimType = ClaimTypes.Dataset)]
        [Route("SelectOrder_PickList_DatasourceAggregators")]
        public JsonResult SelectOrder_PickList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_SelectOrder_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        /*<Datasource:DropdownBox:1/>*/

        /*<Datasource:DropdownBox1:1/>*/

        /*<Datasource:DropdownBox2:1/>*/

        /*<Datasource:ProofOfDeliveryForm_SelectOrder:1/>*/
        /*<DataSourceFilter:ProofOfDeliveryForm_SelectOrder:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order> Get_ProofOfDeliveryForm_SelectOrder_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ProofOfDeliveryForm_SelectOrder_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order> Get_ProofOfDeliveryForm_SelectOrder_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order>().AsQueryable();
            var _var0 = @model.ProofOfDelivery?.Transaction?.Id;
            return __items.Where(@this => @this.Transaction.Id == _var0);
        }


        /*<DataSourceGetFullRecordset:ProofOfDeliveryForm_SelectOrder:1/>*/

        [HttpPost]
        [Route("ProofOfDeliveryForm_SelectOrder_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectOrder", ClaimType = ClaimTypes.Dataset)]
        public JsonResult ProofOfDeliveryForm_SelectOrder_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_ProofOfDeliveryForm_SelectOrder_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SelectOrder_OrderDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(ProofOfDeliveryFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "ProofOfDeliveryForm_SelectOrder");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:ProofOfDeliveryForm_SelectOrder:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SelectOrder", ClaimType = ClaimTypes.Dataset)]
        [Route("ProofOfDeliveryForm_SelectOrder_Datasource")]
        public JsonResult ProofOfDeliveryForm_SelectOrder_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ProofOfDeliveryForm_SelectOrder_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ProofOfDeliveryForm_SelectOrder_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ProofOfDeliveryForm_SelectOrder_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ProofOfDeliveryForm_SelectOrder_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Order>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileAttachment_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as ProofOfDeliveryFormViewModel;
                    return  Path.GetFileName(@model.ProofOfDelivery.PODAttachment);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("ProofOfDeliveryForm", "FileAttachment", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("ProofOfDeliveryForm", Get_FileAttachment_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("ProofOfDeliveryForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.ProofOfDelivery.PODAttachment
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "ProofOfDeliveryForm", "FileAttachment", indexes);
            pendingFile.GetRelativePath = Get_FileAttachment_RelativePath;
            @model.ProofOfDelivery.PODAttachment = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachment_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("ProofOfDeliveryForm", "FileAttachment", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("ProofOfDeliveryForm", "FileAttachment", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.ProofOfDelivery.PODAttachment = null;
            IsDirty = true;
            viewDTO.Model = new ProofOfDeliveryFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new ProofOfDeliveryFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("ProofOfDeliveryForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: ProofOfDeliveryForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
