// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.OrderForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.OrderForm
{

    [RoutePrefix("OrderForm")]
    public class OrderFormController : ControllerBase<OrderFormViewModel, OrderFormViewModelDTO>
    {

        /*<Form:OrderForm:0/>*/
        public OrderFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(OrderFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(OrderFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("OrderForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("OrderForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("OrderForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(OrderFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("OrderForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }


        [Route("SaveListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult SaveListView()
        {
            var postedData = _ParsePostedData();
            return SaveListView(postedData, "OrderForm");
        }


        [Route("DeleteListView")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult DeleteListView()
        {
            var postedData = _ParsePostedData();
            return DeleteListView(postedData, "OrderForm");
        }


        [Route("LoadListViews")]
        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public JsonResult LoadListViews()
        {
            var postedData = _ParsePostedData();
            return LoadListViews(postedData, "OrderForm");
        }



        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddOrder")]
        public ActionResult AddOrder()

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "AddOrder";
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddOrder")]
        public ActionResult _API_AddOrder()

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "AddOrder";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddOrder();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditOrder/{*id:int?}")]
        public ActionResult EditOrder(int? id)

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "EditOrder";
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditOrder/{*id:int?}")]
        public ActionResult _API_EditOrder(int? id)

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "EditOrder";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditOrder(id);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveOrder")]
        public ActionResult SaveOrder()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteSaveOrder();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="DeleteOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteOrder")]
        public ActionResult DeleteOrder()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteDeleteOrder();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="CloseMod", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CloseMod")]
        public ActionResult CloseMod()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteCloseMod();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="newOrderProduct", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("newOrderProduct")]
        public ActionResult newOrderProduct()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecutenewOrderProduct();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="insertProducts", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("insertProducts")]
        public ActionResult insertProducts()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteinsertProducts();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, HasDefaultResultView=true, ActionName="NewOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("NewOrder/{*id:int?}")]
        public ActionResult NewOrder(int? id)

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "NewOrder";
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            return null;
        }

        [CustomControllerActionFilter(LogEnabled=true, FillDropDownInitialValues=true, ActionName="NewOrder", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_NewOrder/{*id:int?}")]
        public ActionResult _API_NewOrder(int? id)

        {
            @model = new OrderFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_OrderForm"] = "NewOrder";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("OrderForm");
            FileHelper.PendingDownloadInstance.Clear("OrderForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteNewOrder(id);
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SaveAsDraft", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveAsDraft")]
        public ActionResult SaveAsDraft()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteSaveAsDraft();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="FinalSave", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("FinalSave")]
        public ActionResult FinalSave()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteFinalSave();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="ImportFromCSV", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ImportFromCSV")]
        public ActionResult ImportFromCSV()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteImportFromCSV();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="SubmitChanges", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SubmitChanges")]
        public ActionResult SubmitChanges()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteSubmitChanges();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="Exit", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Exit")]
        public ActionResult Exit()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteExit();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="Test", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Test")]
        public ActionResult Test()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("OrderForm", @model);
            var redirectInfo = ExecuteTest();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddOrder:1/>*/
        public ActionResult ExecuteAddOrder()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            return _result;
        }
        /*<ControllerActionImplementation:EditOrder:1/>*/
        public ActionResult ExecuteEditOrder(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Order =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(id);
            @model.Title = "";
            string origin = "";
            string destination = "";
            if (@model.Order?.CommercialAgreement?.Supplier?.UserName == "Supplier25")
            {
                origin = "Inofyta";
                destination = (@model.Order?.CommercialAgreement?.ImportedBuyer?.AddressTwo ?? "");
            }
            else if (@model.Order?.CommercialAgreement?.Supplier?.UserName == "Supplier15")
            {
                origin = "Metamorfosi, Athens";
                destination = (@model.Order?.CommercialAgreement?.ImportedBuyer?.AddressTwo ?? "");
            }
            else
            {
                origin = "Athens, Greece";
                destination = "Thessaloniki";
            }
            @model.SupOrigin = origin;
            @model.SupDest = destination;
            System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier> suppliers = DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService.FindImplementation(zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
            if (((suppliers?.Count() ?? 0) > 0 && DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService.IsSupplierImplementation((suppliers?.FirstOrDefault()?.UserName ?? ""))))
            {
                @model.IsSupplier = true;
            }
            else
            {
                @model.IsSupplier = false;
            }
            return _result;
        }
        /*<ControllerActionImplementation:SaveOrder:1/>*/
        public ActionResult ExecuteSaveOrder()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:DeleteOrder:1/>*/
        public ActionResult ExecuteDeleteOrder()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteOrder(@model.Order);
            @model.Title = "";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:CloseMod:1/>*/
        public ActionResult ExecuteCloseMod()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:newOrderProduct:1/>*/
        public ActionResult ExecutenewOrderProduct()
        {
            ActionResult _result = null;
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "i am on change1");
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "length: " + (@model.SupplierProducts?.Count().ToString() ?? ""));
            foreach (var product in @model.SupplierProducts ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "i am on change");
                DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct newProduct = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct();
                newProduct.Description = (product?.Description ?? "");
                newProduct.Code = (product?.Code ?? "");
                @model.Order?.AddOrderProducts(newProduct);
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(@model.Order);
            }
            return _result;
        }
        /*<ControllerActionImplementation:insertProducts:1/>*/
        public ActionResult ExecuteinsertProducts()
        {
            ActionResult _result = null;
            foreach (var product in @model.SupplierProducts ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "i am on change");
                DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct newProduct = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct();
                newProduct.Description = (product?.Description ?? "");
                newProduct.Code = (product?.Code ?? "");
                newProduct.Price = (product?.Price ?? 0);
                newProduct.UnitValue = (product?.UnitValue ?? "");
                newProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");
                newProduct.SupplierProduct = product;
                @model.Order?.AddOrderProducts(newProduct);
            }
            return _result;
        }
        /*<ControllerActionImplementation:NewOrder:1/>*/
        public ActionResult ExecuteNewOrder(int? id)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "";
            @model.OrderStandardPath = "OrderStandard.csv";
            @model.OrderStandardPhoto = "OrderStandardPhoto.png";
            @model.UploadConfirmed = false;
            @model.Order = new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
            DSS5_SupplyChainFinancialsOptimisation.BO.Transaction transaction =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(id);
            @model.Order.Transaction = transaction;
            @model.Order.CommercialAgreement = transaction?.CommercialAgreement;
            DSS5_SupplyChainFinancialsOptimisation.BO.Supplier sup = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((s) => s.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            if ((sup?.IsSupplier() ?? false))
            {
                @model.IsSupplier = true;
            }
            return _result;
        }
        /*<ControllerActionImplementation:SaveAsDraft:1/>*/
        public ActionResult ExecuteSaveAsDraft()
        {
            ActionResult _result = null;
            if (@model.Order?.Id == 0)
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "New order");
                DSS5_SupplyChainFinancialsOptimisation.BO.Order newOrder = new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
                newOrder = @model.Order;
            }
            if (@model.Order?.OrderStatus == null)
            {
                @model.Order.OrderStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderStatus();
                @model.Order.OrderStatus.InitialOrdered = true;
            }
            if (@model.Order?.Transaction?.TransactionStatus == null)
            {
                @model.Order.Transaction.TransactionStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.TransactionStatus();
                @model.Order.Transaction.TransactionStatus.Ordered = true;
                @model.Order.Transaction.TransactionStatus.InitialOrderDate = DateTime.UtcNow;
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "-------null------");
            }
            else
            {
                @model.Order.Transaction.TransactionStatus.Ordered = true;
                @model.Order.Transaction.TransactionStatus.InitialOrderDate = DateTime.UtcNow;
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "-----else------");
            }
            @model.Order?.Transaction?.AddIntermediaries(@model.SelectedIntermediaries);
            @model.Order?.AddIntermediaries(@model.SelectedIntermediaries);
            foreach (var orderprod in @model.Order?.OrderProducts ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>())
            {
                var _var0 = orderprod?.Code;
                if ((@model.Order?.Transaction?.Supplier?.SupplierProducts?.Any((a) => a.Code == _var0) ?? false))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "product " + (orderprod?.Description ?? "") + "is already saved as a Supplier product.");
                }
                else
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "product code " + (orderprod?.Code ?? ""));
                    DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct newSupplierProduct = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct();
                    newSupplierProduct.Code = (orderprod?.Code ?? "");
                    newSupplierProduct.Description = (orderprod?.Description ?? "");
                    newSupplierProduct.UnitValue = (orderprod?.UnitValue ?? "");
                    newSupplierProduct.MeasurementUnit = (orderprod?.MeasurementUnit ?? "");
                    newSupplierProduct.Price = (orderprod?.Price ?? 0);
                    newSupplierProduct.Supplier = @model.Order?.Transaction?.Supplier;
                    @model.Order?.Transaction?.Supplier?.AddSupplierProducts(newSupplierProduct);
                }
            }
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(@model.Order);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Order saved successfully as draft.");
            return _result;
        }
        /*<ControllerActionImplementation:FinalSave:1/>*/
        public ActionResult ExecuteFinalSave()
        {
            ActionResult _result = null;
            @model.Order.OrderStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderStatus();
            @model.Order.OrderStatus.FinalOrdered = true;
            if ((@model.Order?.Transaction?.TransactionStatus == null))
            {
                @model.Order.Transaction.TransactionStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.TransactionStatus();
                @model.Order.Transaction.TransactionStatus.Ordered = true;
                @model.Order.Transaction.TransactionStatus.FinalOrderDate = DateTime.UtcNow;
            }
            foreach (var orderprod in @model.Order?.OrderProducts ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>())
            {
                var _var0 = orderprod?.Code;
                if ((@model.Order?.Transaction?.Supplier?.SupplierProducts?.Any((a) => a.Code == _var0) ?? false))
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "product " + (orderprod?.Description ?? "") + "is already saved as a Supplier product.");
                }
                else
                {
                    zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "product code " + (orderprod?.Code ?? ""));
                    DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct newSupplierProduct = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct();
                    newSupplierProduct.Code = (orderprod?.Code ?? "");
                    newSupplierProduct.Description = (orderprod?.Description ?? "");
                    newSupplierProduct.UnitValue = (orderprod?.UnitValue ?? "");
                    newSupplierProduct.MeasurementUnit = (orderprod?.MeasurementUnit ?? "");
                    newSupplierProduct.Price = (orderprod?.Price ?? 0);
                    newSupplierProduct.Supplier = @model.Order?.Transaction?.Supplier;
                    @model.Order?.Transaction?.Supplier?.AddSupplierProducts(newSupplierProduct);
                }
            }
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(@model.Order);
            if (((@model.Order?.IntermediateParty ?? false) && (@model.SelectedIntermediaries?.Count() ?? 0) > 0))
            {
                string link = (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                               System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                              "/IntermediaryTransactionList/Render";
                foreach (var intermediary in @model.SelectedIntermediaries ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary>())
                {
                    zAppDev.DotNet.Framework.Utilities.EMailMessage emailMessage = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
                    emailMessage.To = new List<string> { (intermediary?.EMail ?? "") } .ToList();
                    emailMessage.Subject = "New Transaction";
                    emailMessage.Body = "You have been added to a new Transaction in TOME Finance Platform. Click <a href='" + link + "'>here</a> to view your transaction";
                    emailMessage.IsBodyHtml = true;
                    zAppDev.DotNet.Framework.Utilities.Email.SendMail(emailMessage, true);
                }
            }
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Order was saved successfully.", MessageType.Success, (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                          System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                          "/TransactionsList/Retrieve");
            return _result;
        }
        /*<ControllerActionImplementation:ImportFromCSV:1/>*/
        public ActionResult ExecuteImportFromCSV()
        {
            ActionResult _result = null;
            DSS5_SupplyChainFinancialsOptimisation.BO.Supplier supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            if ((supplier != null && (supplier?.IsSupplier() ?? false)))
            {
                if ((supplier?.UserName == "Supplier25"))
                {
                    @model.Order = DSS5_SupplyChainFinancialsOptimisation.BO.UtilsExtensions.LecosOrderCSVParser(@model.Order, @model.CSVPath, (@model.Order?.Transaction?.Id ?? 0));
                }
                if ((supplier?.UserName == "Supplier15"))
                {
                }
            }
            return _result;
        }
        /*<ControllerActionImplementation:SubmitChanges:1/>*/
        public ActionResult ExecuteSubmitChanges()
        {
            ActionResult _result = null;
            @model.UploadConfirmed = true;
            @model.Order.Status = DSS5_SupplyChainFinancialsOptimisation.BO.Status.Initial;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(@model.Order);
            return _result;
        }
        /*<ControllerActionImplementation:Exit:1/>*/
        public ActionResult ExecuteExit()
        {
            ActionResult _result = null;
            if ((zAppDev.DotNet.Framework.Utilities.Web.IsInControllerAction("NewOrder") && @model.Order?.Status == DSS5_SupplyChainFinancialsOptimisation.BO.Status.Initial))
            {
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteOrder(@model.Order);
                _result = CloseForm();
            }
            else
            {
                _result = CloseForm();
            }
            return _result;
        }
        /*<ControllerActionImplementation:Test:1/>*/
        public ActionResult ExecuteTest()
        {
            ActionResult _result = null;
            foreach (var product in @model.SupplierProducts ?? Enumerable.Empty<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>())
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "OrderForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "i am on change");
                DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct newProduct = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct();
                newProduct.Description = (product?.Description ?? "");
                newProduct.Code = (product?.Code ?? "");
                newProduct.Price = (product?.Price ?? 0);
                newProduct.UnitValue = (product?.UnitValue ?? "");
                newProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");
                newProduct.SupplierProduct = product;
                @model.Order?.AddOrderProducts(newProduct);
            }
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:PickList:1/>*/
        /*<DataSourceFilter:PickList:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary> Get_PickList_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_PickList_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary> Get_PickList_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:PickList:1/>*/

        [HttpPost]
        [Route("PickList_PickList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "IntermediaryDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult PickList_PickList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new IntermediaryDataset_IntermediaryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "PickList");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:PickList:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "IntermediaryDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList_PickList_Datasource")]
        public JsonResult PickList_PickList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new IntermediaryDataset_IntermediaryDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new IntermediaryDataset_IntermediaryDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:PickList:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "IntermediaryDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList_PickList_DatasourceAggregators")]
        public JsonResult PickList_PickList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        /*<Datasource:PickList1:1/>*/
        /*<DataSourceFilter:PickList1:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct> Get_PickList1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_PickList1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct> Get_PickList1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.Supplier.UserName == _var0);
        }


        /*<DataSourceGetFullRecordset:PickList1:1/>*/

        [HttpPost]
        [Route("PickList1_PickList_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierProductDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult PickList1_PickList_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SupplierProductDataSet_SupplierProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "PickList1");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:PickList1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierProductDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList1_PickList_Datasource")]
        public JsonResult PickList1_PickList_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_PickList1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.Select(i => new SupplierProductDataSet_SupplierProductDTO(i, true)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.Select(i => new SupplierProductDataSet_SupplierProductDTO(i, true)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }

        /*<DataSourceAggregators:PickList1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierProductDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("PickList1_PickList_DatasourceAggregators")]
        public JsonResult PickList1_PickList_DatasourceAggregators()
        {
            object aggregatorsResponse = null;
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_PickList1_DatasourceQueryable(datasourceRequest);
            queryable = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            var formattings = new Dictionary<string, string>();
            if (datasourceRequest.GroupBy.Any()/* && datasourceRequest.GroupBy.First().GetGroupsClosed*/)
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData, true);
                GroupsHelper.FormatGroupedAggregators(groups, formattings);
                aggregatorsResponse = new ListResponse()
                {
                    Groups = groups
                };
            }
            else
            {
                var aggregatorsInfo = DeserializeAggregatorsRequest<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(postedData["aggregatorsRequest"].ToString());
                var aggregators = RuntimePredicateBuilder.BuildAggregatorPredicates(aggregatorsInfo);
                foreach (var a in aggregators)
                {
                    var formatting = formattings.ContainsKey(a.Column) ? formattings[a.Column] : null;
                    a.Calculate(queryable, formatting);
                }
                aggregatorsResponse = aggregators;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(aggregatorsResponse)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }




        /*<Datasource:OrderForm_ProofOfDeliveryDataSource:1/>*/
        /*<DataSourceFilter:OrderForm_ProofOfDeliveryDataSource:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery> Get_OrderForm_ProofOfDeliveryDataSource_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_OrderForm_ProofOfDeliveryDataSource_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery> Get_OrderForm_ProofOfDeliveryDataSource_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:OrderForm_ProofOfDeliveryDataSource:1/>*/

        [HttpPost]
        [Route("OrderForm_ProofOfDeliveryDataSource_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProofOfDeliveryDataSource", ClaimType = ClaimTypes.Dataset)]
        public JsonResult OrderForm_ProofOfDeliveryDataSource_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_OrderForm_ProofOfDeliveryDataSource_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new ProofOfDeliveryDataSource_ProofOfDeliveryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "OrderForm_ProofOfDeliveryDataSource");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:OrderForm_ProofOfDeliveryDataSource:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "ProofOfDeliveryDataSource", ClaimType = ClaimTypes.Dataset)]
        [Route("OrderForm_ProofOfDeliveryDataSource_Datasource")]
        public JsonResult OrderForm_ProofOfDeliveryDataSource_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_OrderForm_ProofOfDeliveryDataSource_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_ProofOfDeliveryDataSource_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_ProofOfDeliveryDataSource_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_ProofOfDeliveryDataSource_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.ProofOfDelivery>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OrderForm_CommercialAgreementDataSet:1/>*/
        /*<DataSourceFilter:OrderForm_CommercialAgreementDataSet:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement> Get_OrderForm_CommercialAgreementDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_OrderForm_CommercialAgreementDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement> Get_OrderForm_CommercialAgreementDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.Supplier.UserName == _var0);
        }


        /*<DataSourceGetFullRecordset:OrderForm_CommercialAgreementDataSet:1/>*/

        [HttpPost]
        [Route("OrderForm_CommercialAgreementDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CommercialAgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult OrderForm_CommercialAgreementDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_OrderForm_CommercialAgreementDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new CommercialAgreementDataSet_CommercialAgreementDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "OrderForm_CommercialAgreementDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:OrderForm_CommercialAgreementDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "CommercialAgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("OrderForm_CommercialAgreementDataSet_Datasource")]
        public JsonResult OrderForm_CommercialAgreementDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_OrderForm_CommercialAgreementDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_CommercialAgreementDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_CommercialAgreementDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_CommercialAgreementDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OrderForm_SupplierProductDataSet:1/>*/
        /*<DataSourceFilter:OrderForm_SupplierProductDataSet:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct> Get_OrderForm_SupplierProductDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_OrderForm_SupplierProductDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct> Get_OrderForm_SupplierProductDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.Supplier.UserName == _var0);
        }


        /*<DataSourceGetFullRecordset:OrderForm_SupplierProductDataSet:1/>*/

        [HttpPost]
        [Route("OrderForm_SupplierProductDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierProductDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult OrderForm_SupplierProductDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_OrderForm_SupplierProductDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SupplierProductDataSet_SupplierProductDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "OrderForm_SupplierProductDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:OrderForm_SupplierProductDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierProductDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("OrderForm_SupplierProductDataSet_Datasource")]
        public JsonResult OrderForm_SupplierProductDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_OrderForm_SupplierProductDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_SupplierProductDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_SupplierProductDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_SupplierProductDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OrderForm_TransactionDataSet:1/>*/
        /*<DataSourceFilter:OrderForm_TransactionDataSet:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction> Get_OrderForm_TransactionDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_OrderForm_TransactionDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction> Get_OrderForm_TransactionDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>().AsQueryable();
            var _var0 = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName();
            return __items.Where(@this => @this.Supplier.UserName == _var0);
        }


        /*<DataSourceGetFullRecordset:OrderForm_TransactionDataSet:1/>*/

        [HttpPost]
        [Route("OrderForm_TransactionDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "TransactionDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult OrderForm_TransactionDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_OrderForm_TransactionDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new TransactionDataSet_TransactionDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "OrderForm_TransactionDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:OrderForm_TransactionDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "TransactionDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("OrderForm_TransactionDataSet_Datasource")]
        public JsonResult OrderForm_TransactionDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_OrderForm_TransactionDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_TransactionDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_TransactionDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_TransactionDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:OrderForm_IntermediaryDataset:1/>*/
        /*<DataSourceFilter:OrderForm_IntermediaryDataset:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary> Get_OrderForm_IntermediaryDataset_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_OrderForm_IntermediaryDataset_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary> Get_OrderForm_IntermediaryDataset_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:OrderForm_IntermediaryDataset:1/>*/

        [HttpPost]
        [Route("OrderForm_IntermediaryDataset_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "IntermediaryDataset", ClaimType = ClaimTypes.Dataset)]
        public JsonResult OrderForm_IntermediaryDataset_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_OrderForm_IntermediaryDataset_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new IntermediaryDataset_IntermediaryDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(OrderFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "OrderForm_IntermediaryDataset");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:OrderForm_IntermediaryDataset:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "IntermediaryDataset", ClaimType = ClaimTypes.Dataset)]
        [Route("OrderForm_IntermediaryDataset_Datasource")]
        public JsonResult OrderForm_IntermediaryDataset_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_OrderForm_IntermediaryDataset_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_IntermediaryDataset_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_IntermediaryDataset_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_OrderForm_IntermediaryDataset_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Intermediary>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        #region ImageBox controls


        private Func<object, int[], string> Get_ImageBox_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as OrderFormViewModel;
                    return zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data", "Photos"))  + "/" +  Path.GetFileName(@model.OrderStandardPhoto);
                };
            }
        }

        [HttpPost]
        [Route("ImageBox_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult ImageBox_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            try
            {
                var data = FileHelper.DownloadFromFileSystemAsBase64(Get_ImageBox_RelativePath, @model, indexes);
                return Content(data);
            }
            catch (Exception e)
            {
                _logger.Error("Could not download Image 'ImageBox'", e);
                return Content(null);
            }
        }


        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileAttachmentOrder_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as OrderFormViewModel;
                    return  Path.GetFileName(@model.Order.OrderAttachment);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachmentOrder_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentOrder_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachmentOrder", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("OrderForm", Get_FileAttachmentOrder_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachmentOrder'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachmentOrder_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("OrderForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachmentOrder_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentOrder_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachmentOrder_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.Order.OrderAttachment
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachmentOrder_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "OrderForm", "FileAttachmentOrder", indexes);
            pendingFile.GetRelativePath = Get_FileAttachmentOrder_RelativePath;
            @model.Order.OrderAttachment = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachmentOrder_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentOrder_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachmentOrder", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("OrderForm", "FileAttachmentOrder", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachmentOrder'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.Order.OrderAttachment = null;
            IsDirty = true;
            viewDTO.Model = new OrderFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as OrderFormViewModel;
                    return  Path.GetFileName(@model.CSVPath);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachment", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("OrderForm", Get_FileAttachment_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("OrderForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.CSVPath
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "OrderForm", "FileAttachment", indexes);
            pendingFile.GetRelativePath = Get_FileAttachment_RelativePath;
            @model.CSVPath = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachment_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachment", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("OrderForm", "FileAttachment", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.CSVPath = null;
            IsDirty = true;
            viewDTO.Model = new OrderFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment2_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as OrderFormViewModel;
                    return zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data", "Standards"))  + "/" +  Path.GetFileName(@model.OrderStandardPath);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment2_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment2_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachment2", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("OrderForm", Get_FileAttachment2_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment2'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment2_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("OrderForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        private Func<object, int[], string> Get_FileAttachment1_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as OrderFormViewModel;
                    return  Path.GetFileName(@model.Order.FinalAcceptanceCertificate.Certificate);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment1_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachment1", indexes);
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("OrderForm", Get_FileAttachment1_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment1'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment1_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("OrderForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment1_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment1_Upload(indexes, HttpContext.Request.Files);
            var _result = Json(new
            {
                Legacy = true,
                Type = "FileUpload" ,

                Data = new
                {
                    FileName = @model.Order.FinalAcceptanceCertificate.Certificate
                }

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment1_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            var file = files[0];
            var pendingFile = new FileHelper.UploadInfo(file, "OrderForm", "FileAttachment1", indexes);
            pendingFile.GetRelativePath = Get_FileAttachment1_RelativePath;
            @model.Order.FinalAcceptanceCertificate.Certificate = FileHelper.GetUtf8SafeFilename(file.FileName);
            IsDirty = true;
            FileHelper.PendingUploadInstance.Add(pendingFile);
            return pendingFile;
        }

        [HttpPost]
        [Route("FileAttachment1_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var pending = FileHelper.PendingUploadInstance.Get("OrderForm", "FileAttachment1", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("OrderForm", "FileAttachment1", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment1'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            @model.Order.FinalAcceptanceCertificate.Certificate = null;
            IsDirty = true;
            viewDTO.Model = new OrderFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new OrderFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("OrderForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: OrderForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
