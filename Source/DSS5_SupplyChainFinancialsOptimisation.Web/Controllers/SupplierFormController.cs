// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.SupplierForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.SupplierForm
{

    [RoutePrefix("SupplierForm")]
    public class SupplierFormController : ControllerBase<SupplierFormViewModel, SupplierFormViewModelDTO>
    {

        /*<Form:SupplierForm:0/>*/
        public SupplierFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(SupplierFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(SupplierFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("SupplierForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("SupplierForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(SupplierFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("SupplierForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="AddSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("AddSupplier")]
        public ActionResult AddSupplier()

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "AddSupplier";
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="AddSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_AddSupplier")]
        public ActionResult _API_AddSupplier()

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "AddSupplier";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteAddSupplier();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditSupplier")]
        public ActionResult EditSupplier()

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "EditSupplier";
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditSupplier")]
        public ActionResult _API_EditSupplier()

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "EditSupplier";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditSupplier();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, ActionName="DeleteSupplier", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("DeleteSupplier")]
        public ActionResult DeleteSupplier()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteDeleteSupplier();
            return redirectInfo;
        }

        [CustomControllerActionFilter(LogEnabled=true, CausesValidation=true, ActionName="Save", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Save")]
        public ActionResult Save()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteSave();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="PassedEvaluation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("PassedEvaluation")]
        public ActionResult PassedEvaluation()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecutePassedEvaluation();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="SaveGuestProfile", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("SaveGuestProfile")]
        public ActionResult SaveGuestProfile()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteSaveGuestProfile();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="BuyRegistration", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("BuyRegistration")]
        public ActionResult BuyRegistration()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteBuyRegistration();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="PassedRerun", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("PassedRerun")]
        public ActionResult PassedRerun()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecutePassedRerun();
            return redirectInfo;
        }

        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="EditSupplier_", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("EditSupplier_/{*username?}")]
        public ActionResult EditSupplier_(string username)

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "EditSupplier_";
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="EditSupplier_", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_EditSupplier_/{*username?}")]
        public ActionResult _API_EditSupplier_(string username)

        {
            @model = new SupplierFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_SupplierForm"] = "EditSupplier_";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("SupplierForm");
            FileHelper.PendingDownloadInstance.Clear("SupplierForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteEditSupplier_(username);
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="RequestValidation", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("RequestValidation")]
        public ActionResult RequestValidation()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteRequestValidation();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="InterestedToAgreement", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("InterestedToAgreement")]
        public ActionResult InterestedToAgreement()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteInterestedToAgreement();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="ModalClose", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("ModalClose")]
        public ActionResult ModalClose()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteModalClose();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step1To2", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step1To2")]
        public ActionResult Step1To2()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep1To2();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step2To3", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step2To3")]
        public ActionResult Step2To3()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep2To3();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step3To4", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step3To4")]
        public ActionResult Step3To4()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep3To4();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step4To5", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step4To5")]
        public ActionResult Step4To5()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep4To5();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step3To2", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step3To2")]
        public ActionResult Step3To2()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep3To2();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Step2To1", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step2To1")]
        public ActionResult Step2To1()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep2To1();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Step4To3", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step4To3")]
        public ActionResult Step4To3()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep4To3();
            return redirectInfo;
        }

        [CustomControllerActionFilter(ActionName="Step5To4", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step5To4")]
        public ActionResult Step5To4()

        {
            var _data = _LoadViewModel();
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("SupplierForm", @model);
            var redirectInfo = ExecuteStep5To4();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:AddSupplier:1/>*/
        public ActionResult ExecuteAddSupplier()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Title = "Create Profile";
            if ((((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("GuestSupplier") ?? false)) == false))
            {
                @model.Title = "Profile";
            }
            @model.IsSupplier = (@model.Supplier?.IsSupplier() ?? false);
            return _result;
        }
        /*<ControllerActionImplementation:EditSupplier:1/>*/
        public ActionResult ExecuteEditSupplier()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Link = "http://www.ncris.gov.gr/portal/page/portal/epm/SERVICES/citizenguide/ypeythini_dilosi.pdf";
            @model.Supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            @model.Title = "";
            zAppDev.DotNet.Framework.Identity.Model.ApplicationRole role = zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.Roles?.FirstOrDefault();
            zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier's role: " + (role?.Name ?? ""));
            if ((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("Investor") ?? false) || (zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("Administrator") ?? false))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "SupplierForm",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "Supplier");
                @model.IsSupplier = false;
            }
            else
            {
                @model.IsSupplier = true;
            }
            @model.Step1 = true;
            return _result;
        }
        /*<ControllerActionImplementation:DeleteSupplier:1/>*/
        public ActionResult ExecuteDeleteSupplier()
        {
            ActionResult _result = null;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteSupplier(@model.Supplier);
            @model.Title = "Delete";
            _result = CloseForm();
            return _result;
        }
        /*<ControllerActionImplementation:Save:1/>*/
        public ActionResult ExecuteSave()
        {
            ActionResult _result = null;
            @model.FinishButton = true;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Saved successfully.");
            return _result;
        }
        /*<ControllerActionImplementation:PassedEvaluation:1/>*/
        public ActionResult ExecutePassedEvaluation()
        {
            ActionResult _result = null;
            @model.Passed = "Passed Evaluation Test";
            @model.Evaluation = true;
            @model.TestRunned = true;
            int? count = 0;
            if ((@model.Supplier?.SupplierTurnover?.ActualPreviousYear ?? 0) >= 500000)
            {
                @model.Evaluation1 = true;
                @model.Supplier.AnnualTurnover = true;
            }
            else
            {
                @model.Evaluation1 = false;
                @model.Supplier.AnnualTurnover = false;
            }
            if (@model.Supplier?.SupplierEvaluation?.Environment == "B2B")
            {
                @model.Evaluation2 = true;
                @model.Supplier.BEnvironment = true;
            }
            else
            {
                @model.Evaluation2 = false;
                @model.Supplier.BEnvironment = false;
            }
            if ((@model.Supplier?.SupplierEvaluation?.ContractualPaymentTerms ?? 0) <= 160)
            {
                @model.Evaluation3 = true;
                @model.Supplier.PTerms = true;
            }
            else
            {
                @model.Evaluation3 = false;
                @model.Supplier.PTerms = false;
            }
            if ((@model.Supplier?.SupplierEvaluation?.Average ?? 0) >= 30 && (@model.Supplier?.SupplierEvaluation?.Average ?? 0) <= 120)
            {
                @model.Evaluation4 = true;
                @model.Supplier.Average = true;
            }
            else
            {
                @model.Evaluation4 = false;
                @model.Supplier.Average = false;
            }
            if ((@model.Supplier?.SupplierEvaluation?.AverageInvoiceValue ?? 0) >= 300)
            {
                @model.Evaluation5 = true;
                @model.Supplier.InvoiceValue = true;
            }
            else
            {
                @model.Evaluation5 = false;
                @model.Supplier.InvoiceValue = false;
            }
            if ((@model.Supplier?.SupplierEvaluation?.EquityRatio ?? 0) >= 10)
            {
                @model.Evaluation6 = true;
                @model.Supplier.EqRatio = true;
            }
            else
            {
                @model.Evaluation6 = false;
                @model.Supplier.EqRatio = false;
            }
            @model.EvaluationCount = count;
            if ((@model.Supplier?.AnnualTurnover ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((@model.Supplier?.BEnvironment ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((@model.Supplier?.PTerms ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((@model.Supplier?.Average ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((@model.Supplier?.InvoiceValue ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((@model.Supplier?.EqRatio ?? false))
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            @model.Supplier.EvaluationCountResult = count;
            if (@model.Supplier?.EvaluationCountResult == 6)
            {
                @model.Supplier.EvaluationResult = "Very High Performance";
            }
            else if (@model.Supplier?.EvaluationCountResult == 5)
            {
                @model.Supplier.EvaluationResult = "High Performance";
            }
            else if (@model.Supplier?.EvaluationCountResult == 4)
            {
                @model.Supplier.EvaluationResult = "Medium Performance";
            }
            else if (@model.Supplier?.EvaluationCountResult == 3)
            {
                @model.Supplier.EvaluationResult = "Borderline Performance";
            }
            else if (@model.Supplier?.EvaluationCountResult == 2)
            {
                @model.Supplier.EvaluationResult = "Low Performance";
            }
            else if (@model.Supplier?.EvaluationCountResult == 1)
            {
                @model.Supplier.EvaluationResult = "Very Low Performance";
            }
            return _result;
        }
        /*<ControllerActionImplementation:SaveGuestProfile:1/>*/
        public ActionResult ExecuteSaveGuestProfile()
        {
            ActionResult _result = null;
            @model.GuestFinish = true;
            @model.Supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            @model.Evaluation = true;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Profile Saved");
            return _result;
        }
        /*<ControllerActionImplementation:BuyRegistration:1/>*/
        public ActionResult ExecuteBuyRegistration()
        {
            ActionResult _result = null;
            _result = GetRedirectInfo("PaymentForm", "AddPayment", new  RouteValueDictionary(new {  }));
            return _result;
        }
        /*<ControllerActionImplementation:PassedRerun:1/>*/
        public ActionResult ExecutePassedRerun()
        {
            ActionResult _result = null;
            @model.Passed = "Passed Evaluation Test";
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Wait feedback from eGerLink Administrator and Investor");
            return _result;
        }
        /*<ControllerActionImplementation:EditSupplier_:1/>*/
        public ActionResult ExecuteEditSupplier_(string username)
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == username)?.FirstOrDefault();
            @model.Title = "";
            if ((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("Investor") ?? false) || (zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("Administrator") ?? false))
            {
                @model.IsSupplier = false;
            }
            else
            {
                @model.IsSupplier = true;
            }
            @model.Step1 = true;
            return _result;
        }
        /*<ControllerActionImplementation:RequestValidation:1/>*/
        public ActionResult ExecuteRequestValidation()
        {
            ActionResult _result = null;
            @model.Supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName())?.FirstOrDefault();
            if (((@model.Supplier?.IsInRole("RegisteredSupplier") ?? false) || (@model.Supplier?.IsInRole("ValidatedSupplier") ?? false)))
            {
                @model.Supplier.Roles = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Get<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>((a) => a.Name == "PendingValidated").ToList();
                @model.Supplier.SupplierStatus = "PendingValidated";
            }
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "Wait for Validation from the Administrator.", MessageType.Success, (!string.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"]) ?
                          System.Configuration.ConfigurationManager.AppSettings["ServerExternalPath"] : zAppDev.DotNet.Framework.Utilities.Web.GetApplicationPathUri(false)) +
                          "/HomePage/Render");
            zAppDev.DotNet.Framework.Identity.Model.ApplicationUser administrator = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>((a) => a.UserName == "Administrator")?.FirstOrDefault();
            zAppDev.DotNet.Framework.Utilities.EMailMessage email = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            email.To = new List<string> { (administrator?.Email ?? "") } .ToList();
            email.Subject = "Account Validation";
            email.Body = "A Supplier has requested Validation";
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(email, true);
            return _result;
        }
        /*<ControllerActionImplementation:InterestedToAgreement:1/>*/
        public ActionResult ExecuteInterestedToAgreement()
        {
            ActionResult _result = null;
            DSS5_SupplyChainFinancialsOptimisation.BO.Agreement newAgreement = new DSS5_SupplyChainFinancialsOptimisation.BO.Agreement();
            DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus newStatus = new DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus();
            newStatus.Status = "Interested";
            newStatus.ProvidedBy = "Investor";
            newStatus.DateOccured = DateTime.UtcNow;
            newAgreement?.AddAgreementStatus(newStatus);
            if ((zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentApplicationUser()?.IsInRole("Investor") ?? false))
            {
                DSS5_SupplyChainFinancialsOptimisation.BO.Investor newInv =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(zAppDev.DotNet.Framework.Identity.IdentityHelper.GetCurrentUserName());
                newAgreement.Investor = newInv;
            }
            newAgreement.Supplier = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            newAgreement.Supplier = @model.Supplier;
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(newAgreement);
            zAppDev.DotNet.Framework.Utilities.EMailMessage em = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            em.To = new List<string> { (@model.Supplier?.Email ?? "") } .ToList();
            em.Subject = "New Agreement";
            em.IsBodyHtml = true;
            em.Body = "A new Agreement is created" + "Please edit the Agreement.";
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(em, true);
            ClientCommand(ClientCommands.SHOW_MESSAGE, "The Supplier will be informed");
            return _result;
        }
        /*<ControllerActionImplementation:ModalClose:1/>*/
        public ActionResult ExecuteModalClose()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:Step1To2:1/>*/
        public ActionResult ExecuteStep1To2()
        {
            ActionResult _result = null;
            @model.Step1 = false;
            @model.Step1To2 = true;
            if ((@model.IsSupplier))
            {
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Step 1 was saved successfully.");
            }
            return _result;
        }
        /*<ControllerActionImplementation:Step2To3:1/>*/
        public ActionResult ExecuteStep2To3()
        {
            ActionResult _result = null;
            @model.Step1To2 = false;
            @model.Step2To3 = true;
            if ((@model.IsSupplier))
            {
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Step 2 was saved successfully.");
            }
            return _result;
        }
        /*<ControllerActionImplementation:Step3To4:1/>*/
        public ActionResult ExecuteStep3To4()
        {
            ActionResult _result = null;
            @model.Step2To3 = false;
            @model.Step3To4 = true;
            if ((@model.IsSupplier))
            {
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Step 3 was saved successfully.");
            }
            return _result;
        }
        /*<ControllerActionImplementation:Step4To5:1/>*/
        public ActionResult ExecuteStep4To5()
        {
            ActionResult _result = null;
            @model.Step3To4 = false;
            @model.Step4To5 = true;
            if ((@model.IsSupplier))
            {
                new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(@model.Supplier);
                ClientCommand(ClientCommands.SHOW_MESSAGE, "Step 4 was saved successfully.");
            }
            return _result;
        }
        /*<ControllerActionImplementation:Step3To2:1/>*/
        public ActionResult ExecuteStep3To2()
        {
            ActionResult _result = null;
            @model.Step1To2 = true;
            @model.Step2To3 = false;
            return _result;
        }
        /*<ControllerActionImplementation:Step2To1:1/>*/
        public ActionResult ExecuteStep2To1()
        {
            ActionResult _result = null;
            @model.Step1To2 = false;
            @model.Step1 = true;
            return _result;
        }
        /*<ControllerActionImplementation:Step4To3:1/>*/
        public ActionResult ExecuteStep4To3()
        {
            ActionResult _result = null;
            @model.Step2To3 = true;
            @model.Step3To4 = false;
            return _result;
        }
        /*<ControllerActionImplementation:Step5To4:1/>*/
        public ActionResult ExecuteStep5To4()
        {
            ActionResult _result = null;
            @model.Step3To4 = true;
            @model.Step4To5 = false;
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:txtBusiness7:1/>*/

        /*<Datasource:OptionButton:1/>*/

        /*<Datasource:OptionButton1:1/>*/

        /*<Datasource:OptionButton2:1/>*/

        /*<Datasource:OptionButton3:1/>*/

        /*<Datasource:OptionButton4:1/>*/

        /*<Datasource:OptionButton5:1/>*/

        /*<Datasource:txtApplicableCommercialLaw:1/>*/

        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileAttachment3_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment3_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment3_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment3", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment3_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment3" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment3_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment3'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment3_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment3_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment3_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment3_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment3_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.PriorOutstandingBalances == null)
            {
                model.Supplier.PriorOutstandingBalances = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.PriorOutstandingBalances.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddPriorOutstandingBalances(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment3", newIndexes.ToArray());
                var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment3_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment3_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment3_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment3", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment3", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment3'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.PriorOutstandingBalances.ElementAt(indexes[0]);
            model.Supplier?.RemovePriorOutstandingBalances(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment4_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.OutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.OutstandingBalances?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment4_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment4_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment4", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment4_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment4" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment4_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment4'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment4_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment4_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment4_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment4_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment4_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.OutstandingBalances == null)
            {
                model.Supplier.OutstandingBalances = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.OutstandingBalances.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddOutstandingBalances(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment4", newIndexes.ToArray());
                var parents0 = model?.Supplier?.OutstandingBalances?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.OutstandingBalances?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment4_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment4_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment4_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.OutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.OutstandingBalances?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment4", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment4", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment4'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.OutstandingBalances.ElementAt(indexes[0]);
            model.Supplier?.RemoveOutstandingBalances(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment1_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.FinancialStatements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.FinancialStatements?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment1_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment1", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment1_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment1" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment1_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment1'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment1_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment1_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment1_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment1_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.FinancialStatements == null)
            {
                model.Supplier.FinancialStatements = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.FinancialStatements.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddFinancialStatements(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment1", newIndexes.ToArray());
                var parents0 = model?.Supplier?.FinancialStatements?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.FinancialStatements?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment1_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment1_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment1_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.FinancialStatements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.FinancialStatements?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment1", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment1", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment1'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.FinancialStatements.ElementAt(indexes[0]);
            model.Supplier?.RemoveFinancialStatements(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment11_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.EconomicEvaluations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.EconomicEvaluations?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment11_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment11_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment11", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment11_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment11" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment11_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment11'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment11_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment11_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment11_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment11_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment11_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.EconomicEvaluations == null)
            {
                model.Supplier.EconomicEvaluations = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.EconomicEvaluations.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddEconomicEvaluations(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment11", newIndexes.ToArray());
                var parents0 = model?.Supplier?.EconomicEvaluations?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.EconomicEvaluations?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment11_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment11_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment11_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.EconomicEvaluations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.EconomicEvaluations?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment11", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment11", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment11'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.EconomicEvaluations.ElementAt(indexes[0]);
            model.Supplier?.RemoveEconomicEvaluations(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachmentBPlan_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.BusinessPlans?.Count() < indexes[0] + 1 ? null : model?.Supplier?.BusinessPlans?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachmentBPlan_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentBPlan_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachmentBPlan", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachmentBPlan_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachmentBPlan" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachmentBPlan_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachmentBPlan'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachmentBPlan_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachmentBPlan_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentBPlan_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachmentBPlan_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachmentBPlan_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.BusinessPlans == null)
            {
                model.Supplier.BusinessPlans = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.BusinessPlans.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddBusinessPlans(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachmentBPlan", newIndexes.ToArray());
                var parents0 = model?.Supplier?.BusinessPlans?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.BusinessPlans?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachmentBPlan_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachmentBPlan_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachmentBPlan_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.BusinessPlans?.Count() < indexes[0] + 1 ? null : model?.Supplier?.BusinessPlans?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachmentBPlan", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachmentBPlan", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachmentBPlan'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.BusinessPlans.ElementAt(indexes[0]);
            model.Supplier?.RemoveBusinessPlans(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment5_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.CurrentSituations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentSituations?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment5_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment5_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment5", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment5_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment5" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment5_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment5'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment5_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment5_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment5_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment5_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment5_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.CurrentSituations == null)
            {
                model.Supplier.CurrentSituations = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.CurrentSituations.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddCurrentSituations(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment5", newIndexes.ToArray());
                var parents0 = model?.Supplier?.CurrentSituations?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.CurrentSituations?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment5_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment5_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment5_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.CurrentSituations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentSituations?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment5", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment5", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment5'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.CurrentSituations.ElementAt(indexes[0]);
            model.Supplier?.RemoveCurrentSituations(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment6_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.CurrentStatements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentStatements?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment6_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment6_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment6", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment6_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment6" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment6_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment6'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment6_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment6_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment6_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment6_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment6_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.CurrentStatements == null)
            {
                model.Supplier.CurrentStatements = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.CurrentStatements.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddCurrentStatements(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment6", newIndexes.ToArray());
                var parents0 = model?.Supplier?.CurrentStatements?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.CurrentStatements?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment6_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment6_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment6_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.CurrentStatements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentStatements?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment6", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment6", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment6'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.CurrentStatements.ElementAt(indexes[0]);
            model.Supplier?.RemoveCurrentStatements(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment7_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.CurrentCredits?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentCredits?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment7_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment7_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment7", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment7_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment7" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment7_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment7'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment7_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment7_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment7_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment7_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment7_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.CurrentCredits == null)
            {
                model.Supplier.CurrentCredits = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.CurrentCredits.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddCurrentCredits(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment7", newIndexes.ToArray());
                var parents0 = model?.Supplier?.CurrentCredits?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.CurrentCredits?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment7_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment7_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment7_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.CurrentCredits?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CurrentCredits?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment7", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment7", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment7'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.CurrentCredits.ElementAt(indexes[0]);
            model.Supplier?.RemoveCurrentCredits(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment8_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.FactoringAgreements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.FactoringAgreements?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment8_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment8_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment8", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment8_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment8" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment8_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment8'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment8_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment8_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment8_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment8_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment8_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.FactoringAgreements == null)
            {
                model.Supplier.FactoringAgreements = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.FactoringAgreements.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddFactoringAgreements(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment8", newIndexes.ToArray());
                var parents0 = model?.Supplier?.FactoringAgreements?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.FactoringAgreements?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment8_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment8_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment8_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.FactoringAgreements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.FactoringAgreements?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment8", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment8", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment8'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.FactoringAgreements.ElementAt(indexes[0]);
            model.Supplier?.RemoveFactoringAgreements(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment9_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.CustomerAgreements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CustomerAgreements?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment9_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment9_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment9", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment9_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment9" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment9_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment9'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment9_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment9_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment9_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment9_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment9_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.CustomerAgreements == null)
            {
                model.Supplier.CustomerAgreements = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.CustomerAgreements.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddCustomerAgreements(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment9", newIndexes.ToArray());
                var parents0 = model?.Supplier?.CustomerAgreements?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.CustomerAgreements?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment9_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment9_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment9_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.CustomerAgreements?.Count() < indexes[0] + 1 ? null : model?.Supplier?.CustomerAgreements?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment9", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment9", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment9'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.CustomerAgreements.ElementAt(indexes[0]);
            model.Supplier?.RemoveCustomerAgreements(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment10_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.GeneralConstractuals?.Count() < indexes[0] + 1 ? null : model?.Supplier?.GeneralConstractuals?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment10_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment10_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment10", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment10_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment10" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment10_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment10'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment10_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment10_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment10_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment10_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment10_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.GeneralConstractuals == null)
            {
                model.Supplier.GeneralConstractuals = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.GeneralConstractuals.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddGeneralConstractuals(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment10", newIndexes.ToArray());
                var parents0 = model?.Supplier?.GeneralConstractuals?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.GeneralConstractuals?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment10_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment10_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment10_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.GeneralConstractuals?.Count() < indexes[0] + 1 ? null : model?.Supplier?.GeneralConstractuals?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment10", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment10", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment10'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.GeneralConstractuals.ElementAt(indexes[0]);
            model.Supplier?.RemoveGeneralConstractuals(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment111_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.OrganizationalCharts?.Count() < indexes[0] + 1 ? null : model?.Supplier?.OrganizationalCharts?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment111_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment111_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment111", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment111_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment111" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment111_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment111'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment111_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment111_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment111_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment111_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment111_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.OrganizationalCharts == null)
            {
                model.Supplier.OrganizationalCharts = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.OrganizationalCharts.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddOrganizationalCharts(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment111", newIndexes.ToArray());
                var parents0 = model?.Supplier?.OrganizationalCharts?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.OrganizationalCharts?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment111_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment111_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment111_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.OrganizationalCharts?.Count() < indexes[0] + 1 ? null : model?.Supplier?.OrganizationalCharts?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment111", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment111", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment111'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.OrganizationalCharts.ElementAt(indexes[0]);
            model.Supplier?.RemoveOrganizationalCharts(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment12_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.InvoicesForms?.Count() < indexes[0] + 1 ? null : model?.Supplier?.InvoicesForms?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment12_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment12_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment12", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment12_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment12" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment12_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment12'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment12_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment12_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment12_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment12_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment12_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.InvoicesForms == null)
            {
                model.Supplier.InvoicesForms = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.InvoicesForms.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddInvoicesForms(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment12", newIndexes.ToArray());
                var parents0 = model?.Supplier?.InvoicesForms?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.InvoicesForms?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment12_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment12_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment12_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.InvoicesForms?.Count() < indexes[0] + 1 ? null : model?.Supplier?.InvoicesForms?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment12", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment12", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment12'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.InvoicesForms.ElementAt(indexes[0]);
            model.Supplier?.RemoveInvoicesForms(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        private Func<object, int[], string> Get_FileAttachment121_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as SupplierFormViewModel;
                    var parents0 = model?.Supplier?.Declarations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.Declarations?[indexes[0]];
                    return "SupplierUploads"  + "/" +  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileAttachment121_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment121_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment121", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileAttachment121_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("SupplierForm", expectedRelativePath,
                          new List<string> { "FileAttachment121" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("SupplierForm", Get_FileAttachment121_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileAttachment121'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileAttachment121_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("SupplierForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileAttachment121_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment121_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileAttachment121_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileAttachment121_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.Declarations == null)
            {
                model.Supplier.Declarations = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.Declarations.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddDeclarations(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "SupplierForm", "FileAttachment121", newIndexes.ToArray());
                var parents0 = model?.Supplier?.Declarations?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.Declarations?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileAttachment121_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileAttachment121_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileAttachment121_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.Declarations?.Count() < indexes[0] + 1 ? null : model?.Supplier?.Declarations?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("SupplierForm", "FileAttachment121", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("SupplierForm", "FileAttachment121", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileAttachment121'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.Declarations.ElementAt(indexes[0]);
            model.Supplier?.RemoveDeclarations(removedElement);
            IsDirty = true;
            viewDTO.Model = new SupplierFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new SupplierFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("SupplierForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: SupplierForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            viewDTO.RuleEvaluations.DataValidations.Add(DVFinancialStatementsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVEconomicEvaluationsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVBusinessPlansValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVPriorOutstandingBalancesValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVOutstandingBalancesValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVCurrentSituationsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVCurrentStatementsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVCurrentCreditsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVFactoringAgreementsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVAgreementsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVGeneralConstractualsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVOrganizationalChartsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVDeclarationsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVInvoicesFormsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVPriorOutstandingPolicyTermsValidation());
            viewDTO.RuleEvaluations.DataValidations.Add(DVOutstandingPolicyTermsValidation());
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }


        /*<DataValidation:DVFinancialStatementsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVFinancialStatementsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVFinancialStatementsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVFinancialStatementsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVFinancialStatementsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVEconomicEvaluationsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVEconomicEvaluationsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVEconomicEvaluationsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVEconomicEvaluationsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVEconomicEvaluationsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVBusinessPlansValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVBusinessPlansValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVBusinessPlansValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVBusinessPlansValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVBusinessPlansValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVPriorOutstandingBalancesValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVPriorOutstandingBalancesValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVPriorOutstandingBalancesValidation:2/>*/
                return @model.Supplier?.PriorOutstandingBalances?.Count() == 0 && @model.IsSupplier && @model.Step4To5;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVPriorOutstandingBalancesValidation:2/>*/
                return "Please upload Outstanding balance analysis in Step 3";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVPriorOutstandingBalancesValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVOutstandingBalancesValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVOutstandingBalancesValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVOutstandingBalancesValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVOutstandingBalancesValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVOutstandingBalancesValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVCurrentSituationsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVCurrentSituationsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVCurrentSituationsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVCurrentSituationsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVCurrentSituationsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVCurrentStatementsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVCurrentStatementsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVCurrentStatementsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVCurrentStatementsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVCurrentStatementsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVCurrentCreditsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVCurrentCreditsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVCurrentCreditsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVCurrentCreditsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVCurrentCreditsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVFactoringAgreementsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVFactoringAgreementsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVFactoringAgreementsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVFactoringAgreementsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVFactoringAgreementsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVAgreementsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVAgreementsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVAgreementsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVAgreementsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVAgreementsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVGeneralConstractualsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVGeneralConstractualsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVGeneralConstractualsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVGeneralConstractualsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVGeneralConstractualsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVOrganizationalChartsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVOrganizationalChartsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVOrganizationalChartsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVOrganizationalChartsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVOrganizationalChartsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVDeclarationsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVDeclarationsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVDeclarationsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVDeclarationsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVDeclarationsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVInvoicesFormsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVInvoicesFormsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVInvoicesFormsValidation:2/>*/
                return false;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVInvoicesFormsValidation:2/>*/
                return "Please upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVInvoicesFormsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVPriorOutstandingPolicyTermsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVPriorOutstandingPolicyTermsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVPriorOutstandingPolicyTermsValidation:2/>*/
                return @model.Supplier?.PriorOutstandingBalances?.Count() != 0 && (((@model.Supplier?.AcceptedPolicyTerms ?? false)) == false) && @model.Step2To3 && @model.IsSupplier;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVPriorOutstandingPolicyTermsValidation:2/>*/
                return "You have to accept the Policy Terms first in order to upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVPriorOutstandingPolicyTermsValidation",
                Evaluations = __evaluations
            };
        }


        /*<DataValidation:DVOutstandingPolicyTermsValidation:1/>*/
        [Rule(RuleType.DataValidation, EvalTime.OnSubmit)]
        public RuleResult DVOutstandingPolicyTermsValidation()
        {
            var __evaluations = new List<RuleEvaluation>();
            Func<int[], bool> __evaluation = (indexes) =>
            {
                /*<DataValidationCondition:DVOutstandingPolicyTermsValidation:2/>*/
                return @model.Supplier?.OutstandingBalances?.Count() != 0 && (((@model.Supplier?.AcceptedPolicyTerms ?? false)) == false) && @model.Step2To3;
            };
            Func<string> __message = () =>
            {
                /*<DataValidationMesage:DVOutstandingPolicyTermsValidation:2/>*/
                return "You have to accept the Policy Terms first in order to upload a file";
            };
            var __indexes = new int[] {};
            var __status = __evaluation.Invoke(__indexes);
            var __messageToSend = __status == true ? __message.Invoke() : null;
            __evaluations.Add(new RuleEvaluation
            {
                Status = __status,
                Expression = __messageToSend,
                Indexes = __indexes,
                DataValidationMessageType = DataValidationMessageType.ERROR
            });
            return new RuleResult
            {
                Name = "DVOutstandingPolicyTermsValidation",
                Evaluations = __evaluations
            };
        }

        #endregion
    }
}
