// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.TestingForm;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.TestingForm
{

    [RoutePrefix("TestingForm")]
    public class TestingFormController : ControllerBase<TestingFormViewModel, TestingFormViewModelDTO>
    {

        /*<Form:TestingForm:0/>*/
        public TestingFormController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(TestingFormController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title, Version = model.Version
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(TestingFormViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
            FileHelper.PendingUploadInstance.CommitAllFilesNew("TestingForm", @model);
        }

        public override void CommitAllFilesLegacy()
        {
            FileHelper.PendingUploadInstance.CommitAllLegacy("TestingForm", @model);
        }

        public override void ClearPendingFiles()
        {
            FileHelper.PendingUploadInstance.Clear("TestingForm");
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(TestingFormViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }

        [HttpGet]
        [Route("DownloadFile")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFile(string id)
        {
            return FileHelper.PendingDownloadInstance.DownloadByKey("TestingForm", id);
        }

        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new TestingFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_TestingForm"] = "Render";
            FileHelper.PendingUploadInstance.Clear("TestingForm");
            FileHelper.PendingDownloadInstance.Clear("TestingForm");
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new TestingFormViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_TestingForm"] = "Render";
            PushToHistory();
            FileHelper.PendingUploadInstance.Clear("TestingForm");
            FileHelper.PendingDownloadInstance.Clear("TestingForm");
            var _masterController = new DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="testing", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("testing")]
        public ActionResult testing()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("TestingForm", @model);
            var redirectInfo = Executetesting();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step2To1", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step2To1")]
        public ActionResult Step2To1()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("TestingForm", @model);
            var redirectInfo = ExecuteStep2To1();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="Step1To2", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("Step1To2")]
        public ActionResult Step1To2()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            FileHelper.PendingUploadInstance.UpdateModelWithFilesBinaryData("TestingForm", @model);
            var redirectInfo = ExecuteStep1To2();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.Supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == "Test22")?.FirstOrDefault();
            @model.Step1 = true;
            @model.Step1To2 = false;
            return _result;
        }
        /*<ControllerActionImplementation:testing:1/>*/
        public ActionResult Executetesting()
        {
            ActionResult _result = null;
            return _result;
        }
        /*<ControllerActionImplementation:Step2To1:1/>*/
        public ActionResult ExecuteStep2To1()
        {
            ActionResult _result = null;
            @model.Step1 = true;
            @model.Step1To2 = false;
            return _result;
        }
        /*<ControllerActionImplementation:Step1To2:1/>*/
        public ActionResult ExecuteStep1To2()
        {
            ActionResult _result = null;
            @model.Step1 = false;
            @model.Step1To2 = true;
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:Calendar:1/>*/
        /*<DataSourceFilter:Calendar:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Calendar_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Calendar_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Calendar_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:Calendar:1/>*/

        [HttpPost]
        [Route("Calendar_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult Calendar_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_Calendar_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AgreementDataSet_AgreementDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(TestingFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "Calendar");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:Calendar:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("Calendar_Datasource")]
        public JsonResult Calendar_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Calendar_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Calendar_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Calendar_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Calendar_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
            response.Data = items.Select(i => new AgreementDataSet_AgreementDTO(i, true)).ToList();
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart:1/>*/
        /*<DataSourceFilter:Chart:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Chart_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Chart_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart_Datasource")]
        public JsonResult Chart_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "fundedamount", "FundedAmount"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new AgreementDataSet_AgreementDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.InterestRate, new List<object> { _dto?.FundedAmount }, new List<object> { "FundedAmount" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart1:1/>*/
        /*<DataSourceFilter:Chart1:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Chart1_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart1_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_Chart1_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart1:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart1_Datasource")]
        public JsonResult Chart1_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart1_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart1_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "fundedamount", "FundedAmount"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new AgreementDataSet_AgreementDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.InterestRate, new List<object> { _dto?.FundedAmount }, new List<object> { "FundedAmount" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:TestingForm_AgreementDataSet:1/>*/
        /*<DataSourceFilter:TestingForm_AgreementDataSet:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_TestingForm_AgreementDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_TestingForm_AgreementDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> Get_TestingForm_AgreementDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:TestingForm_AgreementDataSet:1/>*/

        [HttpPost]
        [Route("TestingForm_AgreementDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult TestingForm_AgreementDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_TestingForm_AgreementDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new AgreementDataSet_AgreementDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(TestingFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "TestingForm_AgreementDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:TestingForm_AgreementDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "AgreementDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("TestingForm_AgreementDataSet_Datasource")]
        public JsonResult TestingForm_AgreementDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_TestingForm_AgreementDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_AgreementDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_AgreementDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_AgreementDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:TestingForm_InvoiceDataSet:1/>*/
        /*<DataSourceFilter:TestingForm_InvoiceDataSet:2/>*/
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Invoice> Get_TestingForm_InvoiceDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_TestingForm_InvoiceDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Invoice> Get_TestingForm_InvoiceDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DSS5_SupplyChainFinancialsOptimisation.BO.InvoiceExtensions.FindAgreement().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:TestingForm_InvoiceDataSet:1/>*/

        [HttpPost]
        [Route("TestingForm_InvoiceDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InvoiceDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult TestingForm_InvoiceDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_TestingForm_InvoiceDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new InvoiceDataSet_InvoiceDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(TestingFormViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "TestingForm_InvoiceDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:TestingForm_InvoiceDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "InvoiceDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("TestingForm_InvoiceDataSet_Datasource")]
        public JsonResult TestingForm_InvoiceDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_TestingForm_InvoiceDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_InvoiceDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_InvoiceDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_TestingForm_InvoiceDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DSS5_SupplyChainFinancialsOptimisation.BO.Invoice>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        #region File Attachment controls

        private Func<object, int[], string> Get_FileUpload_RelativePath
        {
            get
            {
                return (object _model, int[] indexes) =>
                {
                    var @model = _model as TestingFormViewModel;
                    var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[indexes[0]];
                    return  Path.GetFileName(parents0.Path);
                };
            }
        }

        [HttpPost]
        [Route("FileUpload_Download")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileUpload_Download()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var key = "";
            var pending = FileHelper.PendingUploadInstance.Get("TestingForm", "FileUpload", indexes);
            if (pending == null)
            {
                var expectedRelativePath = Get_FileUpload_RelativePath.Invoke(@model, indexes);
                pending = FileHelper.PendingUploadInstance.GetFromOtherControls("TestingForm", expectedRelativePath,
                          new List<string> { "FileUpload" },
                          @model,
                          indexes);
            }
            if (pending == null)
            {
                try
                {
                    key = FileHelper.PendingDownloadInstance.Add("TestingForm", Get_FileUpload_RelativePath, @model, indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Download failed. Possibly file not found. Control 'FileUpload'", x);
                    return Content(null);
                }
            }
            else
            {
                var relativeTargetPath = Get_FileUpload_RelativePath.Invoke(@model, indexes);
                var fileName = Path.GetFileName(relativeTargetPath);
                key = FileHelper.PendingDownloadInstance.Add("TestingForm", pending.BinaryContents, fileName);
            }
            return Content(key);
        }

        [HttpPost]
        [Route("FileUpload_Upload")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileUpload_Upload()
        {
            var postedData = _LoadViewModel();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var __pendingFile = ExecuteFileUpload_Upload(indexes, HttpContext.Request.Files);
            viewDTO.Model = new TestingFormViewModelDTO(@model);
            var _result = Json(new
            {
                Legacy = true,
                Type = "Data" ,
                Data = viewDTO.Serialize()

            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }

        public FileHelper.UploadInfo ExecuteFileUpload_Upload(int[] indexes, HttpFileCollectionBase files)
        {
            if (model.Supplier.PriorOutstandingBalances == null)
            {
                model.Supplier.PriorOutstandingBalances = new System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads>();
            }
            var originalCount = model.Supplier.PriorOutstandingBalances.Count();
            for (var __index = 0; __index < files.Count; __index++)
            {
                var file = files[__index];
                var newIndexes =  indexes == null ? new List<int>() : indexes.Take(indexes.Length - 1).ToList();
                newIndexes.Add(originalCount + __index);
                model.Supplier.AddPriorOutstandingBalances(new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierUploads());
                var pendingFile = new FileHelper.UploadInfo(file, "TestingForm", "FileUpload", newIndexes.ToArray());
                var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < newIndexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[newIndexes[0]];
                pendingFile.GetRelativePath = Get_FileUpload_RelativePath;
                parents0.Path = FileHelper.GetUtf8SafeFilename(file.FileName);
                IsDirty = true;
                FileHelper.PendingUploadInstance.Add(pendingFile);
            }
            return null;
        }

        [HttpPost]
        [Route("FileUpload_Remove")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult FileUpload_Remove()
        {
            var postedData = _LoadViewModel();
            var removedAutomatically = postedData["removedAutomatically"]?.ToString() == true.ToString();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var parents0 = model?.Supplier?.PriorOutstandingBalances?.Count() < indexes[0] + 1 ? null : model?.Supplier?.PriorOutstandingBalances?[indexes[0]];
            var pending = FileHelper.PendingUploadInstance.Get("TestingForm", "FileUpload", indexes);
            if (pending != null)
            {
                try
                {
                    FileHelper.PendingUploadInstance.RemoveByKey("TestingForm", "FileUpload", indexes);
                }
                catch (Exception x)
                {
                    _logger.Error($"Removing uploaded file failed. Possibly file not found. Control 'FileUpload'", x);
                    return Content(null);
                }
            }
            if (removedAutomatically) return Content(null); // Usually removed when user deletes grid row. No need to update model
            var removedElement = model.Supplier?.PriorOutstandingBalances.ElementAt(indexes[0]);
            model.Supplier?.RemovePriorOutstandingBalances(removedElement);
            IsDirty = true;
            viewDTO.Model = new TestingFormViewModelDTO(@model);
            var _result = Json(new
            {
                Type = "Data",
                Data = viewDTO.Serialize()
            }, JsonRequestBehavior.AllowGet);
            _result.MaxJsonLength = int.MaxValue;
            return _result;
        }
        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new TestingFormViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("TestingForm");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: TestingForm, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
