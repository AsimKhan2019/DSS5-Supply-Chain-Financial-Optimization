// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.CreditNoteForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage;
namespace DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm
{
    public class CreditNoteFormViewModel : MasterPageViewModel
    {
        public DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote CreditNote;
        public List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct> SupplierProducts;
        public string CSVPath;
        public string CreditNoteStandardPath;
        public string CreditNoteStandardPhoto;
        public bool UploadConfirmed;
        public bool IsSupplier;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.Order>> SelectOrderSelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>> PickListSelectedItems;


        public CreditNoteFormViewModel()
        {
            CreditNote = new DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote();
            SupplierProducts = new List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(CreditNote))
            {
                manager.Session.Evict(CreditNote);
            }
            if (SupplierProducts != null)
            {
                foreach (var item in SupplierProducts)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel))]
    public class CreditNoteFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel>
    {

        [JsonConstructor]
        public CreditNoteFormViewModelDTO() { }
        public CreditNoteFormViewModelDTO(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            CreditNote = original.CreditNote == null ? null : new CreditNote_CreditNoteDTO(original.CreditNote);
            SupplierProducts = original.SupplierProducts?.Select(x => new SupplierProducts_SupplierProductDTO(x)).ToList();
            CSVPath = original.CSVPath;
            CreditNoteStandardPath = original.CreditNoteStandardPath;
            CreditNoteStandardPhoto = original.CreditNoteStandardPhoto;
            UploadConfirmed = original.UploadConfirmed;
            IsSupplier = original.IsSupplier;
            SelectOrderSelectedItemKeys = original.SelectOrderSelectedItems == null
                                          ? null
                                          : original.SelectOrderSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            PickListSelectedItemKeys = original.PickListSelectedItems == null
                                       ? null
                                       : original.PickListSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public CreditNote_CreditNoteDTO CreditNote;
        public List<SupplierProducts_SupplierProductDTO> SupplierProducts;
        public string CSVPath;
        public string CreditNoteStandardPath;
        public string CreditNoteStandardPhoto;
        public bool UploadConfirmed;
        public bool IsSupplier;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel).FullName;
        public List<SelectedItemInfo<int?>> SelectOrderSelectedItemKeys;
        public List<SelectedItemInfo<int?>> PickListSelectedItemKeys;

        public new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel();
        }
        new  public DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.CreditNoteForm.CreditNoteFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.CreditNote = CreditNote == null
                                  ? null
                                  : CreditNote.Convert();
            original.SupplierProducts = SupplierProducts == null
                                        ? null
                                        : SupplierProducts.Select(q => q.Convert()).ToList();
            original.CSVPath = CSVPath;
            original.CreditNoteStandardPath = CreditNoteStandardPath;
            original.CreditNoteStandardPhoto = CreditNoteStandardPhoto;
            original.UploadConfirmed = UploadConfirmed;
            original.IsSupplier = IsSupplier;
            original.SelectOrderSelectedItems = SelectOrderSelectedItemKeys == null
                                                ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.Order>>()
                                                : SelectOrderSelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(x.SelectedItems.Select(y => ViewModels.CreditNoteForm.OrderDataSet_OrderDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.PickListSelectedItems = PickListSelectedItemKeys == null
                                             ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>>()
                                             : PickListSelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(x.SelectedItems.Select(y => ViewModels.CreditNoteForm.SupplierProductDataSet_SupplierProductDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote))]
    public class CreditNote_CreditNoteDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote>
    {

        [JsonConstructor]
        public CreditNote_CreditNoteDTO() { }
        public CreditNote_CreditNoteDTO(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Amount = original.Amount;
            CNoteAttachment = original.CNoteAttachment;
            CreditNoteDocument = original.CreditNoteDocument;
            CreditNoteNumber = original.CreditNoteNumber;
            DateIssued = original.DateIssued;
            Description = original.Description;
            Id = original.Id;
            Status = original.Status;
            TotalPrice = original.TotalPrice;
            Transaction = original.Transaction == null ? null : new CreditNote_CreditNote_Transaction_TransactionDTO(original.Transaction);
            Orders = original.Orders?.Select(x => new CreditNote_CreditNote_Orders_OrderDTO(x)).ToList();
            CreditNoteProducts = original.CreditNoteProducts?.Select(x => new CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO(x)).ToList();
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public decimal? Amount;
        public string CNoteAttachment;
        public string CreditNoteDocument;
        public string CreditNoteNumber;
        public DateTime? DateIssued;
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Status? Status;
        public decimal? TotalPrice;
        public CreditNote_CreditNote_Transaction_TransactionDTO Transaction;
        public List<CreditNote_CreditNote_Orders_OrderDTO> Orders;
        public List<CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO> CreditNoteProducts;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote original)
        {
            if (original == null) return;
            original.Amount = Amount;
            original.CNoteAttachment = CNoteAttachment;
            original.CreditNoteDocument = CreditNoteDocument;
            original.CreditNoteNumber = CreditNoteNumber;
            original.DateIssued = DateIssued;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.Status = Status;
            original.TotalPrice = TotalPrice;
            original.Transaction = Transaction == null
                                   ? null
                                   : Transaction.Convert();
            original.Orders = Orders == null
                              ? null
                              : Orders.Select(q => q.Convert()).ToList();
            original.CreditNoteProducts = CreditNoteProducts == null
                                          ? null
                                          : CreditNoteProducts.Select(q => q.Convert()).ToList();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNoteDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNote>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNoteDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Transaction))]
    public class CreditNote_CreditNote_Transaction_TransactionDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>
    {

        [JsonConstructor]
        public CreditNote_CreditNote_Transaction_TransactionDTO() { }
        public CreditNote_CreditNote_Transaction_TransactionDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Transaction original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            FundedAmount = original.FundedAmount;
            Id = original.Id;
            TransactionDateOccured = original.TransactionDateOccured;
            TransactionValue = original.TransactionValue;
            CommercialAgreement = original.CommercialAgreement == null ? null : new CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO(original.CommercialAgreement);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public decimal? FundedAmount;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public DateTime? TransactionDateOccured;
        public decimal? TransactionValue;
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO CommercialAgreement;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Transaction).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.Transaction GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Transaction();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Transaction Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Transaction();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Transaction original)
        {
            if (original == null) return;
            original.FundedAmount = FundedAmount;
            original.Id = Id ?? 0;
            original.TransactionDateOccured = TransactionDateOccured;
            original.TransactionValue = TransactionValue;
            original.CommercialAgreement = CommercialAgreement == null
                                           ? null
                                           : CommercialAgreement.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNote_Transaction_TransactionDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Transaction>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNote_Transaction_TransactionDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement))]
    public class CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>
    {

        [JsonConstructor]
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO() { }
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO(DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            PaymentTerms = original.PaymentTerms;
            ProductCategory = original.ProductCategory;
            ImportedBuyer = original.ImportedBuyer == null ? null : new CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO(original.ImportedBuyer);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string PaymentTerms;
        public string ProductCategory;
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO ImportedBuyer;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.PaymentTerms = PaymentTerms;
            original.ProductCategory = ProductCategory;
            original.ImportedBuyer = ImportedBuyer == null
                                     ? null
                                     : ImportedBuyer.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer))]
    public class CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer>
    {

        [JsonConstructor]
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO() { }
        public CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO(DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            AddressOne = original.AddressOne;
            AddressTwo = original.AddressTwo;
            Code = original.Code;
            Company = original.Company;
            Id = original.Id;
            Phone = original.Phone;
            VATNumber = original.VATNumber;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string AddressOne;
        public string AddressTwo;
        public string Code;
        public string Company;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Phone;
        public string VATNumber;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer original)
        {
            if (original == null) return;
            original.AddressOne = AddressOne;
            original.AddressTwo = AddressTwo;
            original.Code = Code;
            original.Company = Company;
            original.Id = Id ?? 0;
            original.Phone = Phone;
            original.VATNumber = VATNumber;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.ImportedBuyer>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNote_Transaction_Transaction_CommercialAgreement_CommercialAgreement_ImportedBuyer_ImportedBuyerDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Order))]
    public class CreditNote_CreditNote_Orders_OrderDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Order>
    {

        [JsonConstructor]
        public CreditNote_CreditNote_Orders_OrderDTO() { }
        public CreditNote_CreditNote_Orders_OrderDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Order original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            DateOfOrder = original.DateOfOrder;
            DeliveryTo = original.DeliveryTo;
            EstimatedDateOfDelivery = original.EstimatedDateOfDelivery;
            From = original.From;
            Id = original.Id;
            IntermediateParty = original.IntermediateParty;
            IsCancelled = original.IsCancelled;
            OrderAmount = original.OrderAmount;
            OrderAttachment = original.OrderAttachment;
            OrderNumber = original.OrderNumber;
            PaymentTerms = original.PaymentTerms;
            Status = original.Status;
            TotalPrice = original.TotalPrice;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public DateTime? DateOfOrder;
        public string DeliveryTo;
        public DateTime? EstimatedDateOfDelivery;
        public string From;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public bool IntermediateParty;
        public bool IsCancelled;
        public decimal? OrderAmount;
        public string OrderAttachment;
        public string OrderNumber;
        public string PaymentTerms;
        public DSS5_SupplyChainFinancialsOptimisation.BO.Status? Status;
        public decimal? TotalPrice;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Order).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.Order GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Order Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Order original)
        {
            if (original == null) return;
            original.DateOfOrder = DateOfOrder;
            original.DeliveryTo = DeliveryTo;
            original.EstimatedDateOfDelivery = EstimatedDateOfDelivery;
            original.From = From;
            original.Id = Id ?? 0;
            original.IntermediateParty = IntermediateParty;
            original.IsCancelled = IsCancelled;
            original.OrderAmount = OrderAmount;
            original.OrderAttachment = OrderAttachment;
            original.OrderNumber = OrderNumber;
            original.PaymentTerms = PaymentTerms;
            original.Status = Status;
            original.TotalPrice = TotalPrice;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNote_Orders_OrderDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNote_Orders_OrderDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct))]
    public class CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct>
    {

        [JsonConstructor]
        public CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO() { }
        public CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            Id = original.Id;
            LineTotalPrice = original.LineTotalPrice;
            MeasurementUnit = original.MeasurementUnit;
            Price = original.Price;
            Quantity = original.Quantity;
            UnitValue = original.UnitValue;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? LineTotalPrice;
        public string MeasurementUnit;
        public decimal? Price;
        public decimal? Quantity;
        public string UnitValue;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.LineTotalPrice = LineTotalPrice;
            original.MeasurementUnit = MeasurementUnit;
            original.Price = Price;
            original.Quantity = Quantity;
            original.UnitValue = UnitValue;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.CreditNoteProduct>(parsedKey, true);
            if(foundEntry != null)
            {
                return new CreditNote_CreditNote_CreditNoteProducts_CreditNoteProductDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct))]
    public class SupplierProducts_SupplierProductDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>
    {

        [JsonConstructor]
        public SupplierProducts_SupplierProductDTO() { }
        public SupplierProducts_SupplierProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Code = original.Code;
            Description = original.Description;
            Id = original.Id;
            MeasurementUnit = original.MeasurementUnit;
            Price = original.Price;
            UnitValue = original.UnitValue;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public string Code;
        public string Description;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string MeasurementUnit;
        public decimal? Price;
        public string UnitValue;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct original)
        {
            if (original == null) return;
            original.Code = Code;
            original.Description = Description;
            original.Id = Id ?? 0;
            original.MeasurementUnit = MeasurementUnit;
            original.Price = Price;
            original.UnitValue = UnitValue;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static SupplierProducts_SupplierProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(parsedKey, true);
            if(foundEntry != null)
            {
                return new SupplierProducts_SupplierProductDTO(foundEntry);
            }
            return null;
        }
    }
    #region Controller Action DTOS
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Order))]
    public class OrderDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Order>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderNumber;
        public DateTime? EstimatedDateOfDelivery;
        public DateTime? DateOfOrder;
        public decimal? OrderAmount;
        public decimal? TotalPrice;
        public string From;
        public string DeliveryTo;
        public List<OrderProductDTO> OrderProducts;


        [JsonConstructor]
        public OrderDTO() : base() {}
        public  static OrderDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CreditNoteFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderDTO(foundEntry);
            }
            return null;
        }
        public OrderDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Order original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Order original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderNumber = original.OrderNumber;
            EstimatedDateOfDelivery = original.EstimatedDateOfDelivery;
            DateOfOrder = original.DateOfOrder;
            OrderAmount = original.OrderAmount;
            TotalPrice = original.TotalPrice;
            From = original.From;
            DeliveryTo = original.DeliveryTo;
            OrderProducts = original.OrderProducts == null
                            ? new List<OrderProductDTO>()
                            : original.OrderProducts.Select(q => DTOHelper.GetDTOFromModel<OrderProductDTO>(q as DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct)).ToList();
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.Order GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Order Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderNumber = OrderNumber;
            model.EstimatedDateOfDelivery = EstimatedDateOfDelivery;
            model.DateOfOrder = DateOfOrder;
            model.OrderAmount = OrderAmount;
            model.TotalPrice = TotalPrice;
            model.From = From;
            model.DeliveryTo = DeliveryTo;
            model.OrderProducts = OrderProducts == null
                                  ? null
                                  : OrderProducts.Select(q => DTOHelper.GetModelFromDTO<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>(q)).ToList();
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct))]
    public class OrderProductDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>
    {
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string MeasurementUnit;
        public decimal? Price;
        public decimal? Quantity;
        public string UnitValue;
        public string Code;
        public string Description;


        [JsonConstructor]
        public OrderProductDTO() : base() {}
        public  static OrderProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CreditNoteFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderProductDTO(foundEntry);
            }
            return null;
        }
        public OrderProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            MeasurementUnit = original.MeasurementUnit;
            Price = original.Price;
            Quantity = original.Quantity;
            UnitValue = original.UnitValue;
            Code = original.Code;
            Description = original.Description;
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.OrderProduct>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.MeasurementUnit = MeasurementUnit;
            model.Price = Price;
            model.Quantity = Quantity;
            model.UnitValue = UnitValue;
            model.Code = Code;
            model.Description = Description;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }


    #endregion

    #region Unbound Datasource DTOS

    #endregion

    #region Datasource DTOs
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Order))]
    [DataSetDTO]
    public class OrderDataSet_OrderDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Order>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Order).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string OrderNumber;


        [JsonConstructor]
        public OrderDataSet_OrderDTO() : base() {}
        public  static OrderDataSet_OrderDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CreditNoteFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Order>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OrderDataSet_OrderDTO(foundEntry);
            }
            return null;
        }
        public OrderDataSet_OrderDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Order original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OrderDataSet_OrderDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Order original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            OrderNumber = original.OrderNumber;
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.Order GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Order Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.Order();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Order>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.OrderNumber = OrderNumber;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct))]
    [DataSetDTO]
    public class SupplierProductDataSet_SupplierProductDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string Code;
        public string Description;
        public string UnitValue;
        public string MeasurementUnit;
        public decimal? Price;


        [JsonConstructor]
        public SupplierProductDataSet_SupplierProductDTO() : base() {}
        public  static SupplierProductDataSet_SupplierProductDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new CreditNoteFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierProductDataSet_SupplierProductDTO(foundEntry);
            }
            return null;
        }
        public SupplierProductDataSet_SupplierProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierProductDataSet_SupplierProductDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Code = original.Code;
            Description = original.Description;
            UnitValue = original.UnitValue;
            MeasurementUnit = original.MeasurementUnit;
            Price = original.Price;
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierProduct>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Code = Code;
            model.Description = Description;
            model.UnitValue = UnitValue;
            model.MeasurementUnit = MeasurementUnit;
            model.Price = Price;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
