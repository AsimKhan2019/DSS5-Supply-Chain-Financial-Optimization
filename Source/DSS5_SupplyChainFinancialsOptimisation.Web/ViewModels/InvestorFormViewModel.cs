// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.InvestorForm;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage;
namespace DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm
{
    public class InvestorFormViewModel : MasterPageViewModel
    {
        public DSS5_SupplyChainFinancialsOptimisation.BO.Investor Investor;
        public string DomainFocus;
        public List<SelectedItemInfo<string>> txtDomainFocusSelectedItems;


        public InvestorFormViewModel()
        {
            Investor = new DSS5_SupplyChainFinancialsOptimisation.BO.Investor();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (manager.Session.Contains(Investor))
            {
                manager.Session.Evict(Investor);
            }
        }

    }


    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel))]
    public class InvestorFormViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel>
    {

        [JsonConstructor]
        public InvestorFormViewModelDTO() { }
        public InvestorFormViewModelDTO(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            Investor = original.Investor == null ? null : new Investor_InvestorDTO(original.Investor);
            DomainFocus = original.DomainFocus;
            txtDomainFocusSelectedItemKeys = original.txtDomainFocusSelectedItems == null
                                             ? null
                                             : original.txtDomainFocusSelectedItems.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public Investor_InvestorDTO Investor;
        public string DomainFocus;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel).FullName;
        public List<SelectedItemInfo<string>> txtDomainFocusSelectedItemKeys;

        public new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel();
        }
        new  public DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.InvestorForm.InvestorFormViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.Investor = Investor == null
                                ? null
                                : Investor.Convert();
            original.DomainFocus = DomainFocus;
            original.txtDomainFocusSelectedItems = txtDomainFocusSelectedItemKeys == null
                                                   ? new List<SelectedItemInfo<string>>()
                                                   : txtDomainFocusSelectedItemKeys.Select(x => new SelectedItemInfo<string>(x.SelectedItems.Select(y => y).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Investor))]
    public class Investor_InvestorDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>
    {

        [JsonConstructor]
        public Investor_InvestorDTO() { }
        public Investor_InvestorDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Investor original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            AddressOne = original.AddressOne;
            AddressTwo = original.AddressTwo;
            CommercialRegNo = original.CommercialRegNo;
            Company = original.Company;
            ContactPerson = original.ContactPerson;
            CRR = original.CRR;
            CustomerSizeFrom = original.CustomerSizeFrom;
            CustomerSizeTo = original.CustomerSizeTo;
            DomainFocus = original.DomainFocus;
            Email = original.Email;
            IAFC = original.IAFC;
            InvestorStatus = original.InvestorStatus;
            LocalJurisdiction = original.LocalJurisdiction;
            ManagingDirector = original.ManagingDirector;
            OtherDomainFocus = original.OtherDomainFocus;
            OtherMemberships = original.OtherMemberships;
            OtherMinRequirements = original.OtherMinRequirements;
            PrimaryPhone = original.PrimaryPhone;
            RegistrationNo = original.RegistrationNo;
            TargetMarket = original.TargetMarket;
            UploadCompliance = original.UploadCompliance;
            UserName = original.UserName;
            VatNumber = original.VatNumber;
            Agreements = original.Agreements?.Select(x => new Investor_Investor_Agreements_AgreementDTO(x)).ToList();
            AnnualTransactionVolumes = original.AnnualTransactionVolumes?.Select(x => new Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO(x)).ToList();
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string AddressOne;
        public string AddressTwo;
        public string CommercialRegNo;
        public string Company;
        public string ContactPerson;
        public bool CRR;
        public string CustomerSizeFrom;
        public string CustomerSizeTo;
        public string DomainFocus;
        public string Email;
        public bool IAFC;
        public string InvestorStatus;
        public string LocalJurisdiction;
        public string ManagingDirector;
        public string OtherDomainFocus;
        public string OtherMemberships;
        public string OtherMinRequirements;
        public string PrimaryPhone;
        public string RegistrationNo;
        public string TargetMarket;
        public string UploadCompliance;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string VatNumber;
        public List<Investor_Investor_Agreements_AgreementDTO> Agreements;
        public List<Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO> AnnualTransactionVolumes;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Investor).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS5_SupplyChainFinancialsOptimisation.BO.Investor GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Investor();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Investor Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Investor();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Investor original)
        {
            if (original == null) return;
            original.AddressOne = AddressOne;
            original.AddressTwo = AddressTwo;
            original.CommercialRegNo = CommercialRegNo;
            original.Company = Company;
            original.ContactPerson = ContactPerson;
            original.CRR = CRR;
            original.CustomerSizeFrom = CustomerSizeFrom;
            original.CustomerSizeTo = CustomerSizeTo;
            original.DomainFocus = DomainFocus;
            original.Email = Email;
            original.IAFC = IAFC;
            original.InvestorStatus = InvestorStatus;
            original.LocalJurisdiction = LocalJurisdiction;
            original.ManagingDirector = ManagingDirector;
            original.OtherDomainFocus = OtherDomainFocus;
            original.OtherMemberships = OtherMemberships;
            original.OtherMinRequirements = OtherMinRequirements;
            original.PrimaryPhone = PrimaryPhone;
            original.RegistrationNo = RegistrationNo;
            original.TargetMarket = TargetMarket;
            original.UploadCompliance = UploadCompliance;
            original.UserName = UserName ?? "";
            original.VatNumber = VatNumber;
            original.Agreements = Agreements == null
                                  ? null
                                  : Agreements.Select(q => q.Convert()).ToList();
            original.AnnualTransactionVolumes = AnnualTransactionVolumes == null
                                                ? null
                                                : AnnualTransactionVolumes.Select(q => q.Convert()).ToList();
        }
        public static Investor_InvestorDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Investor_InvestorDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Agreement))]
    public class Investor_Investor_Agreements_AgreementDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>
    {

        [JsonConstructor]
        public Investor_Investor_Agreements_AgreementDTO() { }
        public Investor_Investor_Agreements_AgreementDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Agreement original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Supplier = original.Supplier == null ? null : new Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO(original.Supplier);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO Supplier;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Agreement).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.Agreement GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Agreement();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Agreement Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Agreement();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Agreement original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Investor_Investor_Agreements_AgreementDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Investor_Investor_Agreements_AgreementDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier))]
    public class Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO() { }
        public Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            UserName = original.UserName;
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS5_SupplyChainFinancialsOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.UserName = UserName ?? "";
        }
        public static Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Investor_Investor_Agreements_Agreement_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume))]
    public class Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume>
    {

        [JsonConstructor]
        public Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO() { }
        public Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO(DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            Volume = original.Volume;
            Year = original.Year;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public decimal? Volume;
        public int? Year;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.Volume = Volume;
            original.Year = Year;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.AnnualTransactionVolume>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Investor_Investor_AnnualTransactionVolumes_AnnualTransactionVolumeDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.Profile))]
    [DataSetDTO]
    public class ProfileDataSource_ProfileDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.Profile>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.Profile).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public ProfileDataSource_ProfileDTO() : base() {}
        public  static ProfileDataSource_ProfileDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.Profile>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new InvestorFormController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.Profile>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new ProfileDataSource_ProfileDTO(foundEntry);
            }
            return null;
        }
        public ProfileDataSource_ProfileDTO(zAppDev.DotNet.Framework.Identity.Model.Profile original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public ProfileDataSource_ProfileDTO(zAppDev.DotNet.Framework.Identity.Model.Profile original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.Profile GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.Profile>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.Profile Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.Profile();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.Profile>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    #endregion

}
