// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.DashboardNew;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.MasterPage;
using DSS5_SupplyChainFinancialsOptimisation.UI.Controllers.MasterPage;
namespace DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew
{
    public class DashboardNewViewModel : MasterPageViewModel
    {
        public int? TotalOnTime;
        public int? TotalAsOrdered;
        public int? TotalInFull;
        public int? TotalImpeachments;
        public List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic> Top5Sellers;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart1SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart11SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart1112SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart1111SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart2SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> Chart3SelectedItems;
        public List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>> ChartSelectedItems;


        public DashboardNewViewModel()
        {
            Top5Sellers = new List<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>();
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
            if (Top5Sellers != null)
            {
                foreach (var item in Top5Sellers)
                {
                    if (manager.Session.Contains(item))
                    {
                        manager.Session.Evict(item);
                    }
                }
            }
        }

    }


    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel))]
    public class DashboardNewViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel>
    {

        [JsonConstructor]
        public DashboardNewViewModelDTO() { }
        public DashboardNewViewModelDTO(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            TotalOnTime = original.TotalOnTime;
            TotalAsOrdered = original.TotalAsOrdered;
            TotalInFull = original.TotalInFull;
            TotalImpeachments = original.TotalImpeachments;
            Top5Sellers = original.Top5Sellers?.Select(x => new Top5Sellers_SupplierStatisticDTO(x)).ToList();
            Chart1SelectedItemKeys = original.Chart1SelectedItems == null
                                     ? null
                                     : original.Chart1SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart11SelectedItemKeys = original.Chart11SelectedItems == null
                                      ? null
                                      : original.Chart11SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1112SelectedItemKeys = original.Chart1112SelectedItems == null
                                        ? null
                                        : original.Chart1112SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart1111SelectedItemKeys = original.Chart1111SelectedItems == null
                                        ? null
                                        : original.Chart1111SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart2SelectedItemKeys = original.Chart2SelectedItems == null
                                     ? null
                                     : original.Chart2SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            Chart3SelectedItemKeys = original.Chart3SelectedItems == null
                                     ? null
                                     : original.Chart3SelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ChartSelectedItemKeys = original.ChartSelectedItems == null
                                    ? null
                                    : original.ChartSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public int? TotalOnTime;
        public int? TotalAsOrdered;
        public int? TotalInFull;
        public int? TotalImpeachments;
        public List<Top5Sellers_SupplierStatisticDTO> Top5Sellers;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel).FullName;
        public List<SelectedItemInfo<int?>> Chart1SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart11SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart1112SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart1111SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart2SelectedItemKeys;
        public List<SelectedItemInfo<int?>> Chart3SelectedItemKeys;
        public List<SelectedItemInfo<int?>> ChartSelectedItemKeys;

        public new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel();
        }
        new  public DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.UI.ViewModels.DashboardNew.DashboardNewViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.TotalOnTime = TotalOnTime;
            original.TotalAsOrdered = TotalAsOrdered;
            original.TotalInFull = TotalInFull;
            original.TotalImpeachments = TotalImpeachments;
            original.Top5Sellers = Top5Sellers == null
                                   ? null
                                   : Top5Sellers.Select(q => q.Convert()).ToList();
            original.Chart1SelectedItems = Chart1SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                           : Chart1SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart11SelectedItems = Chart11SelectedItemKeys == null
                                            ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                            : Chart11SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1112SelectedItems = Chart1112SelectedItemKeys == null
                                              ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                              : Chart1112SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart1111SelectedItems = Chart1111SelectedItemKeys == null
                                              ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                              : Chart1111SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart2SelectedItems = Chart2SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                           : Chart2SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.Chart3SelectedItems = Chart3SelectedItemKeys == null
                                           ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                           : Chart3SelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.OnTimeDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ChartSelectedItems = ChartSelectedItemKeys == null
                                          ? new List<SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>>()
                                          : ChartSelectedItemKeys.Select(x => new SelectedItemInfo<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardNew.SupplierTurnoverDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic))]
    public class Top5Sellers_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>
    {

        [JsonConstructor]
        public Top5Sellers_SupplierStatisticDTO() { }
        public Top5Sellers_SupplierStatisticDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            CurrentTurnover = original.CurrentTurnover;
            Id = original.Id;
            Supplier = original.Supplier == null ? null : new Top5Sellers_SupplierStatistic_Supplier_SupplierDTO(original.Supplier);
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public decimal? CurrentTurnover;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public Top5Sellers_SupplierStatistic_Supplier_SupplierDTO Supplier;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original)
        {
            if (original == null) return;
            original.CurrentTurnover = CurrentTurnover;
            original.Id = Id ?? 0;
            original.Supplier = Supplier == null
                                ? null
                                : Supplier.Convert();
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Top5Sellers_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Top5Sellers_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier))]
    public class Top5Sellers_SupplierStatistic_Supplier_SupplierDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>
    {

        [JsonConstructor]
        public Top5Sellers_SupplierStatistic_Supplier_SupplierDTO() { }
        public Top5Sellers_SupplierStatistic_Supplier_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.UserName as object;
            Company = original.Company;
            UserName = original.UserName;
            SupplierContactInformation = original.SupplierContactInformation == null ? null : new Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO(original.SupplierContactInformation);
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public string Company;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO SupplierContactInformation;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier).FullName;
        public override List<string> _baseClasses => new List<string> {typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName};
        public DSS5_SupplyChainFinancialsOptimisation.BO.Supplier GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            if (parsedKey == default(string) || Equals(parsedKey, default(string)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.Supplier Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original)
        {
            if (original == null) return;
            original.Company = Company;
            original.UserName = UserName ?? "";
            original.SupplierContactInformation = SupplierContactInformation == null
                                                  ? null
                                                  : SupplierContactInformation.Convert();
        }
        public static Top5Sellers_SupplierStatistic_Supplier_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Top5Sellers_SupplierStatistic_Supplier_SupplierDTO(foundEntry);
            }
            return null;
        }
    }

    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation))]
    public class Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation>
    {

        [JsonConstructor]
        public Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO() { }
        public Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation original, bool parentIsDirty = false)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            _key = original.Id as object;
            Id = original.Id;
            ManagingDirector = original.ManagingDirector;
            Telephone = original.Telephone;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public string ManagingDirector;
        public string Telephone;
        public string _versionTimestamp;
        public  string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation).FullName;
        public override List<string> _baseClasses => null;
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            if (_key == null) return null;
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            if (parsedKey == default(int) || Equals(parsedKey, default(int)))
            {
                return new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation();
            }
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation original)
        {
            if (original == null) return;
            original.Id = Id ?? 0;
            original.ManagingDirector = ManagingDirector;
            original.Telephone = Telephone;
            original.VersionTimestamp = string.IsNullOrEmpty(this._versionTimestamp) ? null : BitConverter.GetBytes(Int64.Parse(this._versionTimestamp));
        }
        public static Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierContactInformation>(parsedKey, true);
            if(foundEntry != null)
            {
                return new Top5Sellers_SupplierStatistic_Supplier_Supplier_SupplierContactInformation_SupplierContactInformationDTO(foundEntry);
            }
            return null;
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic))]
    [DataSetDTO]
    public class OnTimeDataSet_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public OnTimeDataSet_SupplierDTO Supplier;
        public int? OnTimeDeliveries;
        public int? AsOrderedDeliveries;
        public int? InFullDeliveries;
        public int? TotalImpeachments;
        public int? TotalTransactions;


        [JsonConstructor]
        public OnTimeDataSet_SupplierStatisticDTO() : base() {}
        public  static OnTimeDataSet_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OnTimeDataSet_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public OnTimeDataSet_SupplierStatisticDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OnTimeDataSet_SupplierStatisticDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<OnTimeDataSet_SupplierDTO>(original.Supplier as DSS5_SupplyChainFinancialsOptimisation.BO.Supplier);
            OnTimeDeliveries = original.OnTimeDeliveries;
            AsOrderedDeliveries = original.AsOrderedDeliveries;
            InFullDeliveries = original.InFullDeliveries;
            TotalImpeachments = original.TotalImpeachments;
            TotalTransactions = original.TotalTransactions;
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(Supplier);
            model.OnTimeDeliveries = OnTimeDeliveries;
            model.AsOrderedDeliveries = AsOrderedDeliveries;
            model.InFullDeliveries = InFullDeliveries;
            model.TotalImpeachments = TotalImpeachments;
            model.TotalTransactions = TotalTransactions;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class OnTimeDataSet_SupplierDTO : OnTimeDataSet_ApplicationUserDTO, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string Company;


        [JsonConstructor]
        public OnTimeDataSet_SupplierDTO() : base() {}
        public new static OnTimeDataSet_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OnTimeDataSet_SupplierDTO(foundEntry);
            }
            return null;
        }
        public OnTimeDataSet_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public OnTimeDataSet_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Company = original.Company;
        }

        public new static DSS5_SupplyChainFinancialsOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            model.Company = Company;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class OnTimeDataSet_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OnTimeDataSet_ApplicationUserDTO() : base() {}
        public  static OnTimeDataSet_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OnTimeDataSet_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public OnTimeDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public OnTimeDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public SupplierTurnoverDataSet_SupplierDTO Supplier;
        public decimal? CurrentTurnover;


        [JsonConstructor]
        public SupplierTurnoverDataSet_SupplierStatisticDTO() : base() {}
        public  static SupplierTurnoverDataSet_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_SupplierStatisticDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierTurnoverDataSet_SupplierStatisticDTO(DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<SupplierTurnoverDataSet_SupplierDTO>(original.Supplier as DSS5_SupplyChainFinancialsOptimisation.BO.Supplier);
            CurrentTurnover = original.CurrentTurnover;
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false);
        }
        public DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(Supplier);
            model.CurrentTurnover = CurrentTurnover;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_SupplierDTO : SupplierTurnoverDataSet_ApplicationUserDTO, IViewModelDTO<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier).FullName;
        public new string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string Company;


        [JsonConstructor]
        public SupplierTurnoverDataSet_SupplierDTO() : base() {}
        public new static SupplierTurnoverDataSet_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierTurnoverDataSet_SupplierDTO(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Company = original.Company;
        }

        public new static DSS5_SupplyChainFinancialsOptimisation.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false);
        }
        public new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier Convert()
        {
            var model = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            model.Company = Company;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SupplierTurnoverDataSet_ApplicationUserDTO() : base() {}
        public  static SupplierTurnoverDataSet_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardNewController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierTurnoverDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    #endregion

}
