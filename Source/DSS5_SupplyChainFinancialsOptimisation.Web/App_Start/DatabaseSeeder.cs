// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System.Collections.Generic;
using System.Linq;
using System.Collections.Concurrent;
using System.Reflection;
using zAppDev.DotNet.Framework.Data;
using Microsoft.Extensions.Configuration;

using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.DAL;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DSS5_SupplyChainFinancialsOptimisation
{
    public class DatabaseSeeder
    {
        private ConcurrentDictionary<string, ApplicationPermission> _applicationPermissionDictionary = null;
        private IConfiguration configuration;

        public DatabaseSeeder(IConfiguration configuration = null)
        {
            this.configuration = configuration;
        }

        private ApplicationPermission CreateOrUpdatePermission(string name, string description, bool isCustom, Repository repo)
        {
            if (_applicationPermissionDictionary == null)
            {
                _applicationPermissionDictionary = new ConcurrentDictionary<string, ApplicationPermission>();
                var applicationPermissions = repo.Get<ApplicationPermission>(a => a.Name != null);
                foreach (var item in applicationPermissions)
                {
                    if (!_applicationPermissionDictionary.ContainsKey(item.Name))
                    {
                        _applicationPermissionDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            bool update = false;
            ApplicationPermission p = null;
            if (_applicationPermissionDictionary.ContainsKey(name))
            {
                p = _applicationPermissionDictionary[name];
                if (p.IsCustom != isCustom)
                {
                    p.IsCustom = isCustom;
                    update = true;
                }
                if (p.Description != description)
                {
                    p.Description = description;
                    update = true;
                }
            }
            else
            {
                update = true;
                p = new ApplicationPermission();
                p.Name = name;
                p.IsCustom = isCustom;
                p.Description = description;
            }
            if (update)
            {
                repo.Save(p);
            }
            return p;
        }


        private ConcurrentDictionary<string, ApplicationOperation> _applicationOperationDictionary = null;


        private string GetApplicationOperationKey(string name, string parent, string type)
        {
            return name + '|' + parent + '|' + type;
        }

        private ApplicationOperation CreateOrUpdateOperation(string name, string parent, string type,
                bool isAvailableToAllAuthorizedUsers,
                bool isAvailableToAnonymous, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationOperationDictionary == null)
            {
                _applicationOperationDictionary = new ConcurrentDictionary<string, ApplicationOperation>();
                var applicationOperations = repo.Get<ApplicationOperation>(a => a.Name != null);
                foreach (ApplicationOperation item in applicationOperations)
                {
                    string key = GetApplicationOperationKey(item.Name, item.ParentControllerName, item.Type);
                    if (!_applicationOperationDictionary.ContainsKey(key))
                    {
                        _applicationOperationDictionary.TryAdd(key, item);
                    }
                }
            }
            ApplicationOperation op = null;
            string currentKey = GetApplicationOperationKey(name, parent, type);
            bool update = false;
            if (_applicationOperationDictionary.ContainsKey(currentKey))
            {
                op = _applicationOperationDictionary[currentKey];
                if (op.IsAvailableToAllAuthorizedUsers != isAvailableToAllAuthorizedUsers)
                {
                    op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                    update = true;
                }
                if (op.IsAvailableToAnonymous != isAvailableToAnonymous)
                {
                    op.IsAvailableToAnonymous = isAvailableToAnonymous;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = op.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationOperation>(op, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                op = new ApplicationOperation();
                op.Name = name;
                op.Type = type;
                op.IsAvailableToAllAuthorizedUsers = isAvailableToAllAuthorizedUsers;
                op.IsAvailableToAnonymous = isAvailableToAnonymous;
                op.ParentControllerName = parent;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        op.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(op);
            }
            return op;
        }



        private ConcurrentDictionary<string, ApplicationRole> _applicationRoleDictionary = null;
        private ApplicationRole CreateOrUpdateRole(string name, string description, IEnumerable<ApplicationPermission> perms, Repository repo)
        {
            if (_applicationRoleDictionary == null)
            {
                _applicationRoleDictionary = new ConcurrentDictionary<string, ApplicationRole>();
                var applicationRoles = repo.Get<ApplicationRole>(a => a.Name != null);
                foreach (ApplicationRole item in applicationRoles)
                {
                    if (!_applicationRoleDictionary.ContainsKey(item.Name))
                    {
                        _applicationRoleDictionary.TryAdd(item.Name, item);
                    }
                }
            }
            ApplicationRole role = null;
            bool update = false;
            if (_applicationRoleDictionary.ContainsKey(name))
            {
                role = _applicationRoleDictionary[name];
                if (role.Description != description)
                {
                    role.Description = description;
                    update = true;
                }
                if (role.IsCustom != false)
                {
                    role.IsCustom = false;
                    update = true;
                }
                List<ApplicationPermission> applicationPermissions = role.Permissions.Where(p => !p.IsCustom).ToList();
                HandleApplicationPermissions<ApplicationRole>(role, applicationPermissions, perms, ref update);
            }
            else
            {
                update = true;
                role = new ApplicationRole();
                role.Name = name;
                role.Description = description;
                role.IsCustom = false;
                if (perms != null)
                {
                    foreach (var p in perms)
                    {
                        role.AddPermissions(p);
                    }
                }
            }
            if (update)
            {
                repo.Save(role);
            }
            return role;
        }


        private void RemoveApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions)
        {
            MethodInfo removePermissions = typeof(T).GetMethod("RemovePermissions");
            foreach (var p in applicationPermissions)
            {
                removePermissions.Invoke(objT, new object[] { p });
            }
        }



        private void AddApplicationPermissions<T>(T objT,IEnumerable<ApplicationPermission> perms)
        {
            MethodInfo addPermissions = typeof(T).GetMethod("AddPermissions", new[] { typeof(ApplicationPermission) });
            foreach (var p in perms)
            {
                addPermissions.Invoke(objT, new object[] { p });
            }
        }


        private void HandleApplicationPermissions<T>(T objT, List<ApplicationPermission> applicationPermissions,
                IEnumerable<ApplicationPermission> perms,ref bool update)
        {
            if (perms == null)
            {
                if (applicationPermissions != null && applicationPermissions.Count > 0)
                {
                    update = true;
                    RemoveApplicationPermissions<T>(objT, applicationPermissions);
                }
            }
            else if (perms.Any())
            {
                if (applicationPermissions == null || applicationPermissions.Count == 0)
                {
                    update = true;
                    AddApplicationPermissions<T>(objT, perms);
                }
                else
                {
                    if (perms.Count() != applicationPermissions.Count)
                    {
                        update = true;
                        RemoveApplicationPermissions<T>(objT, applicationPermissions);
                        AddApplicationPermissions<T>(objT, perms);
                    }
                    else
                    {
                        bool diffFound = false;
                        foreach (var p in perms)
                        {
                            //if (!applicationPermissions.Contains(p))
                            var checkApplicationPermission = applicationPermissions.FirstOrDefault(a => a.Name == p.Name);
                            if (checkApplicationPermission == null)
                            {
                                diffFound = true;
                                break;
                            }
                        }
                        if (diffFound)
                        {
                            update = true;
                            RemoveApplicationPermissions<T>(objT, applicationPermissions);
                            AddApplicationPermissions<T>(objT, perms);
                        }
                    }
                }
            }
        }



        public void UpdateAuthorizationTables()
        {
            var confValue = System.Configuration.ConfigurationManager.AppSettings["SeedSecurityTables"];
            bool seedSecurityTables = true;
            bool bSeedSecurityTables;
            if (bool.TryParse(confValue, out bSeedSecurityTables))
            {
                seedSecurityTables = bSeedSecurityTables;
            }
            if(!seedSecurityTables) return;
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            MiniSessionManager.ExecuteInUoW(manager =>
            {
                var repo = new Repository(manager);
                var allRoles = new List<ApplicationRole>();
                #region Permissions
                var manageUsersPermission = CreateOrUpdatePermission("ManageUsers", "Can Manage Users", false, repo);
                var manageRolesPermission = CreateOrUpdatePermission("ManageRoles", "Can Manage Roles", false, repo);
                var managePermissionsPermission = CreateOrUpdatePermission("ManagePermissions", "Can Manage Permissions", false, repo);
                var manageOperationsPermission = CreateOrUpdatePermission("ManageOperations", "Can Manage Operations", false, repo);
                var manageSettingsPermission = CreateOrUpdatePermission("ManageSettings", "Can Manage Settings", false, repo);
                var manageApplicationDataPermission = CreateOrUpdatePermission("ManageApplicationData", "Can Manage Application Data", false, repo);
                var customerSelectionAndAdminAddPermission = CreateOrUpdatePermission("CustomerSelectionAndAdmin_Add", "CustomerSelectionAndAdmin_Add", false, repo);
                var guestSupplierPermission = CreateOrUpdatePermission("GuestSupplier", "Is Guest Supplier", false, repo);
                var registeredSupplierPermission = CreateOrUpdatePermission("RegisteredSupplier", "Is Registered Supplier", false, repo);
                var validatedSupplierPermission = CreateOrUpdatePermission("ValidatedSupplier", "Is Validated Supplier", false, repo);
                var activeSupplierPermission = CreateOrUpdatePermission("ActiveSupplier", "Is Active Supplier", false, repo);
                var investorPermission = CreateOrUpdatePermission("Investor", "Is Investor", false, repo);
                var buyerPermission = CreateOrUpdatePermission("Buyer", "Is Buyer", false, repo);
                var pendingRegisteredPermission = CreateOrUpdatePermission("PendingRegistered", "Pending Registered Supplier", false, repo);
                var pendingValidatedPermission = CreateOrUpdatePermission("PendingValidated", "Pending Validated Supplier", false, repo);
                var developerPermission = CreateOrUpdatePermission("Developer", "Is Developer", false, repo);
                var pendingInvestorPermission = CreateOrUpdatePermission("PendingInvestor", "Pending Investor", false, repo);
                var guestInvestorPermission = CreateOrUpdatePermission("GuestInvestor", "Guest Investor", false, repo);
                var intermediaryPermission = CreateOrUpdatePermission("Intermediary", "Is Intermediary", false, repo);
                var rejectedSupplierPermission = CreateOrUpdatePermission("RejectedSupplier", "Rejected Supplier", false, repo);
                #endregion
                #region Operations
                CreateOrUpdateOperation("GeneralOperation", "ErrorPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SendErrorToAdministrator", "ErrorPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "FirstAdminSetup", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "FirstAdminSetup", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "HomePage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "HomePage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "NotFoundPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "NotFoundPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignInPage", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Load", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("SignIn", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("SendConfirmationMail", "SignInPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignOutPage", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("SignOut", "SignOutPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "SignOutPage", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "Unauthorized", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "Unauthorized", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UserPreferences", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "UserPreferences", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "UserPreferences", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("LanguageBoxDataSet", "UserPreferences", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("LocaleBoxDataSet", "UserPreferences", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPage", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPage", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SignOut", "MasterPage", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageForSlide", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageForSlide", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingForm", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("AddApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("EditApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("SaveApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("DeleteApplicationSetting", "ApplicationSettingForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ApplicationSettingsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ApplicationSettingsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "ApplicationSettingsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageSettingsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ChangePassword", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ChangePassword", "ChangePassword", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ForgotPassword", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Render", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("ResetPassword", "ForgotPassword", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageOperation", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("EditOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("SaveOperation", "ManageOperation", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Button2Changed", "ManageOperation", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageOperation", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManagePermission", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("NewPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("EditPermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("SavePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("DeletePermission", "ManagePermission", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button4Changed", "ManagePermission", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button41Changed", "ManagePermission", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button5Changed", "ManagePermission", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button4DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button41DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Button5DataSet", "ManagePermission", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageRole", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("NewRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("EditRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("SaveRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("DeleteRole", "ManageRole", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("AddPermissionChanged", "ManageRole", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("AddPermissionDataSet", "ManageRole", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ManageUser", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("NewUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("EditUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SaveUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteUser", "ManageUser", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button1Changed", "ManageUser", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button2Changed", "ManageUser", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Button1DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Button2DataSet", "ManageUser", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "OperationsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "OperationsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "OperationsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageOperationsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PermissionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("Refresh", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PermissionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "PermissionsList", ClaimTypes.Dataset, false, false,
                                        new [] { managePermissionsPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "RolesList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("Refresh", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "RolesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "RolesList", ClaimTypes.Dataset, false, false,
                                        new [] { manageRolesPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "UsersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Refresh", "UsersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("List1DataSet", "UsersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageSignIn", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageSignIn", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CreateAdmin", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Index", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("Create", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("AuthorizeAccess", "CreateAdmin", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ActiveSuppliersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ActiveSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSet", "ActiveSuppliersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminInvoiceList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminInvoiceList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AdminInvoiceList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("InvoiceDataSet", "AdminInvoiceList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "Administration", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "Administration", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("UpdateStats", "Administration", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminLetterOfCreditList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Render", "AdminLetterOfCreditList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("LetterOfCreditDataSet", "AdminLetterOfCreditList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminOrdersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminOrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AdminOrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("OrderDataSet", "AdminOrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "AdminOrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminPaymentsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminPaymentsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "AdminPaymentsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminTransactionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Render", "AdminTransactionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "AdminTransactionsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AgreementForm", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("AddAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("EditAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("InvestorSaveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission, validatedSupplierPermission, investorPermission }, repo);
                CreateOrUpdateOperation("AdminApproveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("ApproveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("SupplierSaveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("AdminSaveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteListAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierApproveAgreement", "AgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("InvestorDataSource", "AgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSource", "AgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "AgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AgreementList", ClaimTypes.GenericAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AgreementList", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AgreementList", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("AgreementDataSet", "AgreementList", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "BillOfLanding", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("AddBillOfLanding", "BillOfLanding", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("EditBillOfLanding", "BillOfLanding", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SaveBillOfLanding", "BillOfLanding", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DeleteBillOfLanding", "BillOfLanding", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("NewBillOfLanding", "BillOfLanding", ClaimTypes.ControllerAction, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("OnOrderSelected", "BillOfLanding", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("OrderDataSet", "BillOfLanding", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("IntermediaryDataSet", "BillOfLanding", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MeanOfTransportDataSet", "BillOfLanding", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "BuyerForm", ClaimTypes.GenericAction, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("AddBuyer", "BuyerForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("EditBuyer", "BuyerForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("SaveBuyer", "BuyerForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("DeleteBuyer", "BuyerForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("ProfileDataSource", "BuyerForm", ClaimTypes.Dataset, false, false,
                                        new [] { buyerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "BuyerPaymentForm", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Render", "BuyerPaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Search", "BuyerPaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Pay", "BuyerPaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("AgreementDataSet", "BuyerPaymentForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "CCDForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("AddCustomsClearingDocumentation", "CCDForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("EditCustomsClearingDocumentation", "CCDForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SaveCustomsClearingDocumentation", "CCDForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DeleteCustomsClearingDocumentation", "CCDForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("NewCCD", "CCDForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSource", "CCDForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CommercialAgreementForm", ClaimTypes.GenericAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("AddCommercialAgreement", "CommercialAgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("EditCommercialAgreementInvestor", "CommercialAgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("EditCommercialAgreement", "CommercialAgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("SaveCommercialAgreement", "CommercialAgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteCommercialAgreement", "CommercialAgreementForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSource", "CommercialAgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("BuyerDataSource", "CommercialAgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("ImportedBuyerDataSource", "CommercialAgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierBuyerstDataSet", "CommercialAgreementForm", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "CommercialAgreementsList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission, validatedSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "CommercialAgreementsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, validatedSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "CommercialAgreementsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, validatedSupplierPermission }, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "CommercialAgreementsList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission, validatedSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "DashboardNew", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("Render", "DashboardNew", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("OnTimeDataSet", "DashboardNew", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("SupplierTurnoverDataSet", "DashboardNew", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "DashboardStatistics", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission, developerPermission, investorPermission }, repo);
                CreateOrUpdateOperation("Render", "DashboardStatistics", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission, developerPermission, investorPermission }, repo);
                CreateOrUpdateOperation("CloseModal", "DashboardStatistics", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SupplierStatisticDataSet", "DashboardStatistics", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, developerPermission, investorPermission }, repo);
                CreateOrUpdateOperation("SupplierStatisticDataSetOnTime", "DashboardStatistics", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, developerPermission, investorPermission }, repo);
                CreateOrUpdateOperation("SupplierTurnoverDataSet", "DashboardStatistics", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission, developerPermission, investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "EmailConfirmation", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Confirm", "EmailConfirmation", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "EmailConfirmationFailure", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "EmailConfirmationFailure", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "FinishedTransactionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "FinishedTransactionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "FinishedTransactionsList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "HelpSectionForm", ClaimTypes.GenericAction, false, false, null, repo);
                CreateOrUpdateOperation("Render", "HelpSectionForm", ClaimTypes.ControllerAction, false, false, null, repo);
                CreateOrUpdateOperation("CloseModal", "HelpSectionForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "IntermediaryTransactionList", ClaimTypes.GenericAction, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("Render", "IntermediaryTransactionList", ClaimTypes.ControllerAction, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "IntermediaryTransactionList", ClaimTypes.Dataset, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorCommercialAgreementsList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorCommercialAgreementsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "InvestorCommercialAgreementsList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorCreditNoteList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorCreditNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvestorCreditNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("CreditNoteDataSet", "InvestorCreditNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("InvestorCreditNoteDataSet", "InvestorCreditNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorDeliveryNoteList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorDeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvestorDeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeliveryNoteDataSet", "InvestorDeliveryNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("InvestorDeliveryNoteDataSet", "InvestorDeliveryNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorForm", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("AddInvestor", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission }, repo);
                CreateOrUpdateOperation("EditInvestor", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission }, repo);
                CreateOrUpdateOperation("SaveInvestor", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission }, repo);
                CreateOrUpdateOperation("DeleteInvestor", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("InterestedInInvestor", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("EditInvestor_", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("RequestValidation", "InvestorForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestInvestorPermission }, repo);
                CreateOrUpdateOperation("ProfileDataSource", "InvestorForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("DomainFocusChoices", "InvestorForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("DFocus", "InvestorForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, pendingInvestorPermission, guestInvestorPermission, validatedSupplierPermission, activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorInvoicesList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorInvoicesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvestorInvoicesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("InvoiceDataSet", "InvestorInvoicesList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorLetterOfCreditList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Render", "InvestorLetterOfCreditList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("LetterOfCreditDataSet", "InvestorLetterOfCreditList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorOrdersList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorOrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("FindAgreement", "InvestorOrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvestorOrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("OrderDataSet", "InvestorOrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("InvestorOrderDataSet", "InvestorOrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorPODsList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorPODsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvestorPODsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("ProofOfDeliveryDataSet", "InvestorPODsList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorsList", ClaimTypes.GenericAction, false, false,
                                        new [] { validatedSupplierPermission, manageUsersPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvestorsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, manageUsersPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("InvestorDataSet", "InvestorsList", ClaimTypes.Dataset, false, false,
                                        new [] { validatedSupplierPermission, manageUsersPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvestorTransactionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Render", "InvestorTransactionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "InvestorTransactionsList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "LetterOfCreditForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddLetterOfCredit", "LetterOfCreditForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditLetterOfCredit", "LetterOfCreditForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveLetterOfCredit", "LetterOfCreditForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DeleteLetterOfCredit", "LetterOfCreditForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("NewLoC", "LetterOfCreditForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("TransactionDataSource", "LetterOfCreditForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SelectOrder", "LetterOfCreditForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "LetterOfCreditList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "LetterOfCreditList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "LetterOfCreditList", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("LetterOfCredit", "LetterOfCreditList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "OrderForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddOrder", "OrderForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("EditOrder", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveOrder", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteOrder", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("CloseMod", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("newOrderProduct", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("insertProducts", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("NewOrder", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveAsDraft", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("FinalSave", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ImportFromCSV", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SubmitChanges", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Exit", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Test", "OrderForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ProofOfDeliveryDataSource", "OrderForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "OrderForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SupplierProductDataSet", "OrderForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("TransactionDataSet", "OrderForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("IntermediaryDataset", "OrderForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "OrdersList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "OrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "OrdersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("OrderDataSet", "OrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "OrdersList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PartialProofOfDeliveryForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("AddPartialProofOfDelivery", "PartialProofOfDeliveryForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("EditPartialProofOfDelivery", "PartialProofOfDeliveryForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SavePartialProofOfDelivery", "PartialProofOfDeliveryForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DeletePartialProofOfDelivery", "PartialProofOfDeliveryForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("NewPPOD", "PartialProofOfDeliveryForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { intermediaryPermission }, repo);
                CreateOrUpdateOperation("QualityDataset", "PartialProofOfDeliveryForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("QuantityDataset", "PartialProofOfDeliveryForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DeliveryStatusDataset", "PartialProofOfDeliveryForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "PaymentForm", ClaimTypes.GenericAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("AddPayment", "PaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("EditPayment", "PaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("SavePayment", "PaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("DeletePayment", "PaymentForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("RegistrationPayment", "PaymentForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("PaymentMethod", "PaymentForm", ClaimTypes.Dataset, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("ExpirationMonth", "PaymentForm", ClaimTypes.Dataset, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("ExpirationYear", "PaymentForm", ClaimTypes.Dataset, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PendingInvestorsList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PendingInvestorsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("ValidateInvestor", "PendingInvestorsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("InvestorDataSet", "PendingInvestorsList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PendingRegisteredSuppliersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PendingRegisteredSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("HandlePayment", "PendingRegisteredSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSet", "PendingRegisteredSuppliersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PendingValidatedSuppliersList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "PendingValidatedSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("ValidateSupplier", "PendingValidatedSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSet", "PendingValidatedSuppliersList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ResetPassword", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "ResetPassword", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Reset", "ResetPassword", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SignUp", ClaimTypes.GenericAction, false, true, null, repo);
                CreateOrUpdateOperation("Render", "SignUp", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("SignUp", "SignUp", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("IntermediaryRender", "SignUp", ClaimTypes.ControllerAction, false, true, null, repo);
                CreateOrUpdateOperation("BussinessTypes", "SignUp", ClaimTypes.Dataset, false, true, null, repo);
                CreateOrUpdateOperation("IntermediaryDataSet", "SignUp", ClaimTypes.Dataset, false, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SlideIntermidiary", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "SlideIntermidiary", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Save", "SlideIntermidiary", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("IntermediaryTypes", "SlideIntermidiary", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SupplierForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddSupplier", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission }, repo);
                CreateOrUpdateOperation("EditSupplier", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { guestSupplierPermission, pendingRegisteredPermission, registeredSupplierPermission, validatedSupplierPermission, pendingValidatedPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteSupplier", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Save", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { registeredSupplierPermission, pendingValidatedPermission, validatedSupplierPermission, activeSupplierPermission }, repo);
                CreateOrUpdateOperation("PassedEvaluation", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { registeredSupplierPermission, pendingValidatedPermission, validatedSupplierPermission, activeSupplierPermission, guestSupplierPermission, pendingRegisteredPermission }, repo);
                CreateOrUpdateOperation("SaveGuestProfile", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("BuyRegistration", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("PassedRerun", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditSupplier_", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("RequestValidation", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { registeredSupplierPermission, pendingValidatedPermission, validatedSupplierPermission }, repo);
                CreateOrUpdateOperation("InterestedToAgreement", "SupplierForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("ModalClose", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step1To2", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step2To3", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step3To4", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step4To5", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step3To2", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step2To1", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step4To3", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Step5To4", "SupplierForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DropdownBoxOccurenceDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("DropdownBoxExistenceDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("DropdownBoxHasCompanyDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("DropdownBoxAreCompanyDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("DataSetEnvironment", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("BusinessDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("BusinessSegment", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("AverageInvoiceValue", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("ApplicableComLaw", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("YesNoDataSet", "SupplierForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SupplierPaymentsList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "SupplierPaymentsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "SupplierPaymentsList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "TestingForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "TestingForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("testing", "TestingForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Step2To1", "TestingForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("Step1To2", "TestingForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("AgreementDataSet", "TestingForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("InvoiceDataSet", "TestingForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "TrackingMapForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "TrackingMapForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("DisplayDirections", "TrackingMapForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("ShowRoute", "TrackingMapForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("GetOriginDestination", "TrackingMapForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SupplierDataSet", "TrackingMapForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("MapPointDataset", "TrackingMapForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "TransactionForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddTransaction", "TransactionForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("EditTransaction", "TransactionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveTransaction", "TransactionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteTransaction", "TransactionForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSource", "TransactionForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "TransactionPaymentsForm", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Render", "TransactionPaymentsForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Search", "TransactionPaymentsForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("AddPayment", "TransactionPaymentsForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("Pay", "TransactionPaymentsForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("PayRestAmount", "TransactionPaymentsForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("AgreementDataSet", "TransactionPaymentsForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("TransactionsDataset", "TransactionPaymentsForm", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "TransactionsList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "TransactionsList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("TransactionDataSet", "TransactionsList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "TurnoverForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "TurnoverForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("RenderSupplier", "TurnoverForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("TurnoverStatisticDataSet", "TurnoverForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "TurnoverPerMonthForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "TurnoverPerMonthForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("TurnoverStatisticDataSet", "TurnoverPerMonthForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "UserSettingsForm", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "UserSettingsForm", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("CurrencyDataSet", "UserSettingsForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("DateFormat", "UserSettingsForm", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ValidatedSuppliersList", ClaimTypes.GenericAction, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ValidatedSuppliersList", ClaimTypes.ControllerAction, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("SupplierDataSet", "ValidatedSuppliersList", ClaimTypes.Dataset, false, false,
                                        new [] { investorPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "Dashboard", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "Dashboard", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("ApplicationOperationDataSet", "Dashboard", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("ApplicationRoleDataSet", "Dashboard", ClaimTypes.Dataset, true, true, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "MasterPageForLists", ClaimTypes.GenericAction, true, true, null, repo);
                CreateOrUpdateOperation("Render", "MasterPageForLists", ClaimTypes.ControllerAction, true, true, null, repo);
                CreateOrUpdateOperation("SignOut", "MasterPageForLists", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "DeveloperTools", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("ImportLekosCSV", "DeveloperTools", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Render", "DeveloperTools", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("SubmitChanges", "DeveloperTools", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "DevTool", ClaimTypes.GenericAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("ImportRAYMETRICSCSV", "DevTool", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("Render", "DevTool", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("SubmitChanges", "DevTool", ClaimTypes.ControllerAction, false, false,
                                        new [] { developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "HelpGuestSupplier", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Render", "HelpGuestSupplier", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "HelpRegisteredSupplier", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Render", "HelpRegisteredSupplier", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "HelpValidatedSupplier", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Render", "HelpValidatedSupplier", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "PopUpChart", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "PopUpChart", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "PopUpDataAvailability", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "PopUpDataAvailability", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "SupplierPolicyTerms", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("Render", "SupplierPolicyTerms", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminCreditNotesList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminCreditNotesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AdminCreditNotesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("CreditNoteDataSet", "AdminCreditNotesList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminDeliveryNoteList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminDeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AdminDeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeliveryNoteDataSet", "AdminDeliveryNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "AdminProofOfDeliveryList", ClaimTypes.GenericAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "AdminProofOfDeliveryList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "AdminProofOfDeliveryList", ClaimTypes.ControllerAction, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("ProofOfDeliveryDataSet", "AdminProofOfDeliveryList", ClaimTypes.Dataset, false, false,
                                        new [] { manageUsersPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "CreditNoteForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddCreditNote", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditCreditNote", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveCreditNote", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteCreditNote", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("NewCreditNote", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OnOrderSelected", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("InsertProducts", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ImportFromCSV", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SubmitChanges", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Exit", "CreditNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OrderDataSet", "CreditNoteForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SupplierProductDataSet", "CreditNoteForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "CreditNotesList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "CreditNotesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "CreditNotesList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("CreditNoteDataSet", "CreditNotesList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "DeliveryNoteForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddDeliveryNote", "DeliveryNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditDeliveryNote", "DeliveryNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveDeliveryNote", "DeliveryNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteDeliveryNote", "DeliveryNoteForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("NewDeliveryNote", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("OnOrderSelected", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("InsertProducts", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("ImportFromCSV", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("SubmitChanges", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("Exit", "DeliveryNoteForm", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, manageUsersPermission }, repo);
                CreateOrUpdateOperation("OrderDataSet", "DeliveryNoteForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SupplierProductDataSet", "DeliveryNoteForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "DeliveryNoteList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "DeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "DeliveryNoteList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("DeliveryNoteDataSet", "DeliveryNoteList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvoiceForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddInvoice", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditInvoice", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveInvoice", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteInvoice", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("NewInvoice", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OnOrderSelected", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("InsertProducts", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("ImportFromCSV", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SubmitChanges", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("Exit", "InvoiceForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("OrderDataSet", "InvoiceForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("CommercialAgreementDataSet", "InvoiceForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SelectOrder", "InvoiceForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SupplierProductDataSet", "InvoiceForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "InvoiceList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "InvoiceList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "InvoiceList", ClaimTypes.ControllerAction, false, false,
                                        new [] { validatedSupplierPermission, activeSupplierPermission, pendingValidatedPermission, registeredSupplierPermission }, repo);
                CreateOrUpdateOperation("InvoiceDataSet", "InvoiceList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission }, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProofOfDeliveryForm", ClaimTypes.GenericAction, true, false, null, repo);
                CreateOrUpdateOperation("AddProofOfDelivery", "ProofOfDeliveryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("EditProofOfDelivery", "ProofOfDeliveryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("SaveProofOfDelivery", "ProofOfDeliveryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("DeleteProofOfDelivery", "ProofOfDeliveryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("NewPOD", "ProofOfDeliveryForm", ClaimTypes.ControllerAction, true, false, null, repo);
                CreateOrUpdateOperation("QualityDataSet", "ProofOfDeliveryForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("QuantityDataSet", "ProofOfDeliveryForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("DeliveryStatusDataSet", "ProofOfDeliveryForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("SelectOrder", "ProofOfDeliveryForm", ClaimTypes.Dataset, true, false, null, repo);
                CreateOrUpdateOperation("GeneralOperation", "ProofOfDeliveryList", ClaimTypes.GenericAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("Retrieve", "ProofOfDeliveryList", ClaimTypes.ControllerAction, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("DeleteSeclected", "ProofOfDeliveryList", ClaimTypes.ControllerAction, false, false,
                                        new [] { registeredSupplierPermission, pendingValidatedPermission, validatedSupplierPermission, activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("ProofOfDeliveryDataSet", "ProofOfDeliveryList", ClaimTypes.Dataset, false, false,
                                        new [] { activeSupplierPermission, developerPermission }, repo);
                CreateOrUpdateOperation("AlgorithmCheck", "AlgorithmCheck", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Contact", "Contact", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("HomePageContact", "HomePageContact", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Create", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Get", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Count", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("GetAll", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Save", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "IntermediaryUser", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("IsIntermediary", "IntermediaryUser", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Create", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Get", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Count", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("GetAll", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Save", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "Investor", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Find", "Investor", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("Create", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Get", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Count", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("GetAll", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Save", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Delete", "Supplier", ClaimTypes.ExposedService, true, false, null, repo);
                CreateOrUpdateOperation("Find", "Supplier", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("IsSupplier", "Supplier", ClaimTypes.ExposedService, true, true, null, repo);
                CreateOrUpdateOperation("IsInRole", "Supplier", ClaimTypes.ExposedService, true, true, null, repo);
                #endregion
                #region Roles
                allRoles = new List<ApplicationRole>
                {
                    CreateOrUpdateRole("Administrator", "Administrator",
                    new [] { manageUsersPermission, manageRolesPermission, managePermissionsPermission, manageOperationsPermission, manageSettingsPermission, manageApplicationDataPermission }, repo),
                    CreateOrUpdateRole("GuestSupplier", "Guest Supplier",
                    new [] { guestSupplierPermission }, repo),
                    CreateOrUpdateRole("RegisteredSupplier", "Registered Supplier",
                    new [] { registeredSupplierPermission }, repo),
                    CreateOrUpdateRole("ValidatedSupplier", "Validated Supplier",
                    new [] { validatedSupplierPermission }, repo),
                    CreateOrUpdateRole("ActiveSupplier", "Active Supplier",
                    new [] { activeSupplierPermission }, repo),
                    CreateOrUpdateRole("Investor", "Is Investor",
                    new [] { investorPermission }, repo),
                    CreateOrUpdateRole("Buyer", "Is Buyer",
                    new [] { buyerPermission }, repo),
                    CreateOrUpdateRole("PendingRegistered", "Pending Registered Supplier",
                    new [] { pendingRegisteredPermission }, repo),
                    CreateOrUpdateRole("PendingValidated", "Pending Validated Supplier",
                    new [] { pendingValidatedPermission }, repo),
                    CreateOrUpdateRole("Developer", "",
                    new [] { manageUsersPermission, managePermissionsPermission, manageRolesPermission, manageOperationsPermission, manageApplicationDataPermission, manageSettingsPermission, customerSelectionAndAdminAddPermission, guestSupplierPermission, registeredSupplierPermission, validatedSupplierPermission, activeSupplierPermission, investorPermission, buyerPermission, pendingRegisteredPermission, pendingValidatedPermission, developerPermission }, repo),
                    CreateOrUpdateRole("PendingInvestor", "Pending Investor",
                    new [] { pendingInvestorPermission }, repo),
                    CreateOrUpdateRole("GuestInvestor", "Is Guest Investor",
                    new [] { guestInvestorPermission }, repo),
                    CreateOrUpdateRole("Supplier", "Is in general, a Supplier",
                    new [] { guestSupplierPermission, registeredSupplierPermission, pendingRegisteredPermission, pendingValidatedPermission, validatedSupplierPermission, activeSupplierPermission }, repo),
                    CreateOrUpdateRole("Intermediary", "",
                    new [] { intermediaryPermission }, repo),
                    CreateOrUpdateRole("RejectedSupplier", "Rejected Supplier",
                    new [] { rejectedSupplierPermission }, repo),
                };
                #endregion
            });
            watch.Stop();
            log4net.LogManager.GetLogger(typeof(DatabaseSeeder)).Info($"Startup.Database finished in {watch.ElapsedMilliseconds}ms");
        }
    }
}
