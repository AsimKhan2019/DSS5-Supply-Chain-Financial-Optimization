// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.BoTesting.Tests.Common;
using DSS5_SupplyChainFinancialsOptimisation.DAL;

namespace DSS5_SupplyChainFinancialsOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for AgreementTest and is intended
    ///to contain all AgreementTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Agreement Repository Tests")]
    [Category("Agreement Repository Tests")]
    internal class AgreementTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Agreement`")]
        [Order(0)]
        public void Agreement_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_investor_agreements = new DSS5_SupplyChainFinancialsOptimisation.BO.Investor
            {
                InvestorId = 1174,
                PrimaryPhone = "Investor_PrimaryPhone",
                SecondaryPhone = "Investor_SecondaryPhone",
                Fax = "Investor_Fax",
                WebSite = "Investor_WebSite",
                Company = "Investor_Company",
                ContactPerson = "Investor_ContactPerson",
                Logo = "Investor_Logo",
                SupervisingAuthority = "Investor_SupervisingAuthority",
                RegistrationNo = "Investor_RegistrationNo",
                DomainFocus = "Investor_DomainFocus",
                TurnOver = 2222222222.22222M,
                VatNumber = "Investor_VatNumber",
                AddressTwo = "Investor_AddressTwo",
                AddressOne = "Investor_AddressOne",
                ManagingDirector = "Investor_ManagingDirector",
                TargetMarket = "Investor_TargetMarket",
                CustomerSizeFrom = "Investor_CustomerSizeFrom",
                CustomerSizeTo = "Investor_CustomerSizeTo",
                LocalJurisdiction = "Investor_LocalJurisdiction",
                CommercialRegNo = "Investor_CommercialRegNo",
                OtherMinRequirements = "Investor_OtherMinRequirements",
                CRR = true,
                UploadCompliance = "Investor_UploadCompliance",
                OtherMemberships = "Investor_OtherMemberships",
                OtherDomainFocus = "Investor_OtherDomainFocus",
                InvestorStatus = "Investor_InvestorStatus",
                IAFC = true,
                Prefix = "Investor_Prefix",
                UserName = "3fde4e4f-505e-430e-87c8-2d85592c414aInvestor_UserName",
                PasswordHash = "Investor_PasswordHash",
                SecurityStamp = "Investor_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 3988,
                Name = "Investor_Name",
                Email = "Investor_Email",
                PhoneNumber = "Investor_PhoneNumber",
                LockoutEndDate = now,
            };
            var _agreement_supplier_agreements = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier
            {
                SupplierId = 4870,
                Company = "Supplier_Company",
                CompanyLogo = "Supplier_CompanyLogo",
                Business = "Supplier_Business",
                CurrentAmount = "Supplier_CurrentAmount",
                AverageAmount = "Supplier_AverageAmount",
                PercentageOfCreditNotes = "Supplier_PercentageOfCreditNotes",
                PrimaryPhone = "Supplier_PrimaryPhone",
                SecondaryPhone = "Supplier_SecondaryPhone",
                Fax = "Supplier_Fax",
                WebSite = "Supplier_WebSite",
                AcceptedPolicyTerms = true,
                SupplierStatus = "Supplier_SupplierStatus",
                DomainFocus = "Supplier_DomainFocus",
                EvaluationResult = "Supplier_EvaluationResult",
                EvaluationCountResult = 1087,
                AnnualTurnover = true,
                BEnvironment = true,
                PTerms = true,
                Average = true,
                InvoiceValue = true,
                EqRatio = true,
                Prefix = "Supplier_Prefix",
                VATNumber = "Supplier_VATNumber",
                MarketSegment = "Supplier_MarketSegment",
                AdditionalComments = "Supplier_AdditionalComments",
                AdditionalCommentsStep2 = "Supplier_AdditionalCommentsStep2",
                AdditionalCommentsStep3 = "Supplier_AdditionalCommentsStep3",
                UserName = "68106594-7ade-445d-b4b1-4f627e907448Supplier_UserName",
                PasswordHash = "Supplier_PasswordHash",
                SecurityStamp = "Supplier_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 1898,
                Name = "Supplier_Name",
                Email = "Supplier_Email",
                PhoneNumber = "Supplier_PhoneNumber",
                LockoutEndDate = now,
            };
            var _agreement_fundedtransactions_agreement = new DSS5_SupplyChainFinancialsOptimisation.BO.FundedTransaction
            {
                FundingPercentage = "FundedTransaction_FundingPercentage",
                TransactionStatus = "FundedTransaction_TransactionStatus",
            };
            var _agreement_fundedtransactions_agreement2 = new DSS5_SupplyChainFinancialsOptimisation.BO.FundedTransaction
            {
                FundingPercentage = "FundedTransaction_FundingPercentage",
                TransactionStatus = "FundedTransaction_TransactionStatus",
            };
            var _agreement_agreementstatus_agreement = new DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus
            {
                Status = "AgreementStatus_Status",
                DateOccured = now,
                ProvidedBy = "AgreementStatus_ProvidedBy",
            };
            var _agreement_agreementstatus_agreement2 = new DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus
            {
                Status = "AgreementStatus_Status",
                DateOccured = now,
                ProvidedBy = "AgreementStatus_ProvidedBy",
            };
            var _agreement_documentagreement_agreement = new DSS5_SupplyChainFinancialsOptimisation.BO.DocumentAgreement
            {
                SupplierDocument = "DocumentAgreement_SupplierDocument",
                InvestorDocument = "DocumentAgreement_InvestorDocument",
                AdminDocument = "DocumentAgreement_AdminDocument",
            };
            var _agreement_commercialagreements_agreement = new DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement
            {
                ProductCategory = "CommercialAgreement_ProductCategory",
                PaymentTerms = "CommercialAgreement_PaymentTerms",
            };
            var _agreement_commercialagreements_agreement2 = new DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement
            {
                ProductCategory = "CommercialAgreement_ProductCategory",
                PaymentTerms = "CommercialAgreement_PaymentTerms",
            };
            new PersistenceSpecification<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(Session)
            .CheckProperty(p => p.StartDate, now)
            .CheckProperty(p => p.EndDate, now)
            .CheckProperty(p => p.FundedRate, 222222.22M)
            .CheckProperty(p => p.FundedAmount, 222222.22M)
            .CheckProperty(p => p.InterestRate, 222222.22M)
            .CheckReference(p => p.Investor, _agreement_investor_agreements)
            .CheckReference(p => p.Supplier, _agreement_supplier_agreements)
            .CheckBag(p => p.FundedTransactions, (new List<DSS5_SupplyChainFinancialsOptimisation.BO.FundedTransaction>
            {
                _agreement_fundedtransactions_agreement,
                _agreement_fundedtransactions_agreement2
            }))
            .CheckBag(p => p.AgreementStatus, (new List<DSS5_SupplyChainFinancialsOptimisation.BO.AgreementStatus>
            {
                _agreement_agreementstatus_agreement,
                _agreement_agreementstatus_agreement2
            }))
            .CheckReference(p => p.DocumentAgreement, _agreement_documentagreement_agreement)
            .CheckBag(p => p.CommercialAgreements, (new List<DSS5_SupplyChainFinancialsOptimisation.BO.CommercialAgreement>
            {
                _agreement_commercialagreements_agreement,
                _agreement_commercialagreements_agreement2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Agreement`")]
        [Order(1)]
        public void Agreement_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.Agreement>(
                              a => true
                              && a.StartDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.EndDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.FundedRate + 123 > 0)
                              && (a.FundedAmount + 123 > 0)
                              && (a.InterestRate + 123 > 0)
                              && a.Investor != null
                              && a.Supplier != null
                              && a.FundedTransactions.Any()
                              && a.AgreementStatus.Any()
                              && a.DocumentAgreement != null
                              && a.CommercialAgreements.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}