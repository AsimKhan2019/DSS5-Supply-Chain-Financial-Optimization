// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using DSS5_SupplyChainFinancialsOptimisation.BoTesting.Tests.Common;
using DSS5_SupplyChainFinancialsOptimisation.DAL;

namespace DSS5_SupplyChainFinancialsOptimisation.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for TurnoverStatisticTest and is intended
    ///to contain all TurnoverStatisticTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("TurnoverStatistic Repository Tests")]
    [Category("TurnoverStatistic Repository Tests")]
    internal class TurnoverStatisticTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `TurnoverStatistic`")]
        [Order(0)]
        public void TurnoverStatistic_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _turnover_supplier_turnoverstatistic = new DSS5_SupplyChainFinancialsOptimisation.BO.Supplier
            {
                SupplierId = 278,
                Company = "Supplier_Company",
                CompanyLogo = "Supplier_CompanyLogo",
                Business = "Supplier_Business",
                CurrentAmount = "Supplier_CurrentAmount",
                AverageAmount = "Supplier_AverageAmount",
                PercentageOfCreditNotes = "Supplier_PercentageOfCreditNotes",
                PrimaryPhone = "Supplier_PrimaryPhone",
                SecondaryPhone = "Supplier_SecondaryPhone",
                Fax = "Supplier_Fax",
                WebSite = "Supplier_WebSite",
                AcceptedPolicyTerms = true,
                SupplierStatus = "Supplier_SupplierStatus",
                DomainFocus = "Supplier_DomainFocus",
                EvaluationResult = "Supplier_EvaluationResult",
                EvaluationCountResult = 2477,
                AnnualTurnover = true,
                BEnvironment = true,
                PTerms = true,
                Average = true,
                InvoiceValue = true,
                EqRatio = true,
                Prefix = "Supplier_Prefix",
                VATNumber = "Supplier_VATNumber",
                MarketSegment = "Supplier_MarketSegment",
                AdditionalComments = "Supplier_AdditionalComments",
                AdditionalCommentsStep2 = "Supplier_AdditionalCommentsStep2",
                AdditionalCommentsStep3 = "Supplier_AdditionalCommentsStep3",
                UserName = "926706ea-c36c-49b4-913b-88bb92fb583aSupplier_UserName",
                PasswordHash = "Supplier_PasswordHash",
                SecurityStamp = "Supplier_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 3173,
                Name = "Supplier_Name",
                Email = "Supplier_Email",
                PhoneNumber = "Supplier_PhoneNumber",
                LockoutEndDate = now,
            };
            new PersistenceSpecification<DSS5_SupplyChainFinancialsOptimisation.BO.TurnoverStatistic>(Session)
            .CheckProperty(p => p.TotalAmount, 222222.22M)
            .CheckProperty(p => p.Year, 7698)
            .CheckProperty(p => p.Month, 9547)
            .CheckProperty(p => p.TotalAmountFunded, 222222.22M)
            .CheckProperty(p => p.TotalTransactions, 8857)
            .CheckProperty(p => p.TotalCreditNotes, 4707)
            .CheckProperty(p => p.CNAmount, 222222.22M)
            .CheckReference(p => p.Supplier, _turnover_supplier_turnoverstatistic)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `TurnoverStatistic`")]
        [Order(1)]
        public void TurnoverStatistic_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS5_SupplyChainFinancialsOptimisation.BO.TurnoverStatistic> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS5_SupplyChainFinancialsOptimisation.BO.TurnoverStatistic>(
                              a => true
                              && (a.TotalAmount + 123 > 0)
                              && (a.Year + 123 > 0)
                              && (a.Month + 123 > 0)
                              && (a.TotalAmountFunded + 123 > 0)
                              && (a.TotalTransactions + 123 > 0)
                              && (a.TotalCreditNotes + 123 > 0)
                              && (a.CNAmount + 123 > 0)
                              && a.Supplier != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}