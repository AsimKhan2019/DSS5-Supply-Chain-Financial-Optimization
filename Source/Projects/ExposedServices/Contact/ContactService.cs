// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS5_SupplyChainFinancialsOptimisation.Services.Contact.DataContracts;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using AutoMapper;

namespace DSS5_SupplyChainFinancialsOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class ContactService : IContactService
    {
        public ContactDTO Contact(string _first_name, string _last_name, string _represents, string _company_name, string _email, string _phone, string _message, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputfirst_name = _first_name;
                var inputlast_name = _last_name;
                var inputrepresents = _represents;
                var inputcompany_name = _company_name;
                var inputemail = _email;
                var inputphone = _phone;
                var inputmessage = _message;
                var _contact = ContactImplementation(inputfirst_name, inputlast_name, inputrepresents, inputcompany_name, inputemail, inputphone, inputmessage);
                var result = Mapper.Map<DSS5_SupplyChainFinancialsOptimisation.BO.Contact, ContactDTO>(_contact);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Contact Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<ContactDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Contact>();
            Mapper.CreateMap<DSS5_SupplyChainFinancialsOptimisation.BO.Contact, ContactDTO>();
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.Contact ContactImplementation(string first_name, string last_name, string represents, string company_name, string email, string phone, string message)
        {
            DSS5_SupplyChainFinancialsOptimisation.BO.Contact contact = new DSS5_SupplyChainFinancialsOptimisation.BO.Contact();
            contact.FirstName = first_name;
            contact.LastName = last_name;
            contact.Represents = represents;
            contact.Company = company_name;
            contact.Email = email;
            contact.Phone = phone;
            contact.Message = message;
            System.Collections.Generic.List<string> recipients = new System.Collections.Generic.List<string>();
            recipients.Add("info@tome-finance.com");
            zAppDev.DotNet.Framework.Utilities.EMailMessage em = new zAppDev.DotNet.Framework.Utilities.EMailMessage();
            em.Subject = "Tome Finance User Contact";
            em.IsBodyHtml = true;
            em.Body = "<p>New message from</p> <p>First Name: " + (contact?.FirstName ?? "") + "</p> <p>Last Name: " + (contact?.LastName ?? "") + "</p> <p>Represents: " + (contact?.Represents ?? "") + "</p> <p>Company Name: " + (contact?.Company ?? "") + "</p> <p>E-mail: " + (contact?.Email ?? "") + "</p> <p>Phone Number: " + (contact?.Phone ?? "") + "</p> <p>Message: " + (contact?.Message ?? "") + "</p> <p>&nbsp;</p>";
            em.To = recipients.Distinct().ToList().ToList();
            zAppDev.DotNet.Framework.Utilities.Email.SendMail(em, true);
            return contact;
        }


    }
}