// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using zAppDev.DotNet.Framework.Mvc;
using AppCode;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
namespace DSS5_SupplyChainFinancialsOptimisation.Web.Code.WebApi
{
    public class SupplierIsInRoleDto
    {
        public string name
        {
            get;
            set;
        } public System.Collections.Generic.List<string> roles
        {
            get;
            set;
        }
    }

    [RoutePrefix("api/Supplier")]
    [WebApiThrottle.EnableThrottling()]
    public class SupplierController : BasicApiCtrl
    {

        /// <summary>
        /// Creates a new Supplier
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("Create")]
        [HttpPost]
        public void Create([FromBody]DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts.SupplierDTO newSupplier)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Create(newSupplier,_RequestSourceIp, _UserName);
        }

        /// <summary>
        /// Get an Supplier insance based on UserName
        /// </summary>
        /// <returns>Supplier</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpGet]
        public DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts.SupplierDTO Get(string UserName = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Get(UserName,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        /// Count all Suppliers
        /// </summary>
        /// <returns>int</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("count")]
        [HttpGet]
        public HttpResponseMessage Count()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Count(_RequestSourceIp, _UserName);
            return SendString(result);
        }

        /// <summary>
        /// Gets all Suppliers. Max pageSize is 50
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("all")]
        [HttpGet]
        public System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts.SupplierDTO> GetAll(int? pageSize = 0, int? pageIndex = 0)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).GetAll(pageSize,pageIndex,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        /// Saves a Supplier insance
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpPost]
        public void Save([FromBody]DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts.SupplierDTO Supplier)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Save(Supplier,_RequestSourceIp, _UserName);
        }

        /// <summary>
        /// Deletes a Supplier insance based on UserName
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpDelete]
        public void Delete(string UserName = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Delete(UserName,_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("Find")]
        [HttpGet]
        public System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts.SupplierDTO> Find(string usern = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).Find(usern,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>bool</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("IsSupplier")]
        [HttpGet]
        public HttpResponseMessage IsSupplier(string username = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).IsSupplier(username,_RequestSourceIp, _UserName);
            return SendString(result);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>bool</returns>
        [CustomWebApiActionFilter(LogEnabled = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("IsInRole")]
        [HttpPost]
        public HttpResponseMessage IsInRole([FromBody]SupplierIsInRoleDto data)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var httpContext = (HttpContextWrapper)Request.Properties["MS_HttpContext"];
            if(data == null)
            {
                throw new ArgumentNullException(nameof(data), "No input provided.");
            }
            var name = data.name;
            var roles = data.roles;
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.SupplierService()).IsInRole(name,roles,_RequestSourceIp, _UserName);
            return SendString(result);
        }
    }
}
