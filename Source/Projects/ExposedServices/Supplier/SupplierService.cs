// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS5_SupplyChainFinancialsOptimisation.Services.Supplier.DataContracts;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using AutoMapper;

namespace DSS5_SupplyChainFinancialsOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class SupplierService : ISupplierService
    {
        public void Create(SupplierDTO _newSupplier, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputnewSupplier = Mapper.Map<SupplierDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(_newSupplier);
                CreateImplementation(inputnewSupplier);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public SupplierDTO Get(string userName, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputUserName = userName;
                var _get = GetImplementation(inputUserName);
                var result = Mapper.Map<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier, SupplierDTO>(_get);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public int? Count(string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var _count = CountImplementation();
                var result = _count;
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public System.Collections.Generic.List<SupplierDTO> GetAll(int? _pageSize, int? _pageIndex, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputpageSize = _pageSize;
                var inputpageIndex = _pageIndex;
                var _getAll = GetAllImplementation(inputpageSize, inputpageIndex);
                var result = Mapper.Map<System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>, System.Collections.Generic.List<SupplierDTO>>(_getAll);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public void Save(SupplierDTO supplier, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputSupplier = Mapper.Map<SupplierDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(supplier);
                SaveImplementation(inputSupplier);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public void Delete(string userName, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputUserName = userName;
                DeleteImplementation(inputUserName);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public System.Collections.Generic.List<SupplierDTO> Find(string _usern, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputusern = _usern;
                var _exposedOperation = FindImplementation(inputusern);
                var result = Mapper.Map<System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>, System.Collections.Generic.List<SupplierDTO>>(_exposedOperation);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public bool IsSupplier(string _username, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputusername = _username;
                var _isSupplier = IsSupplierImplementation(inputusername);
                var result = _isSupplier;
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }
        public bool IsInRole(string _name, System.Collections.Generic.List<string> _roles, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputname = _name;
                var inputroles = _roles;
                var _isInRole = IsInRoleImplementation(inputname, inputroles);
                var result = _isInRole;
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Supplier Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<SupplierDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>();
            Mapper.CreateMap<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier, SupplierDTO>();
        }

        public static void CreateImplementation(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier newSupplier)
        {
            newSupplier.UserName = "";
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(newSupplier);
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.Supplier GetImplementation(string UserName)
        {
            return  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(UserName);
        }

        public static int? CountImplementation()
        {
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetCount<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>();
        }

        public static System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier> GetAllImplementation(int? pageSize, int? pageIndex)
        {
            if ((pageSize > 50))
            {
                pageSize = 50;
            }
            var _count0 = 0;
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAll<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(pageIndex.GetValueOrDefault(0) * pageSize.GetValueOrDefault(0), (pageSize).GetValueOrDefault(0),out _count0);
        }

        public static void SaveImplementation(DSS5_SupplyChainFinancialsOptimisation.BO.Supplier Supplier)
        {
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(Supplier);
        }

        public static void DeleteImplementation(string UserName)
        {
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteSupplier( new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(UserName));
        }

        public static System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier> FindImplementation(string usern)
        {
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Get<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((a) => a.UserName == usern);
        }

        public static bool IsSupplierImplementation(string username)
        {
            System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier> supplier = new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Get<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>((item) => item.UserName == username);
            if ((supplier?.Count() == 0))
            {
                return false;
            }
            else
            {
                return (supplier?.FirstOrDefault()?.IsSupplier() ?? false);
            }
        }

        public static bool IsInRoleImplementation(string name, System.Collections.Generic.List<string> roles)
        {
            DSS5_SupplyChainFinancialsOptimisation.BO.Supplier supplier =  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Supplier>(name);
            if ((supplier == null))
            {
                zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "API",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "------------------1 is in role ");
                return false;
            }
            else
            {
                foreach (var role in roles ?? Enumerable.Empty<string>())
                {
                    if ((supplier?.Roles?.Any((a) => a.Name == role) ?? false))
                    {
                        zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "API",  DSS5_SupplyChainFinancialsOptimisation.Hubs.EventsHub.RaiseDebugMessage, "------------------2 " + role);
                        return true;
                    }
                }
                return false;
            }
        }


    }
}