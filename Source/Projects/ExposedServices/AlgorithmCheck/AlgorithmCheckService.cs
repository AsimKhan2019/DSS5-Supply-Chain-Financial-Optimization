// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS5_SupplyChainFinancialsOptimisation.Services.AlgorithmCheck.DataContracts;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using AutoMapper;

namespace DSS5_SupplyChainFinancialsOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class AlgorithmCheckService : IAlgorithmCheckService
    {
        public AlgorithmCheckDTO AlgorithmCheck(decimal? _annual_turnover, string _b2b, string _b2c, decimal? _payment_term_of_receivable, decimal? _average_of_payment_terms, decimal? _average_invoice_value, decimal? _equity_ratio, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputannual_turnover = _annual_turnover;
                var inputb2b = _b2b;
                var inputb2c = _b2c;
                var inputpayment_term_of_receivable = _payment_term_of_receivable;
                var inputaverage_of_payment_terms = _average_of_payment_terms;
                var inputaverage_invoice_value = _average_invoice_value;
                var inputequity_ratio = _equity_ratio;
                var _algorithmCheck = AlgorithmCheckImplementation(inputannual_turnover, inputb2b, inputb2c, inputpayment_term_of_receivable, inputaverage_of_payment_terms, inputaverage_invoice_value, inputequity_ratio);
                var result = Mapper.Map<DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck, AlgorithmCheckDTO>(_algorithmCheck);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("AlgorithmCheck Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<AlgorithmCheckDTO, DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck>();
            Mapper.CreateMap<DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck, AlgorithmCheckDTO>();
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck AlgorithmCheckImplementation(decimal? annual_turnover, string b2b, string b2c, decimal? payment_term_of_receivable, decimal? average_of_payment_terms, decimal? average_invoice_value, decimal? equity_ratio)
        {
            DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck algorithmCheck = new DSS5_SupplyChainFinancialsOptimisation.BO.AlgorithmCheck();
            algorithmCheck.AnnualTurnover = annual_turnover;
            algorithmCheck.B2B = b2b;
            algorithmCheck.B2C = b2c;
            algorithmCheck.PaymentTerm = payment_term_of_receivable;
            algorithmCheck.AveragePaymentTerm = average_of_payment_terms;
            algorithmCheck.AverageInvoiceValue = average_invoice_value;
            algorithmCheck.EquityRatio = equity_ratio;
            int? count = 0;
            if ((algorithmCheck?.AnnualTurnover ?? 0) >= 500000)
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if (algorithmCheck?.B2B?.ToLower() == "yes")
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((algorithmCheck?.PaymentTerm ?? 0) <= 160)
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((algorithmCheck?.AveragePaymentTerm ?? 0) >= 30 && (algorithmCheck?.AveragePaymentTerm ?? 0) <= 120)
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((algorithmCheck?.AverageInvoiceValue ?? 0) >= 300)
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            if ((algorithmCheck?.EquityRatio ?? 0) >= 10)
            {
                count = count.GetValueOrDefault(0) + 1;
            }
            algorithmCheck.AlgorithmCount = count;
            if (count == 6)
            {
                algorithmCheck.Result = "Very High Performance";
            }
            else if (count == 5)
            {
                algorithmCheck.Result = "High Performance";
            }
            else if (count == 4)
            {
                algorithmCheck.Result = "Medium Performance";
            }
            else if (count == 3)
            {
                algorithmCheck.Result = "Borderline Performance";
            }
            else if (count == 2)
            {
                algorithmCheck.Result = "Low Performance";
            }
            else if (count == 1)
            {
                algorithmCheck.Result = "Very Low Performance";
            }
            else
            {
                algorithmCheck.Result = "--";
            }
            return algorithmCheck;
        }


    }
}