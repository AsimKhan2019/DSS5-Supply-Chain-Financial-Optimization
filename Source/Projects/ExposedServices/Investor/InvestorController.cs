// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using zAppDev.DotNet.Framework.Mvc;
using AppCode;
using Identity = zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity;
namespace DSS5_SupplyChainFinancialsOptimisation.Web.Code.WebApi
{


    [RoutePrefix("api/Investor")]
    [WebApiThrottle.EnableThrottling()]
    public class InvestorController : BasicApiCtrl
    {

        /// <summary>
        /// Creates a new Investor
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("Create")]
        [HttpPost]
        public void Create([FromBody]DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts.InvestorDTO newInvestor)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Create(newInvestor,_RequestSourceIp, _UserName);
        }

        /// <summary>
        /// Get an Investor insance based on UserName
        /// </summary>
        /// <returns>Investor</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpGet]
        public DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts.InvestorDTO Get(string UserName = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Get(UserName,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        /// Count all Investors
        /// </summary>
        /// <returns>int</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("count")]
        [HttpGet]
        public HttpResponseMessage Count()
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Count(_RequestSourceIp, _UserName);
            return SendString(result);
        }

        /// <summary>
        /// Gets all Investors. Max pageSize is 50
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("all")]
        [HttpGet]
        public System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts.InvestorDTO> GetAll(int? pageSize = 0, int? pageIndex = 0)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).GetAll(pageSize,pageIndex,_RequestSourceIp, _UserName);
            return result;
        }

        /// <summary>
        /// Saves a Investor insance
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpPost]
        public void Save([FromBody]DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts.InvestorDTO Investor)
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Save(Investor,_RequestSourceIp, _UserName);
        }

        /// <summary>
        /// Deletes a Investor insance based on UserName
        /// </summary>
        /// <returns>void</returns>
        [CustomWebApiActionFilter()]
        [CustomWebApiAuthorize(LogEnabled = false)]

        [Route("")]
        [HttpDelete]
        public void Delete(string UserName = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Delete(UserName,_RequestSourceIp, _UserName);
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns>Collection</returns>
        [CustomWebApiActionFilter(LogEnabled = true, AllowPartialResponse = true)]
        [CustomWebApiAuthorize(LogEnabled = true)]

        [Route("ExposedOperation")]
        [HttpGet]
        public System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts.InvestorDTO> Find(string name = "")
        {
            var request = ((HttpContextBase)Request.Properties["MS_HttpContext"]).Request;
            var _RequestSourceIp = request.UserHostAddress;
            var _UserName = Identity.IdentityHelper.GetCurrentUserName();
            var result =  (new DSS5_SupplyChainFinancialsOptimisation.Services.InvestorService()).Find(name,_RequestSourceIp, _UserName);
            return result;
        }
    }
}
