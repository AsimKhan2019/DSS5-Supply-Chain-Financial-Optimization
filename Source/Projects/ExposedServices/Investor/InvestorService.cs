// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.ServiceModel.Channels;
using System.Security.Permissions;
using System.Security.Principal;
using NHibernate;
using System.ServiceModel.Activation;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using DSS5_SupplyChainFinancialsOptimisation.Services.Investor.DataContracts;
using DSS5_SupplyChainFinancialsOptimisation.BO;
using AutoMapper;

namespace DSS5_SupplyChainFinancialsOptimisation.Services
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class InvestorService : IInvestorService
    {
        public void Create(InvestorDTO _newInvestor, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputnewInvestor = Mapper.Map<InvestorDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(_newInvestor);
                CreateImplementation(inputnewInvestor);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public InvestorDTO Get(string userName, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputUserName = userName;
                var _get = GetImplementation(inputUserName);
                var result = Mapper.Map<DSS5_SupplyChainFinancialsOptimisation.BO.Investor, InvestorDTO>(_get);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public int? Count(string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var _count = CountImplementation();
                var result = _count;
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public System.Collections.Generic.List<InvestorDTO> GetAll(int? _pageSize, int? _pageIndex, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputpageSize = _pageSize;
                var inputpageIndex = _pageIndex;
                var _getAll = GetAllImplementation(inputpageSize, inputpageIndex);
                var result = Mapper.Map<System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>, System.Collections.Generic.List<InvestorDTO>>(_getAll);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public void Save(InvestorDTO investor, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputInvestor = Mapper.Map<InvestorDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(investor);
                SaveImplementation(inputInvestor);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public void Delete(string userName, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputUserName = userName;
                DeleteImplementation(inputUserName);
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }
        public System.Collections.Generic.List<InvestorDTO> Find(string _name, string _RequestSourceIp, string _UserName)
        {
            InitializeMappers();
            try
            {
                var inputname = _name;
                var _exposedOperation = FindImplementation(inputname);
                var result = Mapper.Map<System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>, System.Collections.Generic.List<InvestorDTO>>(_exposedOperation);
                return result;
            }
            catch (Exception @exception)
            {
                log4net.LogManager.GetLogger("Investor Service").Error(@exception);
                throw;
            }
        }


        private void InitializeMappers()
        {
            Mapper.CreateMap<InvestorDTO, DSS5_SupplyChainFinancialsOptimisation.BO.Investor>();
            Mapper.CreateMap<DSS5_SupplyChainFinancialsOptimisation.BO.Investor, InvestorDTO>();
        }

        public static void CreateImplementation(DSS5_SupplyChainFinancialsOptimisation.BO.Investor newInvestor)
        {
            newInvestor.UserName = "";
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(newInvestor);
        }

        public static DSS5_SupplyChainFinancialsOptimisation.BO.Investor GetImplementation(string UserName)
        {
            return  new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(UserName);
        }

        public static int? CountImplementation()
        {
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetCount<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>();
        }

        public static System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Investor> GetAllImplementation(int? pageSize, int? pageIndex)
        {
            if ((pageSize > 50))
            {
                pageSize = 50;
            }
            var _count0 = 0;
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetAll<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(pageIndex.GetValueOrDefault(0) * pageSize.GetValueOrDefault(0), (pageSize).GetValueOrDefault(0),out _count0);
        }

        public static void SaveImplementation(DSS5_SupplyChainFinancialsOptimisation.BO.Investor Investor)
        {
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Save<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(Investor);
        }

        public static void DeleteImplementation(string UserName)
        {
            new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().DeleteInvestor( new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().GetById<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>(UserName));
        }

        public static System.Collections.Generic.List<DSS5_SupplyChainFinancialsOptimisation.BO.Investor> FindImplementation(string name)
        {
            return new DSS5_SupplyChainFinancialsOptimisation.DAL.Repository().Get<DSS5_SupplyChainFinancialsOptimisation.BO.Investor>((a) => a.UserName == name);
        }


    }
}